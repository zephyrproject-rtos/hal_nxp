/*
** ###################################################################
**     Processors:          MIMX8ML3CVNKZ_ca53
**                          MIMX8ML3CVNKZ_cm7
**                          MIMX8ML3CVNKZ_dsp
**                          MIMX8ML3DVNLZ_ca53
**                          MIMX8ML3DVNLZ_cm7
**                          MIMX8ML3DVNLZ_dsp
**                          MIMX8ML4CVNKZ_ca53
**                          MIMX8ML4CVNKZ_cm7
**                          MIMX8ML4DVNLZ_ca53
**                          MIMX8ML4DVNLZ_cm7
**                          MIMX8ML6CVNKZ_ca53
**                          MIMX8ML6CVNKZ_cm7
**                          MIMX8ML6DVNLZ_ca53
**                          MIMX8ML6DVNLZ_cm7
**                          MIMX8ML8CVNKZ_ca53
**                          MIMX8ML8CVNKZ_cm7
**                          MIMX8ML8CVNKZ_dsp
**                          MIMX8ML8DVNLZ_ca53
**                          MIMX8ML8DVNLZ_cm7
**                          MIMX8ML8DVNLZ_dsp
**
**     Version:             rev. 5.0, 2021-03-01
**     Build:               b240708
**
**     Abstract:
**         CMSIS Peripheral Access Layer for MIPI_CSI
**
**     Copyright 1997-2016 Freescale Semiconductor, Inc.
**     Copyright 2016-2024 NXP
**     SPDX-License-Identifier: BSD-3-Clause
**
**     http:                 www.nxp.com
**     mail:                 support@nxp.com
**
**     Revisions:
**     - rev. 1.0 (2019-10-11)
**         Initial version.
**     - rev. 2.0 (2020-02-21)
**         Rev.B Header.
**     - rev. 3.0 (2020-06-22)
**         Rev.C Header.
**     - rev. 4.0 (2020-11-16)
**         Rev.D Header.
**     - rev. 5.0 (2021-03-01)
**         Rev.D Header Final.
**
** ###################################################################
*/

/*!
 * @file MIPI_CSI.h
 * @version 5.0
 * @date 2021-03-01
 * @brief CMSIS Peripheral Access Layer for MIPI_CSI
 *
 * CMSIS Peripheral Access Layer for MIPI_CSI
 */

#if !defined(MIPI_CSI_H_)
#define MIPI_CSI_H_                              /**< Symbol preventing repeated inclusion */

#if (defined(CPU_MIMX8ML3CVNKZ_ca53) || defined(CPU_MIMX8ML3DVNLZ_ca53))
#include "MIMX8ML3_ca53_COMMON.h"
#elif (defined(CPU_MIMX8ML3CVNKZ_cm7) || defined(CPU_MIMX8ML3DVNLZ_cm7))
#include "MIMX8ML3_cm7_COMMON.h"
#elif (defined(CPU_MIMX8ML3CVNKZ_dsp) || defined(CPU_MIMX8ML3DVNLZ_dsp))
#include "MIMX8ML3_dsp_COMMON.h"
#elif (defined(CPU_MIMX8ML4CVNKZ_ca53) || defined(CPU_MIMX8ML4DVNLZ_ca53))
#include "MIMX8ML4_ca53_COMMON.h"
#elif (defined(CPU_MIMX8ML4CVNKZ_cm7) || defined(CPU_MIMX8ML4DVNLZ_cm7))
#include "MIMX8ML4_cm7_COMMON.h"
#elif (defined(CPU_MIMX8ML6CVNKZ_ca53) || defined(CPU_MIMX8ML6DVNLZ_ca53))
#include "MIMX8ML6_ca53_COMMON.h"
#elif (defined(CPU_MIMX8ML6CVNKZ_cm7) || defined(CPU_MIMX8ML6DVNLZ_cm7))
#include "MIMX8ML6_cm7_COMMON.h"
#elif (defined(CPU_MIMX8ML8CVNKZ_ca53) || defined(CPU_MIMX8ML8DVNLZ_ca53))
#include "MIMX8ML8_ca53_COMMON.h"
#elif (defined(CPU_MIMX8ML8CVNKZ_cm7) || defined(CPU_MIMX8ML8DVNLZ_cm7))
#include "MIMX8ML8_cm7_COMMON.h"
#elif (defined(CPU_MIMX8ML8CVNKZ_dsp) || defined(CPU_MIMX8ML8DVNLZ_dsp))
#include "MIMX8ML8_dsp_COMMON.h"
#else
  #error "No valid CPU defined!"
#endif

/* ----------------------------------------------------------------------------
   -- Device Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup Peripheral_access_layer Device Peripheral Access Layer
 * @{
 */


/*
** Start of section using anonymous unions
*/

#if defined(__ARMCC_VERSION)
  #if (__ARMCC_VERSION >= 6010050)
    #pragma clang diagnostic push
  #else
    #pragma push
    #pragma anon_unions
  #endif
#elif defined(__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined(__IAR_SYSTEMS_ICC__)
  #pragma language=extended
#elif defined(__XTENSA__)
  /* anonymous unions are enabled by default */
#else
  #error Not supported compiler type
#endif

/* ----------------------------------------------------------------------------
   -- MIPI_CSI Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_CSI_Peripheral_Access_Layer MIPI_CSI Peripheral Access Layer
 * @{
 */

/** MIPI_CSI - Register Layout Typedef */
typedef struct {
       uint8_t RESERVED_0[4];
  __IO uint32_t CSIS_COMMON_CTRL;                  /**< CSIS Common Control Register, offset: 0x4 */
  __IO uint32_t CSIS_CLOCK_CTRL;                   /**< CSIS Clock Control Register, offset: 0x8 */
       uint8_t RESERVED_1[4];
  __IO uint32_t INTERRUPT_MASK_0;                  /**< Interrupt mask register 0, offset: 0x10 */
  __IO uint32_t INTERRUPT_SOURCE_0;                /**< Interrupt source register 0, offset: 0x14 */
  __IO uint32_t INTERRUPT_MASK_1;                  /**< Interrupt mask register 1, offset: 0x18 */
  __IO uint32_t INTERRUPT_SOURCE_1;                /**< Interrupt source register 1, offset: 0x1C */
  __IO uint32_t DPHY_STATUS;                       /**< D-PHY status register, offset: 0x20 */
  __IO uint32_t DPHY_COMMON_CTRL;                  /**< D-PHY common control register, offset: 0x24 */
       uint8_t RESERVED_2[8];
  __IO uint32_t DPHY_MASTER_SLAVE_CTRL_LOW;        /**< D-PHY Master and Slave Control register Low, offset: 0x30 */
  __IO uint32_t DPHY_MASTER_SLAVE_CTRL_HIGH;       /**< D-PHY Master and Slave Control register HIGH, offset: 0x34 */
  __IO uint32_t DPHY_SLAVE_CTRL_LOW;               /**< D-PHY Slave Control register Low, offset: 0x38 */
  __IO uint32_t DPHY_SLAVE_CTRL_HIGH;              /**< D-PHY Slave Control register HIGH, offset: 0x3C */
  __IO uint32_t ISP_CONFIG;                        /**< ISP Configuration Register, offset: 0x40 */
  __IO uint32_t ISP_RESOLUTION;                    /**< ISP Resolution Register, offset: 0x44 */
  __IO uint32_t ISP_SYNC;                          /**< ISP SYNC Register, offset: 0x48 */
       uint8_t RESERVED_3[52];
  __I  uint32_t SHADOW_CONFIG;                     /**< Shadow Configuration Register, offset: 0x80 */
  __I  uint32_t SHADOW_RESOLUTION;                 /**< Shadow Resolution Register, offset: 0x84 */
  __I  uint32_t SHADOW_SYNC;                       /**< Shadow SYNC Register, offset: 0x88 */
       uint8_t RESERVED_4[116];
  __IO uint32_t FRAME_COUNTER;                     /**< Frame Counter, offset: 0x100 */
       uint8_t RESERVED_5[12];
  __IO uint32_t LINE_INTERRUPT_RATIO;              /**< Line Interrupt Ratio, offset: 0x110 */
} MIPI_CSI_Type;

/* ----------------------------------------------------------------------------
   -- MIPI_CSI Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_CSI_Register_Masks MIPI_CSI Register Masks
 * @{
 */

/*! @name CSIS_COMMON_CTRL - CSIS Common Control Register */
/*! @{ */

#define MIPI_CSI_CSIS_COMMON_CTRL_CSI_EN_MASK    (0x1U)
#define MIPI_CSI_CSIS_COMMON_CTRL_CSI_EN_SHIFT   (0U)
/*! CSI_EN
 *  0b0..Disable
 *  0b1..Enable
 */
#define MIPI_CSI_CSIS_COMMON_CTRL_CSI_EN(x)      (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_CSIS_COMMON_CTRL_CSI_EN_SHIFT)) & MIPI_CSI_CSIS_COMMON_CTRL_CSI_EN_MASK)

#define MIPI_CSI_CSIS_COMMON_CTRL_SW_RESET_MASK  (0x2U)
#define MIPI_CSI_CSIS_COMMON_CTRL_SW_RESET_SHIFT (1U)
/*! SW_RESET - Software reset
 *  0b0..Ready
 *  0b1..Reset
 */
#define MIPI_CSI_CSIS_COMMON_CTRL_SW_RESET(x)    (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_CSIS_COMMON_CTRL_SW_RESET_SHIFT)) & MIPI_CSI_CSIS_COMMON_CTRL_SW_RESET_MASK)

#define MIPI_CSI_CSIS_COMMON_CTRL_LANE_NUMBER_MASK (0x300U)
#define MIPI_CSI_CSIS_COMMON_CTRL_LANE_NUMBER_SHIFT (8U)
/*! LANE_NUMBER
 *  0b00..1 data lane
 *  0b01..2 data lane
 *  0b10..3 data lane
 *  0b11..4 data lane
 */
#define MIPI_CSI_CSIS_COMMON_CTRL_LANE_NUMBER(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_CSIS_COMMON_CTRL_LANE_NUMBER_SHIFT)) & MIPI_CSI_CSIS_COMMON_CTRL_LANE_NUMBER_MASK)

#define MIPI_CSI_CSIS_COMMON_CTRL_INTERLEAVE_MODE_MASK (0xC00U)
#define MIPI_CSI_CSIS_COMMON_CTRL_INTERLEAVE_MODE_SHIFT (10U)
/*! INTERLEAVE_MODE - Select Interleave mode
 *  0b00..CH0 only, no data interleave
 *  0b01..DT (Data type) only
 *  0b10..Reserved
 *  0b11..Reserved
 */
#define MIPI_CSI_CSIS_COMMON_CTRL_INTERLEAVE_MODE(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_CSIS_COMMON_CTRL_INTERLEAVE_MODE_SHIFT)) & MIPI_CSI_CSIS_COMMON_CTRL_INTERLEAVE_MODE_MASK)

#define MIPI_CSI_CSIS_COMMON_CTRL_UPDATE_SHADOW_MASK (0x10000U)
#define MIPI_CSI_CSIS_COMMON_CTRL_UPDATE_SHADOW_SHIFT (16U)
/*! UPDATE_SHADOW - Strobe of updating shadow registers */
#define MIPI_CSI_CSIS_COMMON_CTRL_UPDATE_SHADOW(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_CSIS_COMMON_CTRL_UPDATE_SHADOW_SHIFT)) & MIPI_CSI_CSIS_COMMON_CTRL_UPDATE_SHADOW_MASK)
/*! @} */

/*! @name CSIS_CLOCK_CTRL - CSIS Clock Control Register */
/*! @{ */

#define MIPI_CSI_CSIS_CLOCK_CTRL_CLKGATE_EN_MASK (0x10U)
#define MIPI_CSI_CSIS_CLOCK_CTRL_CLKGATE_EN_SHIFT (4U)
/*! CLKGATE_EN
 *  0b0..Pixel clock is always alive
 *  0b1..Pixel clock is alive during the interval of frame
 */
#define MIPI_CSI_CSIS_CLOCK_CTRL_CLKGATE_EN(x)   (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_CSIS_CLOCK_CTRL_CLKGATE_EN_SHIFT)) & MIPI_CSI_CSIS_CLOCK_CTRL_CLKGATE_EN_MASK)

#define MIPI_CSI_CSIS_CLOCK_CTRL_CLKGATE_TRAIL_MASK (0xF0000U)
#define MIPI_CSI_CSIS_CLOCK_CTRL_CLKGATE_TRAIL_SHIFT (16U)
/*! CLKGATE_TRAIL - 0 ~ 3 (1~4 Trailing clocks) */
#define MIPI_CSI_CSIS_CLOCK_CTRL_CLKGATE_TRAIL(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_CSIS_CLOCK_CTRL_CLKGATE_TRAIL_SHIFT)) & MIPI_CSI_CSIS_CLOCK_CTRL_CLKGATE_TRAIL_MASK)
/*! @} */

/*! @name INTERRUPT_MASK_0 - Interrupt mask register 0 */
/*! @{ */

#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_ID_MASK (0x1U)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_ID_SHIFT (0U)
/*! MSK_ERR_ID - Unknown ID error
 *  0b0..Disable (masked)
 *  0b1..Enable (unmasked)
 */
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_ID(x)  (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_ID_SHIFT)) & MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_ID_MASK)

#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_CRC_MASK (0x2U)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_CRC_SHIFT (1U)
/*! MSK_ERR_CRC - CRC error
 *  0b0..Disable (masked)
 *  0b1..Enable (unmasked)
 */
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_CRC(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_CRC_SHIFT)) & MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_CRC_MASK)

#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_ECC_MASK (0x4U)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_ECC_SHIFT (2U)
/*! MSK_ERR_ECC - ECC error
 *  0b0..Disable (masked)
 *  0b1..Enable (unmasked)
 */
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_ECC(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_ECC_SHIFT)) & MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_ECC_MASK)

#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_WRONG_CFG_MASK (0x8U)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_WRONG_CFG_SHIFT (3U)
/*! MSK_ERR_WRONG_CFG - Wrong configuration
 *  0b0..Disable (masked)
 *  0b1..Enable (unmasked)
 */
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_WRONG_CFG(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_WRONG_CFG_SHIFT)) & MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_WRONG_CFG_MASK)

#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_OVER_MASK (0x10U)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_OVER_SHIFT (4U)
/*! MSK_ERR_OVER - Image FIFO overflow interrupt
 *  0b0..Disable (masked)
 *  0b1..Enable (unmasked)
 */
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_OVER(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_OVER_SHIFT)) & MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_OVER_MASK)

#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_LOST_FE_MASK (0x100U)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_LOST_FE_SHIFT (8U)
/*! MSK_ERR_LOST_FE - Lost of Frame End packet, CH0.
 *  0b0..Disable (masked)
 *  0b1..Enable (unmasked)
 */
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_LOST_FE(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_LOST_FE_SHIFT)) & MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_LOST_FE_MASK)

#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_LOST_FS_MASK (0x1000U)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_LOST_FS_SHIFT (12U)
/*! MSK_ERR_LOST_FS - Lost of Frame Start packet, CH0.
 *  0b0..Disable (masked)
 *  0b1..Enable (unmasked)
 */
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_LOST_FS(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_LOST_FS_SHIFT)) & MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_LOST_FS_MASK)

#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_SOT_HS_MASK (0xF0000U)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_SOT_HS_SHIFT (16U)
/*! MSK_ERR_SOT_HS - Start of transmission error [Lane3, Lane2, Lane1, Lane0]
 *  0b0000..Disable (masked)
 *  0b0001..Enable (unmasked)
 */
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_SOT_HS(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_SOT_HS_SHIFT)) & MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_SOT_HS_MASK)

#define MIPI_CSI_INTERRUPT_MASK_0_MSK_FRAMEEND_MASK (0x100000U)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_FRAMEEND_SHIFT (20U)
/*! MSK_FRAMEEND - FE packet is received, CH0.
 *  0b0..Disable (masked)
 *  0b1..Enable (unmasked)
 */
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_FRAMEEND(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_MASK_0_MSK_FRAMEEND_SHIFT)) & MIPI_CSI_INTERRUPT_MASK_0_MSK_FRAMEEND_MASK)

#define MIPI_CSI_INTERRUPT_MASK_0_MSK_FRAMESTART_MASK (0x1000000U)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_FRAMESTART_SHIFT (24U)
/*! MSK_FRAMESTART - FS packet is received, CH0.
 *  0b0..Disable (masked)
 *  0b1..Enable (unmasked)
 */
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_FRAMESTART(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_MASK_0_MSK_FRAMESTART_SHIFT)) & MIPI_CSI_INTERRUPT_MASK_0_MSK_FRAMESTART_MASK)
/*! @} */

/*! @name INTERRUPT_SOURCE_0 - Interrupt source register 0 */
/*! @{ */

#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_ID_MASK  (0x1U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_ID_SHIFT (0U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_ID(x)    (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_SOURCE_0_ERR_ID_SHIFT)) & MIPI_CSI_INTERRUPT_SOURCE_0_ERR_ID_MASK)

#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_CRC_MASK (0x2U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_CRC_SHIFT (1U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_CRC(x)   (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_SOURCE_0_ERR_CRC_SHIFT)) & MIPI_CSI_INTERRUPT_SOURCE_0_ERR_CRC_MASK)

#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_ECC_MASK (0x4U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_ECC_SHIFT (2U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_ECC(x)   (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_SOURCE_0_ERR_ECC_SHIFT)) & MIPI_CSI_INTERRUPT_SOURCE_0_ERR_ECC_MASK)

#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_WRONG_CFG_MASK (0x8U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_WRONG_CFG_SHIFT (3U)
/*! ERR_WRONG_CFG - Wrong configuration */
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_WRONG_CFG(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_SOURCE_0_ERR_WRONG_CFG_SHIFT)) & MIPI_CSI_INTERRUPT_SOURCE_0_ERR_WRONG_CFG_MASK)

#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_OVER_MASK (0x10U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_OVER_SHIFT (4U)
/*! ERR_OVER - Overflow is caused in image FIFO. */
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_OVER(x)  (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_SOURCE_0_ERR_OVER_SHIFT)) & MIPI_CSI_INTERRUPT_SOURCE_0_ERR_OVER_MASK)

#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_LOST_FE_MASK (0x100U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_LOST_FE_SHIFT (8U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_LOST_FE(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_SOURCE_0_ERR_LOST_FE_SHIFT)) & MIPI_CSI_INTERRUPT_SOURCE_0_ERR_LOST_FE_MASK)

#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_LOST_FS_MASK (0x1000U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_LOST_FS_SHIFT (12U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_LOST_FS(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_SOURCE_0_ERR_LOST_FS_SHIFT)) & MIPI_CSI_INTERRUPT_SOURCE_0_ERR_LOST_FS_MASK)

#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_SOT_HS_MASK (0xF0000U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_SOT_HS_SHIFT (16U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_SOT_HS(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_SOURCE_0_ERR_SOT_HS_SHIFT)) & MIPI_CSI_INTERRUPT_SOURCE_0_ERR_SOT_HS_MASK)

#define MIPI_CSI_INTERRUPT_SOURCE_0_FRAME_END_MASK (0x100000U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_FRAME_END_SHIFT (20U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_FRAME_END(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_SOURCE_0_FRAME_END_SHIFT)) & MIPI_CSI_INTERRUPT_SOURCE_0_FRAME_END_MASK)

#define MIPI_CSI_INTERRUPT_SOURCE_0_FRAME_START_MASK (0x1000000U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_FRAME_START_SHIFT (24U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_FRAME_START(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_SOURCE_0_FRAME_START_SHIFT)) & MIPI_CSI_INTERRUPT_SOURCE_0_FRAME_START_MASK)
/*! @} */

/*! @name INTERRUPT_MASK_1 - Interrupt mask register 1 */
/*! @{ */

#define MIPI_CSI_INTERRUPT_MASK_1_MSK_LINE_END_MASK (0x1U)
#define MIPI_CSI_INTERRUPT_MASK_1_MSK_LINE_END_SHIFT (0U)
#define MIPI_CSI_INTERRUPT_MASK_1_MSK_LINE_END(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_MASK_1_MSK_LINE_END_SHIFT)) & MIPI_CSI_INTERRUPT_MASK_1_MSK_LINE_END_MASK)
/*! @} */

/*! @name INTERRUPT_SOURCE_1 - Interrupt source register 1 */
/*! @{ */

#define MIPI_CSI_INTERRUPT_SOURCE_1_LINE_END_MASK (0x1U)
#define MIPI_CSI_INTERRUPT_SOURCE_1_LINE_END_SHIFT (0U)
#define MIPI_CSI_INTERRUPT_SOURCE_1_LINE_END(x)  (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_SOURCE_1_LINE_END_SHIFT)) & MIPI_CSI_INTERRUPT_SOURCE_1_LINE_END_MASK)
/*! @} */

/*! @name DPHY_STATUS - D-PHY status register */
/*! @{ */

#define MIPI_CSI_DPHY_STATUS_STOPSTATECLK_MASK   (0x1U)
#define MIPI_CSI_DPHY_STATUS_STOPSTATECLK_SHIFT  (0U)
/*! STOPSTATECLK
 *  0b0..Not Stop state
 *  0b1..Stop state
 */
#define MIPI_CSI_DPHY_STATUS_STOPSTATECLK(x)     (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_STATUS_STOPSTATECLK_SHIFT)) & MIPI_CSI_DPHY_STATUS_STOPSTATECLK_MASK)

#define MIPI_CSI_DPHY_STATUS_ULPSCLK_MASK        (0x2U)
#define MIPI_CSI_DPHY_STATUS_ULPSCLK_SHIFT       (1U)
/*! ULPSCLK
 *  0b0..Not ULPS
 *  0b1..ULPS
 */
#define MIPI_CSI_DPHY_STATUS_ULPSCLK(x)          (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_STATUS_ULPSCLK_SHIFT)) & MIPI_CSI_DPHY_STATUS_ULPSCLK_MASK)

#define MIPI_CSI_DPHY_STATUS_STOPSTATEDAT_MASK   (0xF0U)
#define MIPI_CSI_DPHY_STATUS_STOPSTATEDAT_SHIFT  (4U)
/*! STOPSTATEDAT - Data lane [3:0] is in Stop State
 *  0b0000..Not Stop state
 *  0b0001..Stop state
 */
#define MIPI_CSI_DPHY_STATUS_STOPSTATEDAT(x)     (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_STATUS_STOPSTATEDAT_SHIFT)) & MIPI_CSI_DPHY_STATUS_STOPSTATEDAT_MASK)

#define MIPI_CSI_DPHY_STATUS_ULPSDAT_MASK        (0xF00U)
#define MIPI_CSI_DPHY_STATUS_ULPSDAT_SHIFT       (8U)
/*! ULPSDAT - Data lane [3:0] is in ULPS
 *  0b0000..Not ULPS
 *  0b0001..ULPS
 */
#define MIPI_CSI_DPHY_STATUS_ULPSDAT(x)          (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_STATUS_ULPSDAT_SHIFT)) & MIPI_CSI_DPHY_STATUS_ULPSDAT_MASK)
/*! @} */

/*! @name DPHY_COMMON_CTRL - D-PHY common control register */
/*! @{ */

#define MIPI_CSI_DPHY_COMMON_CTRL_ENABLE_CLK_MASK (0x1U)
#define MIPI_CSI_DPHY_COMMON_CTRL_ENABLE_CLK_SHIFT (0U)
/*! ENABLE_CLK
 *  0b0..Disable
 *  0b1..Enable
 */
#define MIPI_CSI_DPHY_COMMON_CTRL_ENABLE_CLK(x)  (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_COMMON_CTRL_ENABLE_CLK_SHIFT)) & MIPI_CSI_DPHY_COMMON_CTRL_ENABLE_CLK_MASK)

#define MIPI_CSI_DPHY_COMMON_CTRL_ENABLE_DAT_MASK (0x1EU)
#define MIPI_CSI_DPHY_COMMON_CTRL_ENABLE_DAT_SHIFT (1U)
/*! ENABLE_DAT - D-PHY enable
 *  0b0000..Disable
 *  0b0001..Enable
 */
#define MIPI_CSI_DPHY_COMMON_CTRL_ENABLE_DAT(x)  (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_COMMON_CTRL_ENABLE_DAT_SHIFT)) & MIPI_CSI_DPHY_COMMON_CTRL_ENABLE_DAT_MASK)

#define MIPI_CSI_DPHY_COMMON_CTRL_S_DPDN_SWAP_DAT_MASK (0x20U)
#define MIPI_CSI_DPHY_COMMON_CTRL_S_DPDN_SWAP_DAT_SHIFT (5U)
/*! S_DPDN_SWAP_DAT - Swapping Dp and Dn channel of data lanes.
 *  0b0..Default
 *  0b1..Swapped
 */
#define MIPI_CSI_DPHY_COMMON_CTRL_S_DPDN_SWAP_DAT(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_COMMON_CTRL_S_DPDN_SWAP_DAT_SHIFT)) & MIPI_CSI_DPHY_COMMON_CTRL_S_DPDN_SWAP_DAT_MASK)

#define MIPI_CSI_DPHY_COMMON_CTRL_S_DPDN_SWAP_CLK_MASK (0x40U)
#define MIPI_CSI_DPHY_COMMON_CTRL_S_DPDN_SWAP_CLK_SHIFT (6U)
/*! S_DPDN_SWAP_CLK
 *  0b0..Default
 *  0b1..Swapped
 */
#define MIPI_CSI_DPHY_COMMON_CTRL_S_DPDN_SWAP_CLK(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_COMMON_CTRL_S_DPDN_SWAP_CLK_SHIFT)) & MIPI_CSI_DPHY_COMMON_CTRL_S_DPDN_SWAP_CLK_MASK)

#define MIPI_CSI_DPHY_COMMON_CTRL_S_CLKSETTLECTL_MASK (0xC00000U)
#define MIPI_CSI_DPHY_COMMON_CTRL_S_CLKSETTLECTL_SHIFT (22U)
/*! S_CLKSETTLECTL - Slave clock lane control for Tclk-settle */
#define MIPI_CSI_DPHY_COMMON_CTRL_S_CLKSETTLECTL(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_COMMON_CTRL_S_CLKSETTLECTL_SHIFT)) & MIPI_CSI_DPHY_COMMON_CTRL_S_CLKSETTLECTL_MASK)

#define MIPI_CSI_DPHY_COMMON_CTRL_HSSETTLE_MASK  (0xFF000000U)
#define MIPI_CSI_DPHY_COMMON_CTRL_HSSETTLE_SHIFT (24U)
/*! HSSETTLE - HS-RX settle time control */
#define MIPI_CSI_DPHY_COMMON_CTRL_HSSETTLE(x)    (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_COMMON_CTRL_HSSETTLE_SHIFT)) & MIPI_CSI_DPHY_COMMON_CTRL_HSSETTLE_MASK)
/*! @} */

/*! @name DPHY_MASTER_SLAVE_CTRL_LOW - D-PHY Master and Slave Control register Low */
/*! @{ */

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_B_DPHYCTRL_MASK (0x3FFU)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_B_DPHYCTRL_SHIFT (0U)
/*! B_DPHYCTRL - ULPS EXIT Counter Value Control. You should set B_DPHYCTL[9:0] during initial or power-up sequence */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_B_DPHYCTRL(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_B_DPHYCTRL_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_B_DPHYCTRL_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_TXTRIGGER_CLK_EN_MASK (0x400U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_TXTRIGGER_CLK_EN_SHIFT (10U)
/*! TXTRIGGER_CLK_EN - TxTrigger_Clk Enable */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_TXTRIGGER_CLK_EN(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_TXTRIGGER_CLK_EN_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_TXTRIGGER_CLK_EN_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_ERRCONTENTION_LP_EN_MASK (0x800U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_ERRCONTENTION_LP_EN_SHIFT (11U)
/*! ERRCONTENTION_LP_EN - ErrContention LP Enable */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_ERRCONTENTION_LP_EN(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_ERRCONTENTION_LP_EN_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_ERRCONTENTION_LP_EN_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_BGR_CHOPPER_EN_MASK (0x1000U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_BGR_CHOPPER_EN_SHIFT (12U)
/*! BGR_CHOPPER_EN - BGR Chopper Function Enable */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_BGR_CHOPPER_EN(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_BGR_CHOPPER_EN_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_BGR_CHOPPER_EN_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_LP_CD_HYS_MASK (0x2000U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_LP_CD_HYS_SHIFT (13U)
/*! LP_CD_HYS - LP-CD Hysteresis Level Control */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_LP_CD_HYS(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_LP_CD_HYS_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_LP_CD_HYS_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_MSTRCLK_LP_SLEW_RATE_UP_MASK (0x4000U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_MSTRCLK_LP_SLEW_RATE_UP_SHIFT (14U)
/*! MSTRCLK_LP_SLEW_RATE_UP - Master Clock Lane's LP-TX Driver Slew Rate Up Control */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_MSTRCLK_LP_SLEW_RATE_UP(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_MSTRCLK_LP_SLEW_RATE_UP_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_MSTRCLK_LP_SLEW_RATE_UP_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_MSTRCLK_LP_SLEW_RATE_DOWN_MASK (0x18000U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_MSTRCLK_LP_SLEW_RATE_DOWN_SHIFT (15U)
/*! MSTRCLK_LP_SLEW_RATE_DOWN - Master Clock Lane's LP-TX Driver Slew Rate Down Control */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_MSTRCLK_LP_SLEW_RATE_DOWN(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_MSTRCLK_LP_SLEW_RATE_DOWN_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_MSTRCLK_LP_SLEW_RATE_DOWN_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_LP_RX_PULSE_REJECT_MASK (0x20000U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_LP_RX_PULSE_REJECT_SHIFT (17U)
/*! LP_RX_PULSE_REJECT - LP-RX Pulse Rejection Control */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_LP_RX_PULSE_REJECT(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_LP_RX_PULSE_REJECT_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_LP_RX_PULSE_REJECT_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_LP_RX_VREF_LVL_MASK (0xC0000U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_LP_RX_VREF_LVL_SHIFT (18U)
/*! LP_RX_VREF_LVL - LP-RX Vref Level Control */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_LP_RX_VREF_LVL(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_LP_RX_VREF_LVL_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_LP_RX_VREF_LVL_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_VREF_SRC_SEL_MASK (0x100000U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_VREF_SRC_SEL_SHIFT (20U)
/*! VREF_SRC_SEL - Vref Source Selection */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_VREF_SRC_SEL(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_VREF_SRC_SEL_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_VREF_SRC_SEL_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_LP_RX_HYS_LVL_MASK (0x600000U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_LP_RX_HYS_LVL_SHIFT (21U)
/*! LP_RX_HYS_LVL - LP-RX Hysteresis Level Control */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_LP_RX_HYS_LVL(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_LP_RX_HYS_LVL_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_LP_RX_HYS_LVL_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_REG_1P2_LVL_SEL_MASK (0x800000U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_REG_1P2_LVL_SEL_SHIFT (23U)
/*! REG_1P2_LVL_SEL - 1.2V Regulator Valid Level Selection */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_REG_1P2_LVL_SEL(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_REG_1P2_LVL_SEL_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_REG_1P2_LVL_SEL_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_REG_1P2_LVL_CTL_MASK (0x3000000U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_REG_1P2_LVL_CTL_SHIFT (24U)
/*! REG_1P2_LVL_CTL - 1.2V Regulator Level Control (No regulator in JF) */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_REG_1P2_LVL_CTL(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_REG_1P2_LVL_CTL_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_REG_1P2_LVL_CTL_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_VREG12_EXTPWR_EN_CTL_MASK (0x4000000U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_VREG12_EXTPWR_EN_CTL_SHIFT (26U)
/*! VREG12_EXTPWR_EN_CTL - VREG12_EXTPWR Enable Control (No regulator in JF) */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_VREG12_EXTPWR_EN_CTL(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_VREG12_EXTPWR_EN_CTL_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_VREG12_EXTPWR_EN_CTL_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_BGR_CHOPPER_FREQ_MASK (0x8000000U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_BGR_CHOPPER_FREQ_SHIFT (27U)
/*! BGR_CHOPPER_FREQ - BGR Chopper Frequency Control */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_BGR_CHOPPER_FREQ(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_BGR_CHOPPER_FREQ_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_BGR_CHOPPER_FREQ_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_BIAS_REF_VOLT_MASK (0x30000000U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_BIAS_REF_VOLT_SHIFT (28U)
/*! BIAS_REF_VOLT - Bias Reference Voltage 710m Control */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_BIAS_REF_VOLT(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_BIAS_REF_VOLT_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_BIAS_REF_VOLT_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_USER_DATA_PATTERN_LOW_MASK (0xC0000000U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_USER_DATA_PATTERN_LOW_SHIFT (30U)
/*! USER_DATA_PATTERN_LOW - User Data Pattern for HS Loopback mode */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_USER_DATA_PATTERN_LOW(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_USER_DATA_PATTERN_LOW_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_USER_DATA_PATTERN_LOW_MASK)
/*! @} */

/*! @name DPHY_MASTER_SLAVE_CTRL_HIGH - D-PHY Master and Slave Control register HIGH */
/*! @{ */

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_USER_DATA_PATTERN_HIGH_MASK (0x3FU)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_USER_DATA_PATTERN_HIGH_SHIFT (0U)
/*! USER_DATA_PATTERN_HIGH - User Data Pattern for HS Loopback mode */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_USER_DATA_PATTERN_HIGH(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_USER_DATA_PATTERN_HIGH_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_USER_DATA_PATTERN_HIGH_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_HS_LOOPBACK_MODE_CTL_MASK (0xC0U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_HS_LOOPBACK_MODE_CTL_SHIFT (6U)
/*! HS_LOOPBACK_MODE_CTL - HS Loopback Mode Control */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_HS_LOOPBACK_MODE_CTL(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_HS_LOOPBACK_MODE_CTL_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_HS_LOOPBACK_MODE_CTL_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_BGR_VOLT_TUNE_MASK (0x300U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_BGR_VOLT_TUNE_SHIFT (8U)
/*! BGR_VOLT_TUNE - BGR voltage tuning control */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_BGR_VOLT_TUNE(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_BGR_VOLT_TUNE_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_BGR_VOLT_TUNE_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_DCC_DONE_MASK (0x800U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_DCC_DONE_SHIFT (11U)
/*! DCC_DONE - DCC "DONE" Signal Control */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_DCC_DONE(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_DCC_DONE_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_DCC_DONE_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_FIX_EN_MASK (0x2000U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_FIX_EN_SHIFT (13U)
/*! RX_SKEW_CALIB_FIX_EN - RX Skew Calibration Fixing Code Enable/Disable Control */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_FIX_EN(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_FIX_EN_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_FIX_EN_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_LP_REG_VREF_SRC_SEL_MASK (0x4000U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_LP_REG_VREF_SRC_SEL_SHIFT (14U)
/*! LP_REG_VREF_SRC_SEL - LP Regulator Vref Source Selection (No regulator in JF) */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_LP_REG_VREF_SRC_SEL(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_LP_REG_VREF_SRC_SEL_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_LP_REG_VREF_SRC_SEL_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA0_TX_SLEW_UP_MASK (0x100000U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA0_TX_SLEW_UP_SHIFT (20U)
/*! MST_DATA0_TX_SLEW_UP - Master Data0 Lane's LP-TX Driver Slew Rate Up Control */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA0_TX_SLEW_UP(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA0_TX_SLEW_UP_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA0_TX_SLEW_UP_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA0_TX_SLEW_DOWN_MASK (0x600000U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA0_TX_SLEW_DOWN_SHIFT (21U)
/*! MST_DATA0_TX_SLEW_DOWN - Master Data0 Lane's LP-TX Driver Slew Rate Down Control */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA0_TX_SLEW_DOWN(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA0_TX_SLEW_DOWN_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA0_TX_SLEW_DOWN_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA1_TX_SLEW_UP_MASK (0x800000U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA1_TX_SLEW_UP_SHIFT (23U)
/*! MST_DATA1_TX_SLEW_UP - Master Data1 Lane's LP-TX Driver Slew Rate Up Control */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA1_TX_SLEW_UP(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA1_TX_SLEW_UP_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA1_TX_SLEW_UP_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA1_TX_SLEW_DOWN_MASK (0x3000000U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA1_TX_SLEW_DOWN_SHIFT (24U)
/*! MST_DATA1_TX_SLEW_DOWN - Master Data1 Lane's LP-TX Driver Slew Rate Down Control */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA1_TX_SLEW_DOWN(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA1_TX_SLEW_DOWN_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA1_TX_SLEW_DOWN_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA2_TX_SLEW_UP_MASK (0x4000000U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA2_TX_SLEW_UP_SHIFT (26U)
/*! MST_DATA2_TX_SLEW_UP - Master Data2 Lane's LP-TX Driver Slew Rate Up Control */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA2_TX_SLEW_UP(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA2_TX_SLEW_UP_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA2_TX_SLEW_UP_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA2_TX_SLEW_DOWN_MASK (0x18000000U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA2_TX_SLEW_DOWN_SHIFT (27U)
/*! MST_DATA2_TX_SLEW_DOWN - Master Data2 Lane's LP-TX Driver Slew Rate Down Control */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA2_TX_SLEW_DOWN(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA2_TX_SLEW_DOWN_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA2_TX_SLEW_DOWN_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA3_TX_SLEW_UP_MASK (0x20000000U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA3_TX_SLEW_UP_SHIFT (29U)
/*! MST_DATA3_TX_SLEW_UP - Master Data3 Lane's LP-TX Driver Slew Rate Up Control */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA3_TX_SLEW_UP(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA3_TX_SLEW_UP_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA3_TX_SLEW_UP_MASK)

#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA3_TX_SLEW_DOWN_MASK (0xC0000000U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA3_TX_SLEW_DOWN_SHIFT (30U)
/*! MST_DATA3_TX_SLEW_DOWN - Master Data3 Lane's LP-TX Driver Slew Rate Down Control */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA3_TX_SLEW_DOWN(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA3_TX_SLEW_DOWN_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_MST_DATA3_TX_SLEW_DOWN_MASK)
/*! @} */

/*! @name DPHY_SLAVE_CTRL_LOW - D-PHY Slave Control register Low */
/*! @{ */

#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_HS_RX_BIAS_MASK (0x3U)
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_HS_RX_BIAS_SHIFT (0U)
/*! HS_RX_BIAS - HS RX Bias Control */
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_HS_RX_BIAS(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_SLAVE_CTRL_LOW_HS_RX_BIAS_SHIFT)) & MIPI_CSI_DPHY_SLAVE_CTRL_LOW_HS_RX_BIAS_MASK)

#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_CLK_LANE_HS_RX_DELAY_MASK (0xCU)
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_CLK_LANE_HS_RX_DELAY_SHIFT (2U)
/*! CLK_LANE_HS_RX_DELAY - Clock Lane HS RX Delay Control */
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_CLK_LANE_HS_RX_DELAY(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_SLAVE_CTRL_LOW_CLK_LANE_HS_RX_DELAY_SHIFT)) & MIPI_CSI_DPHY_SLAVE_CTRL_LOW_CLK_LANE_HS_RX_DELAY_MASK)

#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_DATA_LANE_HS_RX_DELAY_MASK (0x30U)
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_DATA_LANE_HS_RX_DELAY_SHIFT (4U)
/*! DATA_LANE_HS_RX_DELAY - Data Lane HS RX Delay Control */
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_DATA_LANE_HS_RX_DELAY(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_SLAVE_CTRL_LOW_DATA_LANE_HS_RX_DELAY_SHIFT)) & MIPI_CSI_DPHY_SLAVE_CTRL_LOW_DATA_LANE_HS_RX_DELAY_MASK)

#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_HS_RX_TERMINATION_IMPEDENCE_MASK (0xC0U)
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_HS_RX_TERMINATION_IMPEDENCE_SHIFT (6U)
/*! HS_RX_TERMINATION_IMPEDENCE - HS-RX Termination Impedance Control */
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_HS_RX_TERMINATION_IMPEDENCE(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_SLAVE_CTRL_LOW_HS_RX_TERMINATION_IMPEDENCE_SHIFT)) & MIPI_CSI_DPHY_SLAVE_CTRL_LOW_HS_RX_TERMINATION_IMPEDENCE_MASK)

#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_CLOCK_LANE_CAP_TCLK_SETTLE_MASK (0x300U)
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_CLOCK_LANE_CAP_TCLK_SETTLE_SHIFT (8U)
/*! CLOCK_LANE_CAP_TCLK_SETTLE - Clock Lane Cap. Value Control for Tclk-settle */
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_CLOCK_LANE_CAP_TCLK_SETTLE(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_SLAVE_CTRL_LOW_CLOCK_LANE_CAP_TCLK_SETTLE_SHIFT)) & MIPI_CSI_DPHY_SLAVE_CTRL_LOW_CLOCK_LANE_CAP_TCLK_SETTLE_MASK)

#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_CLOCK_LANE_CAP_TCLK_MISS_MASK (0xC00U)
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_CLOCK_LANE_CAP_TCLK_MISS_SHIFT (10U)
/*! CLOCK_LANE_CAP_TCLK_MISS - Clock Lane Cap. Value Control for Tclk_miss */
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_CLOCK_LANE_CAP_TCLK_MISS(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_SLAVE_CTRL_LOW_CLOCK_LANE_CAP_TCLK_MISS_SHIFT)) & MIPI_CSI_DPHY_SLAVE_CTRL_LOW_CLOCK_LANE_CAP_TCLK_MISS_MASK)

#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_CLK_MISS_EN_MASK (0x1000U)
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_CLK_MISS_EN_SHIFT (12U)
/*! CLK_MISS_EN - Clock Miss Function Enable/Disable Control */
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_CLK_MISS_EN(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_SLAVE_CTRL_LOW_CLK_MISS_EN_SHIFT)) & MIPI_CSI_DPHY_SLAVE_CTRL_LOW_CLK_MISS_EN_MASK)

#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_ANA_TIMER_HYS_MASK (0x6000U)
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_ANA_TIMER_HYS_SHIFT (13U)
/*! ANA_TIMER_HYS - Analog Timer Hysteresis Control */
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_ANA_TIMER_HYS(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_SLAVE_CTRL_LOW_ANA_TIMER_HYS_SHIFT)) & MIPI_CSI_DPHY_SLAVE_CTRL_LOW_ANA_TIMER_HYS_MASK)

#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_DCC_CCO_GAIN_MASK (0x30000U)
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_DCC_CCO_GAIN_SHIFT (16U)
/*! DCC_CCO_GAIN - DCC CCO Gain Control */
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_DCC_CCO_GAIN(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_SLAVE_CTRL_LOW_DCC_CCO_GAIN_SHIFT)) & MIPI_CSI_DPHY_SLAVE_CTRL_LOW_DCC_CCO_GAIN_MASK)

#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_DCC_INIT_TOLERANCE_MASK (0x70000000U)
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_DCC_INIT_TOLERANCE_SHIFT (28U)
/*! DCC_INIT_TOLERANCE - DCC Initial Tolerance */
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_DCC_INIT_TOLERANCE(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_SLAVE_CTRL_LOW_DCC_INIT_TOLERANCE_SHIFT)) & MIPI_CSI_DPHY_SLAVE_CTRL_LOW_DCC_INIT_TOLERANCE_MASK)

#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_DCC_STABLE_MASK (0x80000000U)
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_DCC_STABLE_SHIFT (31U)
/*! DCC_STABLE - DCC Stable Control */
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_DCC_STABLE(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_SLAVE_CTRL_LOW_DCC_STABLE_SHIFT)) & MIPI_CSI_DPHY_SLAVE_CTRL_LOW_DCC_STABLE_MASK)
/*! @} */

/*! @name DPHY_SLAVE_CTRL_HIGH - D-PHY Slave Control register HIGH */
/*! @{ */

#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_DCC_EN_MASK (0x1U)
#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_DCC_EN_SHIFT (0U)
/*! DCC_EN - DCC Function Enable/Disable Control */
#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_DCC_EN(x)  (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_DCC_EN_SHIFT)) & MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_DCC_EN_MASK)

#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_SKEW_CALIB_EN_MASK (0x2U)
#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_SKEW_CALIB_EN_SHIFT (1U)
/*! SKEW_CALIB_EN - Skew Calibration Function Enable/Disable Control */
#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_SKEW_CALIB_EN(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_SKEW_CALIB_EN_SHIFT)) & MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_SKEW_CALIB_EN_MASK)

#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_MAX_MASK (0xFCU)
#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_MAX_SHIFT (2U)
/*! RX_SKEW_CALIB_MAX - RX Skew Calibration Max Code Control */
#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_MAX(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_MAX_SHIFT)) & MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_MAX_MASK)

#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_FAIL_MIN_MASK (0x3F00U)
#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_FAIL_MIN_SHIFT (8U)
/*! RX_SKEW_CALIB_FAIL_MIN - RX Skew Calibration Fail-min Control */
#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_FAIL_MIN(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_FAIL_MIN_SHIFT)) & MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_FAIL_MIN_MASK)

#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_PASS_MIN_MASK (0x3F0000U)
#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_PASS_MIN_SHIFT (16U)
/*! RX_SKEW_CALIB_PASS_MIN - RX Skew Calibration Pass-min Control */
#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_PASS_MIN(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_PASS_MIN_SHIFT)) & MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_PASS_MIN_MASK)

#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_FAIL_TOLERANCE_MASK (0x3000000U)
#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_FAIL_TOLERANCE_SHIFT (24U)
/*! RX_SKEW_CALIB_FAIL_TOLERANCE - RX Skew Calibration Fail-tolerance Control */
#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_FAIL_TOLERANCE(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_FAIL_TOLERANCE_SHIFT)) & MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_FAIL_TOLERANCE_MASK)

#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_COMPARE_WAIT_TIME_MASK (0xC000000U)
#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_COMPARE_WAIT_TIME_SHIFT (26U)
/*! RX_SKEW_CALIB_COMPARE_WAIT_TIME - RX Skew Calibration Compare-wait time Control */
#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_COMPARE_WAIT_TIME(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_COMPARE_WAIT_TIME_SHIFT)) & MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_COMPARE_WAIT_TIME_MASK)

#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_COMPARE_RUN_TIME_MASK (0xF0000000U)
#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_COMPARE_RUN_TIME_SHIFT (28U)
/*! RX_SKEW_CALIB_COMPARE_RUN_TIME - RX Skew Calibration Compare-run time Control */
#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_COMPARE_RUN_TIME(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_COMPARE_RUN_TIME_SHIFT)) & MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_RX_SKEW_CALIB_COMPARE_RUN_TIME_MASK)
/*! @} */

/*! @name ISP_CONFIG - ISP Configuration Register */
/*! @{ */

#define MIPI_CSI_ISP_CONFIG_DATAFORMAT_MASK      (0xFCU)
#define MIPI_CSI_ISP_CONFIG_DATAFORMAT_SHIFT     (2U)
/*! DATAFORMAT - Image Data Format */
#define MIPI_CSI_ISP_CONFIG_DATAFORMAT(x)        (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_ISP_CONFIG_DATAFORMAT_SHIFT)) & MIPI_CSI_ISP_CONFIG_DATAFORMAT_MASK)

#define MIPI_CSI_ISP_CONFIG_RGB_SWAP_MASK        (0x400U)
#define MIPI_CSI_ISP_CONFIG_RGB_SWAP_SHIFT       (10U)
/*! RGB_SWAP
 *  0b0..MSB is R and LSB is B
 *  0b1..MSB is B and LSB is R (swapped)
 */
#define MIPI_CSI_ISP_CONFIG_RGB_SWAP(x)          (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_ISP_CONFIG_RGB_SWAP_SHIFT)) & MIPI_CSI_ISP_CONFIG_RGB_SWAP_MASK)

#define MIPI_CSI_ISP_CONFIG_PARALLEL_MASK        (0x800U)
#define MIPI_CSI_ISP_CONFIG_PARALLEL_SHIFT       (11U)
/*! PARALLEL - Output bus width of CH0 is 32 bits.
 *  0b0..Normal output
 *  0b1..32bit data alignment
 */
#define MIPI_CSI_ISP_CONFIG_PARALLEL(x)          (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_ISP_CONFIG_PARALLEL_SHIFT)) & MIPI_CSI_ISP_CONFIG_PARALLEL_MASK)

#define MIPI_CSI_ISP_CONFIG_PIXEL_MODE_MASK      (0x3000U)
#define MIPI_CSI_ISP_CONFIG_PIXEL_MODE_SHIFT     (12U)
/*! PIXEL_MODE - Pixel mode selection, */
#define MIPI_CSI_ISP_CONFIG_PIXEL_MODE(x)        (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_ISP_CONFIG_PIXEL_MODE_SHIFT)) & MIPI_CSI_ISP_CONFIG_PIXEL_MODE_MASK)
/*! @} */

/*! @name ISP_RESOLUTION - ISP Resolution Register */
/*! @{ */

#define MIPI_CSI_ISP_RESOLUTION_HRESOL_MASK      (0xFFFFU)
#define MIPI_CSI_ISP_RESOLUTION_HRESOL_SHIFT     (0U)
/*! HRESOL - Horizontal Image resolution */
#define MIPI_CSI_ISP_RESOLUTION_HRESOL(x)        (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_ISP_RESOLUTION_HRESOL_SHIFT)) & MIPI_CSI_ISP_RESOLUTION_HRESOL_MASK)

#define MIPI_CSI_ISP_RESOLUTION_VRESOL_MASK      (0xFFFF0000U)
#define MIPI_CSI_ISP_RESOLUTION_VRESOL_SHIFT     (16U)
/*! VRESOL - Vertical Image resolution */
#define MIPI_CSI_ISP_RESOLUTION_VRESOL(x)        (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_ISP_RESOLUTION_VRESOL_SHIFT)) & MIPI_CSI_ISP_RESOLUTION_VRESOL_MASK)
/*! @} */

/*! @name ISP_SYNC - ISP SYNC Register */
/*! @{ */

#define MIPI_CSI_ISP_SYNC_HSYNC_LINTV_MASK       (0xFC0000U)
#define MIPI_CSI_ISP_SYNC_HSYNC_LINTV_SHIFT      (18U)
#define MIPI_CSI_ISP_SYNC_HSYNC_LINTV(x)         (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_ISP_SYNC_HSYNC_LINTV_SHIFT)) & MIPI_CSI_ISP_SYNC_HSYNC_LINTV_MASK)
/*! @} */

/*! @name SHADOW_CONFIG - Shadow Configuration Register */
/*! @{ */

#define MIPI_CSI_SHADOW_CONFIG_DATAFORMAT_MASK   (0xFCU)
#define MIPI_CSI_SHADOW_CONFIG_DATAFORMAT_SHIFT  (2U)
#define MIPI_CSI_SHADOW_CONFIG_DATAFORMAT(x)     (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_SHADOW_CONFIG_DATAFORMAT_SHIFT)) & MIPI_CSI_SHADOW_CONFIG_DATAFORMAT_MASK)

#define MIPI_CSI_SHADOW_CONFIG_RGB_SWAP_SDW_MASK (0x400U)
#define MIPI_CSI_SHADOW_CONFIG_RGB_SWAP_SDW_SHIFT (10U)
#define MIPI_CSI_SHADOW_CONFIG_RGB_SWAP_SDW(x)   (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_SHADOW_CONFIG_RGB_SWAP_SDW_SHIFT)) & MIPI_CSI_SHADOW_CONFIG_RGB_SWAP_SDW_MASK)

#define MIPI_CSI_SHADOW_CONFIG_PARALLEL_SDW_MASK (0x800U)
#define MIPI_CSI_SHADOW_CONFIG_PARALLEL_SDW_SHIFT (11U)
#define MIPI_CSI_SHADOW_CONFIG_PARALLEL_SDW(x)   (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_SHADOW_CONFIG_PARALLEL_SDW_SHIFT)) & MIPI_CSI_SHADOW_CONFIG_PARALLEL_SDW_MASK)

#define MIPI_CSI_SHADOW_CONFIG_PIXEL_MODE_MASK   (0x3000U)
#define MIPI_CSI_SHADOW_CONFIG_PIXEL_MODE_SHIFT  (12U)
#define MIPI_CSI_SHADOW_CONFIG_PIXEL_MODE(x)     (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_SHADOW_CONFIG_PIXEL_MODE_SHIFT)) & MIPI_CSI_SHADOW_CONFIG_PIXEL_MODE_MASK)
/*! @} */

/*! @name SHADOW_RESOLUTION - Shadow Resolution Register */
/*! @{ */

#define MIPI_CSI_SHADOW_RESOLUTION_HRESOL_SDW_MASK (0xFFFFU)
#define MIPI_CSI_SHADOW_RESOLUTION_HRESOL_SDW_SHIFT (0U)
#define MIPI_CSI_SHADOW_RESOLUTION_HRESOL_SDW(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_SHADOW_RESOLUTION_HRESOL_SDW_SHIFT)) & MIPI_CSI_SHADOW_RESOLUTION_HRESOL_SDW_MASK)

#define MIPI_CSI_SHADOW_RESOLUTION_VRESOL_SDW_MASK (0xFFFF0000U)
#define MIPI_CSI_SHADOW_RESOLUTION_VRESOL_SDW_SHIFT (16U)
#define MIPI_CSI_SHADOW_RESOLUTION_VRESOL_SDW(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_SHADOW_RESOLUTION_VRESOL_SDW_SHIFT)) & MIPI_CSI_SHADOW_RESOLUTION_VRESOL_SDW_MASK)
/*! @} */

/*! @name SHADOW_SYNC - Shadow SYNC Register */
/*! @{ */

#define MIPI_CSI_SHADOW_SYNC_HSYNC_LINTV_SDW_MASK (0xFC0000U)
#define MIPI_CSI_SHADOW_SYNC_HSYNC_LINTV_SDW_SHIFT (18U)
#define MIPI_CSI_SHADOW_SYNC_HSYNC_LINTV_SDW(x)  (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_SHADOW_SYNC_HSYNC_LINTV_SDW_SHIFT)) & MIPI_CSI_SHADOW_SYNC_HSYNC_LINTV_SDW_MASK)
/*! @} */

/*! @name FRAME_COUNTER - Frame Counter */
/*! @{ */

#define MIPI_CSI_FRAME_COUNTER_FRM_CNT_MASK      (0xFFFFFFFFU)
#define MIPI_CSI_FRAME_COUNTER_FRM_CNT_SHIFT     (0U)
#define MIPI_CSI_FRAME_COUNTER_FRM_CNT(x)        (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_FRAME_COUNTER_FRM_CNT_SHIFT)) & MIPI_CSI_FRAME_COUNTER_FRM_CNT_MASK)
/*! @} */

/*! @name LINE_INTERRUPT_RATIO - Line Interrupt Ratio */
/*! @{ */

#define MIPI_CSI_LINE_INTERRUPT_RATIO_LINE_INTR_MASK (0xFFFFFFFFU)
#define MIPI_CSI_LINE_INTERRUPT_RATIO_LINE_INTR_SHIFT (0U)
#define MIPI_CSI_LINE_INTERRUPT_RATIO_LINE_INTR(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_LINE_INTERRUPT_RATIO_LINE_INTR_SHIFT)) & MIPI_CSI_LINE_INTERRUPT_RATIO_LINE_INTR_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group MIPI_CSI_Register_Masks */


/*!
 * @}
 */ /* end of group MIPI_CSI_Peripheral_Access_Layer */


/*
** End of section using anonymous unions
*/

#if defined(__ARMCC_VERSION)
  #if (__ARMCC_VERSION >= 6010050)
    #pragma clang diagnostic pop
  #else
    #pragma pop
  #endif
#elif defined(__GNUC__)
  /* leave anonymous unions enabled */
#elif defined(__IAR_SYSTEMS_ICC__)
  #pragma language=default
#elif defined(__XTENSA__)
  /* leave anonymous unions enabled */
#else
  #error Not supported compiler type
#endif

/*!
 * @}
 */ /* end of group Peripheral_access_layer */


#endif  /* MIPI_CSI_H_ */

