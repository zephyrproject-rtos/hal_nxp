/*
** ###################################################################
**     Processors:          MIMX8UD3CVP08_ca35
**                          MIMX8UD3CVP08_cm33
**                          MIMX8UD3CVP08_dsp0
**                          MIMX8UD3CVP08_dsp1
**                          MIMX8UD3DVK08_ca35
**                          MIMX8UD3DVK08_cm33
**                          MIMX8UD3DVK08_dsp0
**                          MIMX8UD3DVK08_dsp1
**                          MIMX8UD3DVP08_ca35
**                          MIMX8UD3DVP08_cm33
**                          MIMX8UD3DVP08_dsp0
**                          MIMX8UD3DVP08_dsp1
**                          MIMX8UD5CVP08_ca35
**                          MIMX8UD5CVP08_cm33
**                          MIMX8UD5CVP08_dsp0
**                          MIMX8UD5CVP08_dsp1
**                          MIMX8UD5DVK08_ca35
**                          MIMX8UD5DVK08_cm33
**                          MIMX8UD5DVK08_dsp0
**                          MIMX8UD5DVK08_dsp1
**                          MIMX8UD5DVP08_ca35
**                          MIMX8UD5DVP08_cm33
**                          MIMX8UD5DVP08_dsp0
**                          MIMX8UD5DVP08_dsp1
**                          MIMX8UD7CVP08_ca35
**                          MIMX8UD7CVP08_cm33
**                          MIMX8UD7CVP08_dsp0
**                          MIMX8UD7CVP08_dsp1
**                          MIMX8UD7DVK08_ca35
**                          MIMX8UD7DVK08_cm33
**                          MIMX8UD7DVK08_dsp0
**                          MIMX8UD7DVK08_dsp1
**                          MIMX8UD7DVP08_ca35
**                          MIMX8UD7DVP08_cm33
**                          MIMX8UD7DVP08_dsp0
**                          MIMX8UD7DVP08_dsp1
**                          MIMX8US3CVP08_ca35
**                          MIMX8US3CVP08_cm33
**                          MIMX8US3CVP08_dsp0
**                          MIMX8US3CVP08_dsp1
**                          MIMX8US3DVK08_ca35
**                          MIMX8US3DVK08_cm33
**                          MIMX8US3DVK08_dsp0
**                          MIMX8US3DVK08_dsp1
**                          MIMX8US3DVP08_ca35
**                          MIMX8US3DVP08_cm33
**                          MIMX8US3DVP08_dsp0
**                          MIMX8US3DVP08_dsp1
**                          MIMX8US5CVP08_ca35
**                          MIMX8US5CVP08_cm33
**                          MIMX8US5CVP08_dsp0
**                          MIMX8US5CVP08_dsp1
**                          MIMX8US5DVK08_ca35
**                          MIMX8US5DVK08_cm33
**                          MIMX8US5DVK08_dsp0
**                          MIMX8US5DVK08_dsp1
**                          MIMX8US5DVP08_ca35
**                          MIMX8US5DVP08_cm33
**                          MIMX8US5DVP08_dsp0
**                          MIMX8US5DVP08_dsp1
**
**     Version:             rev. 5.0, 2023-04-27
**     Build:               b240823
**
**     Abstract:
**         CMSIS Peripheral Access Layer for XRDC
**
**     Copyright 1997-2016 Freescale Semiconductor, Inc.
**     Copyright 2016-2024 NXP
**     SPDX-License-Identifier: BSD-3-Clause
**
**     http:                 www.nxp.com
**     mail:                 support@nxp.com
**
**     Revisions:
**     - rev. 1.0 (2020-05-25)
**         Initial version.
**     - rev. 2.0 (2020-09-18)
**         Base on rev A RM
**     - rev. 3.0 (2021-01-20)
**         Base on rev A.1 RM
**     - rev. 4.0 (2021-07-05)
**         Base on rev B RM
**     - rev. 5.0 (2023-04-27)
**         Base on rev D RM
**
** ###################################################################
*/

/*!
 * @file XRDC.h
 * @version 5.0
 * @date 2023-04-27
 * @brief CMSIS Peripheral Access Layer for XRDC
 *
 * CMSIS Peripheral Access Layer for XRDC
 */

#if !defined(XRDC_H_)
#define XRDC_H_                                  /**< Symbol preventing repeated inclusion */

#if (defined(CPU_MIMX8UD3CVP08_ca35) || defined(CPU_MIMX8UD3DVK08_ca35) || defined(CPU_MIMX8UD3DVP08_ca35))
#include "MIMX8UD3_ca35_COMMON.h"
#elif (defined(CPU_MIMX8UD3CVP08_cm33) || defined(CPU_MIMX8UD3DVK08_cm33) || defined(CPU_MIMX8UD3DVP08_cm33))
#include "MIMX8UD3_cm33_COMMON.h"
#elif (defined(CPU_MIMX8UD3CVP08_dsp0) || defined(CPU_MIMX8UD3DVK08_dsp0) || defined(CPU_MIMX8UD3DVP08_dsp0))
#include "MIMX8UD3_dsp0_COMMON.h"
#elif (defined(CPU_MIMX8UD3CVP08_dsp1) || defined(CPU_MIMX8UD3DVK08_dsp1) || defined(CPU_MIMX8UD3DVP08_dsp1))
#include "MIMX8UD3_dsp1_COMMON.h"
#elif (defined(CPU_MIMX8UD5CVP08_ca35) || defined(CPU_MIMX8UD5DVK08_ca35) || defined(CPU_MIMX8UD5DVP08_ca35))
#include "MIMX8UD5_ca35_COMMON.h"
#elif (defined(CPU_MIMX8UD5CVP08_cm33) || defined(CPU_MIMX8UD5DVK08_cm33) || defined(CPU_MIMX8UD5DVP08_cm33))
#include "MIMX8UD5_cm33_COMMON.h"
#elif (defined(CPU_MIMX8UD5CVP08_dsp0) || defined(CPU_MIMX8UD5DVK08_dsp0) || defined(CPU_MIMX8UD5DVP08_dsp0))
#include "MIMX8UD5_dsp0_COMMON.h"
#elif (defined(CPU_MIMX8UD5CVP08_dsp1) || defined(CPU_MIMX8UD5DVK08_dsp1) || defined(CPU_MIMX8UD5DVP08_dsp1))
#include "MIMX8UD5_dsp1_COMMON.h"
#elif (defined(CPU_MIMX8UD7CVP08_ca35) || defined(CPU_MIMX8UD7DVK08_ca35) || defined(CPU_MIMX8UD7DVP08_ca35))
#include "MIMX8UD7_ca35_COMMON.h"
#elif (defined(CPU_MIMX8UD7CVP08_cm33) || defined(CPU_MIMX8UD7DVK08_cm33) || defined(CPU_MIMX8UD7DVP08_cm33))
#include "MIMX8UD7_cm33_COMMON.h"
#elif (defined(CPU_MIMX8UD7CVP08_dsp0) || defined(CPU_MIMX8UD7DVK08_dsp0) || defined(CPU_MIMX8UD7DVP08_dsp0))
#include "MIMX8UD7_dsp0_COMMON.h"
#elif (defined(CPU_MIMX8UD7CVP08_dsp1) || defined(CPU_MIMX8UD7DVK08_dsp1) || defined(CPU_MIMX8UD7DVP08_dsp1))
#include "MIMX8UD7_dsp1_COMMON.h"
#elif (defined(CPU_MIMX8US3CVP08_ca35) || defined(CPU_MIMX8US3DVK08_ca35) || defined(CPU_MIMX8US3DVP08_ca35))
#include "MIMX8US3_ca35_COMMON.h"
#elif (defined(CPU_MIMX8US3CVP08_cm33) || defined(CPU_MIMX8US3DVK08_cm33) || defined(CPU_MIMX8US3DVP08_cm33))
#include "MIMX8US3_cm33_COMMON.h"
#elif (defined(CPU_MIMX8US3CVP08_dsp0) || defined(CPU_MIMX8US3DVK08_dsp0) || defined(CPU_MIMX8US3DVP08_dsp0))
#include "MIMX8US3_dsp0_COMMON.h"
#elif (defined(CPU_MIMX8US3CVP08_dsp1) || defined(CPU_MIMX8US3DVK08_dsp1) || defined(CPU_MIMX8US3DVP08_dsp1))
#include "MIMX8US3_dsp1_COMMON.h"
#elif (defined(CPU_MIMX8US5CVP08_ca35) || defined(CPU_MIMX8US5DVK08_ca35) || defined(CPU_MIMX8US5DVP08_ca35))
#include "MIMX8US5_ca35_COMMON.h"
#elif (defined(CPU_MIMX8US5CVP08_cm33) || defined(CPU_MIMX8US5DVK08_cm33) || defined(CPU_MIMX8US5DVP08_cm33))
#include "MIMX8US5_cm33_COMMON.h"
#elif (defined(CPU_MIMX8US5CVP08_dsp0) || defined(CPU_MIMX8US5DVK08_dsp0) || defined(CPU_MIMX8US5DVP08_dsp0))
#include "MIMX8US5_dsp0_COMMON.h"
#elif (defined(CPU_MIMX8US5CVP08_dsp1) || defined(CPU_MIMX8US5DVK08_dsp1) || defined(CPU_MIMX8US5DVP08_dsp1))
#include "MIMX8US5_dsp1_COMMON.h"
#else
  #error "No valid CPU defined!"
#endif

/* ----------------------------------------------------------------------------
   -- Device Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup Peripheral_access_layer Device Peripheral Access Layer
 * @{
 */


/*
** Start of section using anonymous unions
*/

#if defined(__ARMCC_VERSION)
  #if (__ARMCC_VERSION >= 6010050)
    #pragma clang diagnostic push
  #else
    #pragma push
    #pragma anon_unions
  #endif
#elif defined(__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined(__IAR_SYSTEMS_ICC__)
  #pragma language=extended
#elif defined(__XTENSA__)
  /* anonymous unions are enabled by default */
#else
  #error Not supported compiler type
#endif

/* ----------------------------------------------------------------------------
   -- XRDC Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup XRDC_Peripheral_Access_Layer XRDC Peripheral Access Layer
 * @{
 */

/** XRDC - Size of Registers Arrays */
#define XRDC_MDACFG_COUNT                         17u
#define XRDC_MRC_COUNT                            13u
#define XRDC_DERRLOC_COUNT                        8u

/** XRDC - Register Layout Typedef */
typedef struct {
  __IO uint32_t CR;                                /**< Control Register, offset: 0x0 */
       uint8_t RESERVED_0[236];
  __I  uint32_t HWCFG0;                            /**< Hardware Configuration Register 0, offset: 0xF0 */
  __I  uint32_t HWCFG1;                            /**< Hardware Configuration Register 1, offset: 0xF4 */
  __I  uint32_t HWCFG2;                            /**< Hardware Configuration Register 2, offset: 0xF8 */
  __I  uint32_t HWCFG3;                            /**< Hardware Configuration Register 3, offset: 0xFC */
  __I  uint8_t MDACFG[XRDC_MDACFG_COUNT];          /**< Master Domain Assignment Configuration Register, array offset: 0x100, array step: 0x1 */
       uint8_t RESERVED_1[47];
  __I  uint8_t MRCFG[XRDC_MRC_COUNT];              /**< Memory Region Configuration Register, array offset: 0x140, array step: 0x1 */
       uint8_t RESERVED_2[175];
  __IO uint32_t FDID;                              /**< Fault Domain ID, offset: 0x1FC */
  __I  uint32_t DERRLOC[XRDC_DERRLOC_COUNT];       /**< Domain Error Location Register, array offset: 0x200, array step: 0x4 */
       uint8_t RESERVED_3[480];
  __I  uint32_t DERR_W0_0;                         /**< Domain Error Word0 Register, offset: 0x400 */
  __I  uint32_t DERR_W1_0;                         /**< Domain Error Word1 Register, offset: 0x404 */
       uint8_t RESERVED_4[4];
  __O  uint32_t DERR_W3_0;                         /**< Domain Error Word3 Register, offset: 0x40C */
  __I  uint32_t DERR_W0_1;                         /**< Domain Error Word0 Register, offset: 0x410 */
  __I  uint32_t DERR_W1_1;                         /**< Domain Error Word1 Register, offset: 0x414 */
       uint8_t RESERVED_5[4];
  __O  uint32_t DERR_W3_1;                         /**< Domain Error Word3 Register, offset: 0x41C */
  __I  uint32_t DERR_W0_2;                         /**< Domain Error Word0 Register, offset: 0x420 */
  __I  uint32_t DERR_W1_2;                         /**< Domain Error Word1 Register, offset: 0x424 */
       uint8_t RESERVED_6[4];
  __O  uint32_t DERR_W3_2;                         /**< Domain Error Word3 Register, offset: 0x42C */
  __I  uint32_t DERR_W0_3;                         /**< Domain Error Word0 Register, offset: 0x430 */
  __I  uint32_t DERR_W1_3;                         /**< Domain Error Word1 Register, offset: 0x434 */
       uint8_t RESERVED_7[4];
  __O  uint32_t DERR_W3_3;                         /**< Domain Error Word3 Register, offset: 0x43C */
  __I  uint32_t DERR_W0_4;                         /**< Domain Error Word0 Register, offset: 0x440 */
  __I  uint32_t DERR_W1_4;                         /**< Domain Error Word1 Register, offset: 0x444 */
       uint8_t RESERVED_8[4];
  __O  uint32_t DERR_W3_4;                         /**< Domain Error Word3 Register, offset: 0x44C */
  __I  uint32_t DERR_W0_5;                         /**< Domain Error Word0 Register, offset: 0x450 */
  __I  uint32_t DERR_W1_5;                         /**< Domain Error Word1 Register, offset: 0x454 */
       uint8_t RESERVED_9[4];
  __O  uint32_t DERR_W3_5;                         /**< Domain Error Word3 Register, offset: 0x45C */
  __I  uint32_t DERR_W0_6;                         /**< Domain Error Word0 Register, offset: 0x460 */
  __I  uint32_t DERR_W1_6;                         /**< Domain Error Word1 Register, offset: 0x464 */
       uint8_t RESERVED_10[4];
  __O  uint32_t DERR_W3_6;                         /**< Domain Error Word3 Register, offset: 0x46C */
  __I  uint32_t DERR_W0_7;                         /**< Domain Error Word0 Register, offset: 0x470 */
  __I  uint32_t DERR_W1_7;                         /**< Domain Error Word1 Register, offset: 0x474 */
       uint8_t RESERVED_11[4];
  __O  uint32_t DERR_W3_7;                         /**< Domain Error Word3 Register, offset: 0x47C */
  __I  uint32_t DERR_W0_8;                         /**< Domain Error Word0 Register, offset: 0x480 */
  __I  uint32_t DERR_W1_8;                         /**< Domain Error Word1 Register, offset: 0x484 */
       uint8_t RESERVED_12[4];
  __O  uint32_t DERR_W3_8;                         /**< Domain Error Word3 Register, offset: 0x48C */
  __I  uint32_t DERR_W0_9;                         /**< Domain Error Word0 Register, offset: 0x490 */
  __I  uint32_t DERR_W1_9;                         /**< Domain Error Word1 Register, offset: 0x494 */
       uint8_t RESERVED_13[4];
  __O  uint32_t DERR_W3_9;                         /**< Domain Error Word3 Register, offset: 0x49C */
  __I  uint32_t DERR_W0_10;                        /**< Domain Error Word0 Register, offset: 0x4A0 */
  __I  uint32_t DERR_W1_10;                        /**< Domain Error Word1 Register, offset: 0x4A4 */
       uint8_t RESERVED_14[4];
  __O  uint32_t DERR_W3_10;                        /**< Domain Error Word3 Register, offset: 0x4AC */
  __I  uint32_t DERR_W0_11;                        /**< Domain Error Word0 Register, offset: 0x4B0 */
  __I  uint32_t DERR_W1_11;                        /**< Domain Error Word1 Register, offset: 0x4B4 */
       uint8_t RESERVED_15[4];
  __O  uint32_t DERR_W3_11;                        /**< Domain Error Word3 Register, offset: 0x4BC */
  __I  uint32_t DERR_W0_12;                        /**< Domain Error Word0 Register, offset: 0x4C0 */
  __I  uint32_t DERR_W1_12;                        /**< Domain Error Word1 Register, offset: 0x4C4 */
       uint8_t RESERVED_16[4];
  __O  uint32_t DERR_W3_12;                        /**< Domain Error Word3 Register, offset: 0x4CC */
       uint8_t RESERVED_17[48];
  __I  uint32_t DERR_W0_16;                        /**< Domain Error Word0 Register, offset: 0x500 */
  __I  uint32_t DERR_W1_16;                        /**< Domain Error Word1 Register, offset: 0x504 */
       uint8_t RESERVED_18[4];
  __O  uint32_t DERR_W3_16;                        /**< Domain Error Word3 Register, offset: 0x50C */
  __I  uint32_t DERR_W0_17;                        /**< Domain Error Word0 Register, offset: 0x510 */
  __I  uint32_t DERR_W1_17;                        /**< Domain Error Word1 Register, offset: 0x514 */
       uint8_t RESERVED_19[4];
  __O  uint32_t DERR_W3_17;                        /**< Domain Error Word3 Register, offset: 0x51C */
  __I  uint32_t DERR_W0_18;                        /**< Domain Error Word0 Register, offset: 0x520 */
  __I  uint32_t DERR_W1_18;                        /**< Domain Error Word1 Register, offset: 0x524 */
       uint8_t RESERVED_20[4];
  __O  uint32_t DERR_W3_18;                        /**< Domain Error Word3 Register, offset: 0x52C */
       uint8_t RESERVED_21[16];
  __I  uint32_t DERR_W0_20;                        /**< Domain Error Word0 Register, offset: 0x540 */
  __I  uint32_t DERR_W1_20;                        /**< Domain Error Word1 Register, offset: 0x544 */
       uint8_t RESERVED_22[4];
  __O  uint32_t DERR_W3_20;                        /**< Domain Error Word3 Register, offset: 0x54C */
  __I  uint32_t DERR_W0_21;                        /**< Domain Error Word0 Register, offset: 0x550 */
  __I  uint32_t DERR_W1_21;                        /**< Domain Error Word1 Register, offset: 0x554 */
       uint8_t RESERVED_23[4];
  __O  uint32_t DERR_W3_21;                        /**< Domain Error Word3 Register, offset: 0x55C */
  __I  uint32_t DERR_W0_22;                        /**< Domain Error Word0 Register, offset: 0x560 */
  __I  uint32_t DERR_W1_22;                        /**< Domain Error Word1 Register, offset: 0x564 */
       uint8_t RESERVED_24[4];
  __O  uint32_t DERR_W3_22;                        /**< Domain Error Word3 Register, offset: 0x56C */
       uint8_t RESERVED_25[400];
  __IO uint32_t PID0;                              /**< Process Identifier, offset: 0x700 */
       uint8_t RESERVED_26[252];
  __IO uint32_t MDA_W0_0_DFMT0;                    /**< Master Domain Assignment, offset: 0x800 */
  __IO uint32_t MDA_W1_0_DFMT0;                    /**< Master Domain Assignment, offset: 0x804 */
       uint8_t RESERVED_27[24];
  __IO uint32_t MDA_W0_1_DFMT1;                    /**< Master Domain Assignment, offset: 0x820 */
       uint8_t RESERVED_28[28];
  __IO uint32_t MDA_W0_2_DFMT1;                    /**< Master Domain Assignment, offset: 0x840 */
       uint8_t RESERVED_29[28];
  __IO uint32_t MDA_W0_3_DFMT1;                    /**< Master Domain Assignment, offset: 0x860 */
       uint8_t RESERVED_30[28];
  __IO uint32_t MDA_W0_4_DFMT1;                    /**< Master Domain Assignment, offset: 0x880 */
       uint8_t RESERVED_31[28];
  __IO uint32_t MDA_W0_5_DFMT1;                    /**< Master Domain Assignment, offset: 0x8A0 */
       uint8_t RESERVED_32[28];
  __IO uint32_t MDA_W0_6_DFMT1;                    /**< Master Domain Assignment, offset: 0x8C0 */
       uint8_t RESERVED_33[28];
  __IO uint32_t MDA_W0_7_DFMT1;                    /**< Master Domain Assignment, offset: 0x8E0 */
       uint8_t RESERVED_34[28];
  __IO uint32_t MDA_W0_8_DFMT1;                    /**< Master Domain Assignment, offset: 0x900 */
       uint8_t RESERVED_35[28];
  __IO uint32_t MDA_W0_9_DFMT1;                    /**< Master Domain Assignment, offset: 0x920 */
       uint8_t RESERVED_36[28];
  __IO uint32_t MDA_W0_10_DFMT1;                   /**< Master Domain Assignment, offset: 0x940 */
       uint8_t RESERVED_37[28];
  __IO uint32_t MDA_W0_11_DFMT1;                   /**< Master Domain Assignment, offset: 0x960 */
       uint8_t RESERVED_38[28];
  __IO uint32_t MDA_W0_12_DFMT1;                   /**< Master Domain Assignment, offset: 0x980 */
       uint8_t RESERVED_39[28];
  __IO uint32_t MDA_W0_13_DFMT1;                   /**< Master Domain Assignment, offset: 0x9A0 */
       uint8_t RESERVED_40[28];
  __IO uint32_t MDA_W0_14_DFMT1;                   /**< Master Domain Assignment, offset: 0x9C0 */
       uint8_t RESERVED_41[28];
  __IO uint32_t MDA_W0_15_DFMT1;                   /**< Master Domain Assignment, offset: 0x9E0 */
       uint8_t RESERVED_42[28];
  __IO uint32_t MDA_W0_16_DFMT1;                   /**< Master Domain Assignment, offset: 0xA00 */
       uint8_t RESERVED_43[1532];
  __IO uint32_t PDAC_W0_0_0;                       /**< Peripheral Domain Access Control, offset: 0x1000 */
  __IO uint32_t PDAC_W1_0_0;                       /**< Peripheral Domain Access Control, offset: 0x1004 */
  __IO uint32_t PDAC_W0_0_1;                       /**< Peripheral Domain Access Control, offset: 0x1008 */
  __IO uint32_t PDAC_W1_0_1;                       /**< Peripheral Domain Access Control, offset: 0x100C */
  __IO uint32_t PDAC_W0_0_2;                       /**< Peripheral Domain Access Control, offset: 0x1010 */
  __IO uint32_t PDAC_W1_0_2;                       /**< Peripheral Domain Access Control, offset: 0x1014 */
  __IO uint32_t PDAC_W0_0_3;                       /**< Peripheral Domain Access Control, offset: 0x1018 */
  __IO uint32_t PDAC_W1_0_3;                       /**< Peripheral Domain Access Control, offset: 0x101C */
  __IO uint32_t PDAC_W0_0_4;                       /**< Peripheral Domain Access Control, offset: 0x1020 */
  __IO uint32_t PDAC_W1_0_4;                       /**< Peripheral Domain Access Control, offset: 0x1024 */
  __IO uint32_t PDAC_W0_0_5;                       /**< Peripheral Domain Access Control, offset: 0x1028 */
  __IO uint32_t PDAC_W1_0_5;                       /**< Peripheral Domain Access Control, offset: 0x102C */
  __IO uint32_t PDAC_W0_0_6;                       /**< Peripheral Domain Access Control, offset: 0x1030 */
  __IO uint32_t PDAC_W1_0_6;                       /**< Peripheral Domain Access Control, offset: 0x1034 */
  __IO uint32_t PDAC_W0_0_7;                       /**< Peripheral Domain Access Control, offset: 0x1038 */
  __IO uint32_t PDAC_W1_0_7;                       /**< Peripheral Domain Access Control, offset: 0x103C */
  __IO uint32_t PDAC_W0_0_8;                       /**< Peripheral Domain Access Control, offset: 0x1040 */
  __IO uint32_t PDAC_W1_0_8;                       /**< Peripheral Domain Access Control, offset: 0x1044 */
  __IO uint32_t PDAC_W0_0_9;                       /**< Peripheral Domain Access Control, offset: 0x1048 */
  __IO uint32_t PDAC_W1_0_9;                       /**< Peripheral Domain Access Control, offset: 0x104C */
  __IO uint32_t PDAC_W0_0_10;                      /**< Peripheral Domain Access Control, offset: 0x1050 */
  __IO uint32_t PDAC_W1_0_10;                      /**< Peripheral Domain Access Control, offset: 0x1054 */
  __IO uint32_t PDAC_W0_0_11;                      /**< Peripheral Domain Access Control, offset: 0x1058 */
  __IO uint32_t PDAC_W1_0_11;                      /**< Peripheral Domain Access Control, offset: 0x105C */
  __IO uint32_t PDAC_W0_0_12;                      /**< Peripheral Domain Access Control, offset: 0x1060 */
  __IO uint32_t PDAC_W1_0_12;                      /**< Peripheral Domain Access Control, offset: 0x1064 */
  __IO uint32_t PDAC_W0_0_13;                      /**< Peripheral Domain Access Control, offset: 0x1068 */
  __IO uint32_t PDAC_W1_0_13;                      /**< Peripheral Domain Access Control, offset: 0x106C */
  __IO uint32_t PDAC_W0_0_14;                      /**< Peripheral Domain Access Control, offset: 0x1070 */
  __IO uint32_t PDAC_W1_0_14;                      /**< Peripheral Domain Access Control, offset: 0x1074 */
  __IO uint32_t PDAC_W0_0_15;                      /**< Peripheral Domain Access Control, offset: 0x1078 */
  __IO uint32_t PDAC_W1_0_15;                      /**< Peripheral Domain Access Control, offset: 0x107C */
  __IO uint32_t PDAC_W0_0_16;                      /**< Peripheral Domain Access Control, offset: 0x1080 */
  __IO uint32_t PDAC_W1_0_16;                      /**< Peripheral Domain Access Control, offset: 0x1084 */
  __IO uint32_t PDAC_W0_0_17;                      /**< Peripheral Domain Access Control, offset: 0x1088 */
  __IO uint32_t PDAC_W1_0_17;                      /**< Peripheral Domain Access Control, offset: 0x108C */
  __IO uint32_t PDAC_W0_0_18;                      /**< Peripheral Domain Access Control, offset: 0x1090 */
  __IO uint32_t PDAC_W1_0_18;                      /**< Peripheral Domain Access Control, offset: 0x1094 */
  __IO uint32_t PDAC_W0_0_19;                      /**< Peripheral Domain Access Control, offset: 0x1098 */
  __IO uint32_t PDAC_W1_0_19;                      /**< Peripheral Domain Access Control, offset: 0x109C */
  __IO uint32_t PDAC_W0_0_20;                      /**< Peripheral Domain Access Control, offset: 0x10A0 */
  __IO uint32_t PDAC_W1_0_20;                      /**< Peripheral Domain Access Control, offset: 0x10A4 */
  __IO uint32_t PDAC_W0_0_21;                      /**< Peripheral Domain Access Control, offset: 0x10A8 */
  __IO uint32_t PDAC_W1_0_21;                      /**< Peripheral Domain Access Control, offset: 0x10AC */
  __IO uint32_t PDAC_W0_0_22;                      /**< Peripheral Domain Access Control, offset: 0x10B0 */
  __IO uint32_t PDAC_W1_0_22;                      /**< Peripheral Domain Access Control, offset: 0x10B4 */
  __IO uint32_t PDAC_W0_0_23;                      /**< Peripheral Domain Access Control, offset: 0x10B8 */
  __IO uint32_t PDAC_W1_0_23;                      /**< Peripheral Domain Access Control, offset: 0x10BC */
  __IO uint32_t PDAC_W0_0_24;                      /**< Peripheral Domain Access Control, offset: 0x10C0 */
  __IO uint32_t PDAC_W1_0_24;                      /**< Peripheral Domain Access Control, offset: 0x10C4 */
  __IO uint32_t PDAC_W0_0_25;                      /**< Peripheral Domain Access Control, offset: 0x10C8 */
  __IO uint32_t PDAC_W1_0_25;                      /**< Peripheral Domain Access Control, offset: 0x10CC */
  __IO uint32_t PDAC_W0_0_26;                      /**< Peripheral Domain Access Control, offset: 0x10D0 */
  __IO uint32_t PDAC_W1_0_26;                      /**< Peripheral Domain Access Control, offset: 0x10D4 */
  __IO uint32_t PDAC_W0_0_27;                      /**< Peripheral Domain Access Control, offset: 0x10D8 */
  __IO uint32_t PDAC_W1_0_27;                      /**< Peripheral Domain Access Control, offset: 0x10DC */
  __IO uint32_t PDAC_W0_0_28;                      /**< Peripheral Domain Access Control, offset: 0x10E0 */
  __IO uint32_t PDAC_W1_0_28;                      /**< Peripheral Domain Access Control, offset: 0x10E4 */
  __IO uint32_t PDAC_W0_0_29;                      /**< Peripheral Domain Access Control, offset: 0x10E8 */
  __IO uint32_t PDAC_W1_0_29;                      /**< Peripheral Domain Access Control, offset: 0x10EC */
  __IO uint32_t PDAC_W0_0_30;                      /**< Peripheral Domain Access Control, offset: 0x10F0 */
  __IO uint32_t PDAC_W1_0_30;                      /**< Peripheral Domain Access Control, offset: 0x10F4 */
  __IO uint32_t PDAC_W0_0_31;                      /**< Peripheral Domain Access Control, offset: 0x10F8 */
  __IO uint32_t PDAC_W1_0_31;                      /**< Peripheral Domain Access Control, offset: 0x10FC */
  __IO uint32_t PDAC_W0_0_32;                      /**< Peripheral Domain Access Control, offset: 0x1100 */
  __IO uint32_t PDAC_W1_0_32;                      /**< Peripheral Domain Access Control, offset: 0x1104 */
  __IO uint32_t PDAC_W0_0_33;                      /**< Peripheral Domain Access Control, offset: 0x1108 */
  __IO uint32_t PDAC_W1_0_33;                      /**< Peripheral Domain Access Control, offset: 0x110C */
  __IO uint32_t PDAC_W0_0_34;                      /**< Peripheral Domain Access Control, offset: 0x1110 */
  __IO uint32_t PDAC_W1_0_34;                      /**< Peripheral Domain Access Control, offset: 0x1114 */
  __IO uint32_t PDAC_W0_0_35;                      /**< Peripheral Domain Access Control, offset: 0x1118 */
  __IO uint32_t PDAC_W1_0_35;                      /**< Peripheral Domain Access Control, offset: 0x111C */
  __IO uint32_t PDAC_W0_0_36;                      /**< Peripheral Domain Access Control, offset: 0x1120 */
  __IO uint32_t PDAC_W1_0_36;                      /**< Peripheral Domain Access Control, offset: 0x1124 */
  __IO uint32_t PDAC_W0_0_37;                      /**< Peripheral Domain Access Control, offset: 0x1128 */
  __IO uint32_t PDAC_W1_0_37;                      /**< Peripheral Domain Access Control, offset: 0x112C */
  __IO uint32_t PDAC_W0_0_38;                      /**< Peripheral Domain Access Control, offset: 0x1130 */
  __IO uint32_t PDAC_W1_0_38;                      /**< Peripheral Domain Access Control, offset: 0x1134 */
  __IO uint32_t PDAC_W0_0_39;                      /**< Peripheral Domain Access Control, offset: 0x1138 */
  __IO uint32_t PDAC_W1_0_39;                      /**< Peripheral Domain Access Control, offset: 0x113C */
  __IO uint32_t PDAC_W0_0_40;                      /**< Peripheral Domain Access Control, offset: 0x1140 */
  __IO uint32_t PDAC_W1_0_40;                      /**< Peripheral Domain Access Control, offset: 0x1144 */
  __IO uint32_t PDAC_W0_0_41;                      /**< Peripheral Domain Access Control, offset: 0x1148 */
  __IO uint32_t PDAC_W1_0_41;                      /**< Peripheral Domain Access Control, offset: 0x114C */
  __IO uint32_t PDAC_W0_0_42;                      /**< Peripheral Domain Access Control, offset: 0x1150 */
  __IO uint32_t PDAC_W1_0_42;                      /**< Peripheral Domain Access Control, offset: 0x1154 */
  __IO uint32_t PDAC_W0_0_43;                      /**< Peripheral Domain Access Control, offset: 0x1158 */
  __IO uint32_t PDAC_W1_0_43;                      /**< Peripheral Domain Access Control, offset: 0x115C */
  __IO uint32_t PDAC_W0_0_44;                      /**< Peripheral Domain Access Control, offset: 0x1160 */
  __IO uint32_t PDAC_W1_0_44;                      /**< Peripheral Domain Access Control, offset: 0x1164 */
  __IO uint32_t PDAC_W0_0_45;                      /**< Peripheral Domain Access Control, offset: 0x1168 */
  __IO uint32_t PDAC_W1_0_45;                      /**< Peripheral Domain Access Control, offset: 0x116C */
  __IO uint32_t PDAC_W0_0_46;                      /**< Peripheral Domain Access Control, offset: 0x1170 */
  __IO uint32_t PDAC_W1_0_46;                      /**< Peripheral Domain Access Control, offset: 0x1174 */
  __IO uint32_t PDAC_W0_0_47;                      /**< Peripheral Domain Access Control, offset: 0x1178 */
  __IO uint32_t PDAC_W1_0_47;                      /**< Peripheral Domain Access Control, offset: 0x117C */
  __IO uint32_t PDAC_W0_0_48;                      /**< Peripheral Domain Access Control, offset: 0x1180 */
  __IO uint32_t PDAC_W1_0_48;                      /**< Peripheral Domain Access Control, offset: 0x1184 */
  __IO uint32_t PDAC_W0_0_49;                      /**< Peripheral Domain Access Control, offset: 0x1188 */
  __IO uint32_t PDAC_W1_0_49;                      /**< Peripheral Domain Access Control, offset: 0x118C */
  __IO uint32_t PDAC_W0_0_50;                      /**< Peripheral Domain Access Control, offset: 0x1190 */
  __IO uint32_t PDAC_W1_0_50;                      /**< Peripheral Domain Access Control, offset: 0x1194 */
  __IO uint32_t PDAC_W0_0_51;                      /**< Peripheral Domain Access Control, offset: 0x1198 */
  __IO uint32_t PDAC_W1_0_51;                      /**< Peripheral Domain Access Control, offset: 0x119C */
  __IO uint32_t PDAC_W0_0_52;                      /**< Peripheral Domain Access Control, offset: 0x11A0 */
  __IO uint32_t PDAC_W1_0_52;                      /**< Peripheral Domain Access Control, offset: 0x11A4 */
  __IO uint32_t PDAC_W0_0_53;                      /**< Peripheral Domain Access Control, offset: 0x11A8 */
  __IO uint32_t PDAC_W1_0_53;                      /**< Peripheral Domain Access Control, offset: 0x11AC */
  __IO uint32_t PDAC_W0_0_54;                      /**< Peripheral Domain Access Control, offset: 0x11B0 */
  __IO uint32_t PDAC_W1_0_54;                      /**< Peripheral Domain Access Control, offset: 0x11B4 */
  __IO uint32_t PDAC_W0_0_55;                      /**< Peripheral Domain Access Control, offset: 0x11B8 */
  __IO uint32_t PDAC_W1_0_55;                      /**< Peripheral Domain Access Control, offset: 0x11BC */
  __IO uint32_t PDAC_W0_0_56;                      /**< Peripheral Domain Access Control, offset: 0x11C0 */
  __IO uint32_t PDAC_W1_0_56;                      /**< Peripheral Domain Access Control, offset: 0x11C4 */
  __IO uint32_t PDAC_W0_0_57;                      /**< Peripheral Domain Access Control, offset: 0x11C8 */
  __IO uint32_t PDAC_W1_0_57;                      /**< Peripheral Domain Access Control, offset: 0x11CC */
  __IO uint32_t PDAC_W0_0_58;                      /**< Peripheral Domain Access Control, offset: 0x11D0 */
  __IO uint32_t PDAC_W1_0_58;                      /**< Peripheral Domain Access Control, offset: 0x11D4 */
  __IO uint32_t PDAC_W0_0_59;                      /**< Peripheral Domain Access Control, offset: 0x11D8 */
  __IO uint32_t PDAC_W1_0_59;                      /**< Peripheral Domain Access Control, offset: 0x11DC */
  __IO uint32_t PDAC_W0_0_60;                      /**< Peripheral Domain Access Control, offset: 0x11E0 */
  __IO uint32_t PDAC_W1_0_60;                      /**< Peripheral Domain Access Control, offset: 0x11E4 */
       uint8_t RESERVED_44[536];
  __IO uint32_t PDAC_W0_1_0;                       /**< Peripheral Domain Access Control, offset: 0x1400 */
  __IO uint32_t PDAC_W1_1_0;                       /**< Peripheral Domain Access Control, offset: 0x1404 */
  __IO uint32_t PDAC_W0_1_1;                       /**< Peripheral Domain Access Control, offset: 0x1408 */
  __IO uint32_t PDAC_W1_1_1;                       /**< Peripheral Domain Access Control, offset: 0x140C */
  __IO uint32_t PDAC_W0_1_2;                       /**< Peripheral Domain Access Control, offset: 0x1410 */
  __IO uint32_t PDAC_W1_1_2;                       /**< Peripheral Domain Access Control, offset: 0x1414 */
  __IO uint32_t PDAC_W0_1_3;                       /**< Peripheral Domain Access Control, offset: 0x1418 */
  __IO uint32_t PDAC_W1_1_3;                       /**< Peripheral Domain Access Control, offset: 0x141C */
  __IO uint32_t PDAC_W0_1_4;                       /**< Peripheral Domain Access Control, offset: 0x1420 */
  __IO uint32_t PDAC_W1_1_4;                       /**< Peripheral Domain Access Control, offset: 0x1424 */
  __IO uint32_t PDAC_W0_1_5;                       /**< Peripheral Domain Access Control, offset: 0x1428 */
  __IO uint32_t PDAC_W1_1_5;                       /**< Peripheral Domain Access Control, offset: 0x142C */
  __IO uint32_t PDAC_W0_1_6;                       /**< Peripheral Domain Access Control, offset: 0x1430 */
  __IO uint32_t PDAC_W1_1_6;                       /**< Peripheral Domain Access Control, offset: 0x1434 */
  __IO uint32_t PDAC_W0_1_7;                       /**< Peripheral Domain Access Control, offset: 0x1438 */
  __IO uint32_t PDAC_W1_1_7;                       /**< Peripheral Domain Access Control, offset: 0x143C */
  __IO uint32_t PDAC_W0_1_8;                       /**< Peripheral Domain Access Control, offset: 0x1440 */
  __IO uint32_t PDAC_W1_1_8;                       /**< Peripheral Domain Access Control, offset: 0x1444 */
  __IO uint32_t PDAC_W0_1_9;                       /**< Peripheral Domain Access Control, offset: 0x1448 */
  __IO uint32_t PDAC_W1_1_9;                       /**< Peripheral Domain Access Control, offset: 0x144C */
  __IO uint32_t PDAC_W0_1_10;                      /**< Peripheral Domain Access Control, offset: 0x1450 */
  __IO uint32_t PDAC_W1_1_10;                      /**< Peripheral Domain Access Control, offset: 0x1454 */
  __IO uint32_t PDAC_W0_1_11;                      /**< Peripheral Domain Access Control, offset: 0x1458 */
  __IO uint32_t PDAC_W1_1_11;                      /**< Peripheral Domain Access Control, offset: 0x145C */
  __IO uint32_t PDAC_W0_1_12;                      /**< Peripheral Domain Access Control, offset: 0x1460 */
  __IO uint32_t PDAC_W1_1_12;                      /**< Peripheral Domain Access Control, offset: 0x1464 */
  __IO uint32_t PDAC_W0_1_13;                      /**< Peripheral Domain Access Control, offset: 0x1468 */
  __IO uint32_t PDAC_W1_1_13;                      /**< Peripheral Domain Access Control, offset: 0x146C */
  __IO uint32_t PDAC_W0_1_14;                      /**< Peripheral Domain Access Control, offset: 0x1470 */
  __IO uint32_t PDAC_W1_1_14;                      /**< Peripheral Domain Access Control, offset: 0x1474 */
  __IO uint32_t PDAC_W0_1_15;                      /**< Peripheral Domain Access Control, offset: 0x1478 */
  __IO uint32_t PDAC_W1_1_15;                      /**< Peripheral Domain Access Control, offset: 0x147C */
  __IO uint32_t PDAC_W0_1_16;                      /**< Peripheral Domain Access Control, offset: 0x1480 */
  __IO uint32_t PDAC_W1_1_16;                      /**< Peripheral Domain Access Control, offset: 0x1484 */
  __IO uint32_t PDAC_W0_1_17;                      /**< Peripheral Domain Access Control, offset: 0x1488 */
  __IO uint32_t PDAC_W1_1_17;                      /**< Peripheral Domain Access Control, offset: 0x148C */
  __IO uint32_t PDAC_W0_1_18;                      /**< Peripheral Domain Access Control, offset: 0x1490 */
  __IO uint32_t PDAC_W1_1_18;                      /**< Peripheral Domain Access Control, offset: 0x1494 */
  __IO uint32_t PDAC_W0_1_19;                      /**< Peripheral Domain Access Control, offset: 0x1498 */
  __IO uint32_t PDAC_W1_1_19;                      /**< Peripheral Domain Access Control, offset: 0x149C */
  __IO uint32_t PDAC_W0_1_20;                      /**< Peripheral Domain Access Control, offset: 0x14A0 */
  __IO uint32_t PDAC_W1_1_20;                      /**< Peripheral Domain Access Control, offset: 0x14A4 */
  __IO uint32_t PDAC_W0_1_21;                      /**< Peripheral Domain Access Control, offset: 0x14A8 */
  __IO uint32_t PDAC_W1_1_21;                      /**< Peripheral Domain Access Control, offset: 0x14AC */
  __IO uint32_t PDAC_W0_1_22;                      /**< Peripheral Domain Access Control, offset: 0x14B0 */
  __IO uint32_t PDAC_W1_1_22;                      /**< Peripheral Domain Access Control, offset: 0x14B4 */
       uint8_t RESERVED_45[840];
  __IO uint32_t PDAC_W0_2_0;                       /**< Peripheral Domain Access Control, offset: 0x1800 */
  __IO uint32_t PDAC_W1_2_0;                       /**< Peripheral Domain Access Control, offset: 0x1804 */
  __IO uint32_t PDAC_W0_2_1;                       /**< Peripheral Domain Access Control, offset: 0x1808 */
  __IO uint32_t PDAC_W1_2_1;                       /**< Peripheral Domain Access Control, offset: 0x180C */
  __IO uint32_t PDAC_W0_2_2;                       /**< Peripheral Domain Access Control, offset: 0x1810 */
  __IO uint32_t PDAC_W1_2_2;                       /**< Peripheral Domain Access Control, offset: 0x1814 */
  __IO uint32_t PDAC_W0_2_3;                       /**< Peripheral Domain Access Control, offset: 0x1818 */
  __IO uint32_t PDAC_W1_2_3;                       /**< Peripheral Domain Access Control, offset: 0x181C */
  __IO uint32_t PDAC_W0_2_4;                       /**< Peripheral Domain Access Control, offset: 0x1820 */
  __IO uint32_t PDAC_W1_2_4;                       /**< Peripheral Domain Access Control, offset: 0x1824 */
  __IO uint32_t PDAC_W0_2_5;                       /**< Peripheral Domain Access Control, offset: 0x1828 */
  __IO uint32_t PDAC_W1_2_5;                       /**< Peripheral Domain Access Control, offset: 0x182C */
  __IO uint32_t PDAC_W0_2_6;                       /**< Peripheral Domain Access Control, offset: 0x1830 */
  __IO uint32_t PDAC_W1_2_6;                       /**< Peripheral Domain Access Control, offset: 0x1834 */
  __IO uint32_t PDAC_W0_2_7;                       /**< Peripheral Domain Access Control, offset: 0x1838 */
  __IO uint32_t PDAC_W1_2_7;                       /**< Peripheral Domain Access Control, offset: 0x183C */
  __IO uint32_t PDAC_W0_2_8;                       /**< Peripheral Domain Access Control, offset: 0x1840 */
  __IO uint32_t PDAC_W1_2_8;                       /**< Peripheral Domain Access Control, offset: 0x1844 */
  __IO uint32_t PDAC_W0_2_9;                       /**< Peripheral Domain Access Control, offset: 0x1848 */
  __IO uint32_t PDAC_W1_2_9;                       /**< Peripheral Domain Access Control, offset: 0x184C */
  __IO uint32_t PDAC_W0_2_10;                      /**< Peripheral Domain Access Control, offset: 0x1850 */
  __IO uint32_t PDAC_W1_2_10;                      /**< Peripheral Domain Access Control, offset: 0x1854 */
  __IO uint32_t PDAC_W0_2_11;                      /**< Peripheral Domain Access Control, offset: 0x1858 */
  __IO uint32_t PDAC_W1_2_11;                      /**< Peripheral Domain Access Control, offset: 0x185C */
  __IO uint32_t PDAC_W0_2_12;                      /**< Peripheral Domain Access Control, offset: 0x1860 */
  __IO uint32_t PDAC_W1_2_12;                      /**< Peripheral Domain Access Control, offset: 0x1864 */
  __IO uint32_t PDAC_W0_2_13;                      /**< Peripheral Domain Access Control, offset: 0x1868 */
  __IO uint32_t PDAC_W1_2_13;                      /**< Peripheral Domain Access Control, offset: 0x186C */
  __IO uint32_t PDAC_W0_2_14;                      /**< Peripheral Domain Access Control, offset: 0x1870 */
  __IO uint32_t PDAC_W1_2_14;                      /**< Peripheral Domain Access Control, offset: 0x1874 */
  __IO uint32_t PDAC_W0_2_15;                      /**< Peripheral Domain Access Control, offset: 0x1878 */
  __IO uint32_t PDAC_W1_2_15;                      /**< Peripheral Domain Access Control, offset: 0x187C */
  __IO uint32_t PDAC_W0_2_16;                      /**< Peripheral Domain Access Control, offset: 0x1880 */
  __IO uint32_t PDAC_W1_2_16;                      /**< Peripheral Domain Access Control, offset: 0x1884 */
  __IO uint32_t PDAC_W0_2_17;                      /**< Peripheral Domain Access Control, offset: 0x1888 */
  __IO uint32_t PDAC_W1_2_17;                      /**< Peripheral Domain Access Control, offset: 0x188C */
  __IO uint32_t PDAC_W0_2_18;                      /**< Peripheral Domain Access Control, offset: 0x1890 */
  __IO uint32_t PDAC_W1_2_18;                      /**< Peripheral Domain Access Control, offset: 0x1894 */
  __IO uint32_t PDAC_W0_2_19;                      /**< Peripheral Domain Access Control, offset: 0x1898 */
  __IO uint32_t PDAC_W1_2_19;                      /**< Peripheral Domain Access Control, offset: 0x189C */
  __IO uint32_t PDAC_W0_2_20;                      /**< Peripheral Domain Access Control, offset: 0x18A0 */
  __IO uint32_t PDAC_W1_2_20;                      /**< Peripheral Domain Access Control, offset: 0x18A4 */
  __IO uint32_t PDAC_W0_2_21;                      /**< Peripheral Domain Access Control, offset: 0x18A8 */
  __IO uint32_t PDAC_W1_2_21;                      /**< Peripheral Domain Access Control, offset: 0x18AC */
  __IO uint32_t PDAC_W0_2_22;                      /**< Peripheral Domain Access Control, offset: 0x18B0 */
  __IO uint32_t PDAC_W1_2_22;                      /**< Peripheral Domain Access Control, offset: 0x18B4 */
  __IO uint32_t PDAC_W0_2_23;                      /**< Peripheral Domain Access Control, offset: 0x18B8 */
  __IO uint32_t PDAC_W1_2_23;                      /**< Peripheral Domain Access Control, offset: 0x18BC */
  __IO uint32_t PDAC_W0_2_24;                      /**< Peripheral Domain Access Control, offset: 0x18C0 */
  __IO uint32_t PDAC_W1_2_24;                      /**< Peripheral Domain Access Control, offset: 0x18C4 */
  __IO uint32_t PDAC_W0_2_25;                      /**< Peripheral Domain Access Control, offset: 0x18C8 */
  __IO uint32_t PDAC_W1_2_25;                      /**< Peripheral Domain Access Control, offset: 0x18CC */
  __IO uint32_t PDAC_W0_2_26;                      /**< Peripheral Domain Access Control, offset: 0x18D0 */
  __IO uint32_t PDAC_W1_2_26;                      /**< Peripheral Domain Access Control, offset: 0x18D4 */
  __IO uint32_t PDAC_W0_2_27;                      /**< Peripheral Domain Access Control, offset: 0x18D8 */
  __IO uint32_t PDAC_W1_2_27;                      /**< Peripheral Domain Access Control, offset: 0x18DC */
  __IO uint32_t PDAC_W0_2_28;                      /**< Peripheral Domain Access Control, offset: 0x18E0 */
  __IO uint32_t PDAC_W1_2_28;                      /**< Peripheral Domain Access Control, offset: 0x18E4 */
  __IO uint32_t PDAC_W0_2_29;                      /**< Peripheral Domain Access Control, offset: 0x18E8 */
  __IO uint32_t PDAC_W1_2_29;                      /**< Peripheral Domain Access Control, offset: 0x18EC */
  __IO uint32_t PDAC_W0_2_30;                      /**< Peripheral Domain Access Control, offset: 0x18F0 */
  __IO uint32_t PDAC_W1_2_30;                      /**< Peripheral Domain Access Control, offset: 0x18F4 */
  __IO uint32_t PDAC_W0_2_31;                      /**< Peripheral Domain Access Control, offset: 0x18F8 */
  __IO uint32_t PDAC_W1_2_31;                      /**< Peripheral Domain Access Control, offset: 0x18FC */
  __IO uint32_t PDAC_W0_2_32;                      /**< Peripheral Domain Access Control, offset: 0x1900 */
  __IO uint32_t PDAC_W1_2_32;                      /**< Peripheral Domain Access Control, offset: 0x1904 */
  __IO uint32_t PDAC_W0_2_33;                      /**< Peripheral Domain Access Control, offset: 0x1908 */
  __IO uint32_t PDAC_W1_2_33;                      /**< Peripheral Domain Access Control, offset: 0x190C */
  __IO uint32_t PDAC_W0_2_34;                      /**< Peripheral Domain Access Control, offset: 0x1910 */
  __IO uint32_t PDAC_W1_2_34;                      /**< Peripheral Domain Access Control, offset: 0x1914 */
  __IO uint32_t PDAC_W0_2_35;                      /**< Peripheral Domain Access Control, offset: 0x1918 */
  __IO uint32_t PDAC_W1_2_35;                      /**< Peripheral Domain Access Control, offset: 0x191C */
  __IO uint32_t PDAC_W0_2_36;                      /**< Peripheral Domain Access Control, offset: 0x1920 */
  __IO uint32_t PDAC_W1_2_36;                      /**< Peripheral Domain Access Control, offset: 0x1924 */
  __IO uint32_t PDAC_W0_2_37;                      /**< Peripheral Domain Access Control, offset: 0x1928 */
  __IO uint32_t PDAC_W1_2_37;                      /**< Peripheral Domain Access Control, offset: 0x192C */
  __IO uint32_t PDAC_W0_2_38;                      /**< Peripheral Domain Access Control, offset: 0x1930 */
  __IO uint32_t PDAC_W1_2_38;                      /**< Peripheral Domain Access Control, offset: 0x1934 */
  __IO uint32_t PDAC_W0_2_39;                      /**< Peripheral Domain Access Control, offset: 0x1938 */
  __IO uint32_t PDAC_W1_2_39;                      /**< Peripheral Domain Access Control, offset: 0x193C */
  __IO uint32_t PDAC_W0_2_40;                      /**< Peripheral Domain Access Control, offset: 0x1940 */
  __IO uint32_t PDAC_W1_2_40;                      /**< Peripheral Domain Access Control, offset: 0x1944 */
  __IO uint32_t PDAC_W0_2_41;                      /**< Peripheral Domain Access Control, offset: 0x1948 */
  __IO uint32_t PDAC_W1_2_41;                      /**< Peripheral Domain Access Control, offset: 0x194C */
  __IO uint32_t PDAC_W0_2_42;                      /**< Peripheral Domain Access Control, offset: 0x1950 */
  __IO uint32_t PDAC_W1_2_42;                      /**< Peripheral Domain Access Control, offset: 0x1954 */
  __IO uint32_t PDAC_W0_2_43;                      /**< Peripheral Domain Access Control, offset: 0x1958 */
  __IO uint32_t PDAC_W1_2_43;                      /**< Peripheral Domain Access Control, offset: 0x195C */
  __IO uint32_t PDAC_W0_2_44;                      /**< Peripheral Domain Access Control, offset: 0x1960 */
  __IO uint32_t PDAC_W1_2_44;                      /**< Peripheral Domain Access Control, offset: 0x1964 */
  __IO uint32_t PDAC_W0_2_45;                      /**< Peripheral Domain Access Control, offset: 0x1968 */
  __IO uint32_t PDAC_W1_2_45;                      /**< Peripheral Domain Access Control, offset: 0x196C */
  __IO uint32_t PDAC_W0_2_46;                      /**< Peripheral Domain Access Control, offset: 0x1970 */
  __IO uint32_t PDAC_W1_2_46;                      /**< Peripheral Domain Access Control, offset: 0x1974 */
  __IO uint32_t PDAC_W0_2_47;                      /**< Peripheral Domain Access Control, offset: 0x1978 */
  __IO uint32_t PDAC_W1_2_47;                      /**< Peripheral Domain Access Control, offset: 0x197C */
  __IO uint32_t PDAC_W0_2_48;                      /**< Peripheral Domain Access Control, offset: 0x1980 */
  __IO uint32_t PDAC_W1_2_48;                      /**< Peripheral Domain Access Control, offset: 0x1984 */
       uint8_t RESERVED_46[8];
  __IO uint32_t PDAC_W0_2_50;                      /**< Peripheral Domain Access Control, offset: 0x1990 */
  __IO uint32_t PDAC_W1_2_50;                      /**< Peripheral Domain Access Control, offset: 0x1994 */
  __IO uint32_t PDAC_W0_2_51;                      /**< Peripheral Domain Access Control, offset: 0x1998 */
  __IO uint32_t PDAC_W1_2_51;                      /**< Peripheral Domain Access Control, offset: 0x199C */
  __IO uint32_t PDAC_W0_2_52;                      /**< Peripheral Domain Access Control, offset: 0x19A0 */
  __IO uint32_t PDAC_W1_2_52;                      /**< Peripheral Domain Access Control, offset: 0x19A4 */
       uint8_t RESERVED_47[1624];
  __IO uint32_t MRGD_W0_0_0;                       /**< Memory Region Descriptor, offset: 0x2000 */
  __IO uint32_t MRGD_W1_0_0;                       /**< Memory Region Descriptor, offset: 0x2004 */
  __IO uint32_t MRGD_W2_0_0;                       /**< Memory Region Descriptor, offset: 0x2008 */
  __IO uint32_t MRGD_W3_0_0;                       /**< Memory Region Descriptor, offset: 0x200C */
  __IO uint32_t MRGD_W4_0_0;                       /**< Memory Region Descriptor, offset: 0x2010 */
       uint8_t RESERVED_48[12];
  __IO uint32_t MRGD_W0_0_1;                       /**< Memory Region Descriptor, offset: 0x2020 */
  __IO uint32_t MRGD_W1_0_1;                       /**< Memory Region Descriptor, offset: 0x2024 */
  __IO uint32_t MRGD_W2_0_1;                       /**< Memory Region Descriptor, offset: 0x2028 */
  __IO uint32_t MRGD_W3_0_1;                       /**< Memory Region Descriptor, offset: 0x202C */
  __IO uint32_t MRGD_W4_0_1;                       /**< Memory Region Descriptor, offset: 0x2030 */
       uint8_t RESERVED_49[12];
  __IO uint32_t MRGD_W0_0_2;                       /**< Memory Region Descriptor, offset: 0x2040 */
  __IO uint32_t MRGD_W1_0_2;                       /**< Memory Region Descriptor, offset: 0x2044 */
  __IO uint32_t MRGD_W2_0_2;                       /**< Memory Region Descriptor, offset: 0x2048 */
  __IO uint32_t MRGD_W3_0_2;                       /**< Memory Region Descriptor, offset: 0x204C */
  __IO uint32_t MRGD_W4_0_2;                       /**< Memory Region Descriptor, offset: 0x2050 */
       uint8_t RESERVED_50[12];
  __IO uint32_t MRGD_W0_0_3;                       /**< Memory Region Descriptor, offset: 0x2060 */
  __IO uint32_t MRGD_W1_0_3;                       /**< Memory Region Descriptor, offset: 0x2064 */
  __IO uint32_t MRGD_W2_0_3;                       /**< Memory Region Descriptor, offset: 0x2068 */
  __IO uint32_t MRGD_W3_0_3;                       /**< Memory Region Descriptor, offset: 0x206C */
  __IO uint32_t MRGD_W4_0_3;                       /**< Memory Region Descriptor, offset: 0x2070 */
       uint8_t RESERVED_51[396];
  __IO uint32_t MRGD_W0_1_0;                       /**< Memory Region Descriptor, offset: 0x2200 */
  __IO uint32_t MRGD_W1_1_0;                       /**< Memory Region Descriptor, offset: 0x2204 */
  __IO uint32_t MRGD_W2_1_0;                       /**< Memory Region Descriptor, offset: 0x2208 */
  __IO uint32_t MRGD_W3_1_0;                       /**< Memory Region Descriptor, offset: 0x220C */
  __IO uint32_t MRGD_W4_1_0;                       /**< Memory Region Descriptor, offset: 0x2210 */
       uint8_t RESERVED_52[12];
  __IO uint32_t MRGD_W0_1_1;                       /**< Memory Region Descriptor, offset: 0x2220 */
  __IO uint32_t MRGD_W1_1_1;                       /**< Memory Region Descriptor, offset: 0x2224 */
  __IO uint32_t MRGD_W2_1_1;                       /**< Memory Region Descriptor, offset: 0x2228 */
  __IO uint32_t MRGD_W3_1_1;                       /**< Memory Region Descriptor, offset: 0x222C */
  __IO uint32_t MRGD_W4_1_1;                       /**< Memory Region Descriptor, offset: 0x2230 */
       uint8_t RESERVED_53[12];
  __IO uint32_t MRGD_W0_1_2;                       /**< Memory Region Descriptor, offset: 0x2240 */
  __IO uint32_t MRGD_W1_1_2;                       /**< Memory Region Descriptor, offset: 0x2244 */
  __IO uint32_t MRGD_W2_1_2;                       /**< Memory Region Descriptor, offset: 0x2248 */
  __IO uint32_t MRGD_W3_1_2;                       /**< Memory Region Descriptor, offset: 0x224C */
  __IO uint32_t MRGD_W4_1_2;                       /**< Memory Region Descriptor, offset: 0x2250 */
       uint8_t RESERVED_54[12];
  __IO uint32_t MRGD_W0_1_3;                       /**< Memory Region Descriptor, offset: 0x2260 */
  __IO uint32_t MRGD_W1_1_3;                       /**< Memory Region Descriptor, offset: 0x2264 */
  __IO uint32_t MRGD_W2_1_3;                       /**< Memory Region Descriptor, offset: 0x2268 */
  __IO uint32_t MRGD_W3_1_3;                       /**< Memory Region Descriptor, offset: 0x226C */
  __IO uint32_t MRGD_W4_1_3;                       /**< Memory Region Descriptor, offset: 0x2270 */
       uint8_t RESERVED_55[12];
  __IO uint32_t MRGD_W0_1_4;                       /**< Memory Region Descriptor, offset: 0x2280 */
  __IO uint32_t MRGD_W1_1_4;                       /**< Memory Region Descriptor, offset: 0x2284 */
  __IO uint32_t MRGD_W2_1_4;                       /**< Memory Region Descriptor, offset: 0x2288 */
  __IO uint32_t MRGD_W3_1_4;                       /**< Memory Region Descriptor, offset: 0x228C */
  __IO uint32_t MRGD_W4_1_4;                       /**< Memory Region Descriptor, offset: 0x2290 */
       uint8_t RESERVED_56[12];
  __IO uint32_t MRGD_W0_1_5;                       /**< Memory Region Descriptor, offset: 0x22A0 */
  __IO uint32_t MRGD_W1_1_5;                       /**< Memory Region Descriptor, offset: 0x22A4 */
  __IO uint32_t MRGD_W2_1_5;                       /**< Memory Region Descriptor, offset: 0x22A8 */
  __IO uint32_t MRGD_W3_1_5;                       /**< Memory Region Descriptor, offset: 0x22AC */
  __IO uint32_t MRGD_W4_1_5;                       /**< Memory Region Descriptor, offset: 0x22B0 */
       uint8_t RESERVED_57[12];
  __IO uint32_t MRGD_W0_1_6;                       /**< Memory Region Descriptor, offset: 0x22C0 */
  __IO uint32_t MRGD_W1_1_6;                       /**< Memory Region Descriptor, offset: 0x22C4 */
  __IO uint32_t MRGD_W2_1_6;                       /**< Memory Region Descriptor, offset: 0x22C8 */
  __IO uint32_t MRGD_W3_1_6;                       /**< Memory Region Descriptor, offset: 0x22CC */
  __IO uint32_t MRGD_W4_1_6;                       /**< Memory Region Descriptor, offset: 0x22D0 */
       uint8_t RESERVED_58[12];
  __IO uint32_t MRGD_W0_1_7;                       /**< Memory Region Descriptor, offset: 0x22E0 */
  __IO uint32_t MRGD_W1_1_7;                       /**< Memory Region Descriptor, offset: 0x22E4 */
  __IO uint32_t MRGD_W2_1_7;                       /**< Memory Region Descriptor, offset: 0x22E8 */
  __IO uint32_t MRGD_W3_1_7;                       /**< Memory Region Descriptor, offset: 0x22EC */
  __IO uint32_t MRGD_W4_1_7;                       /**< Memory Region Descriptor, offset: 0x22F0 */
       uint8_t RESERVED_59[268];
  __IO uint32_t MRGD_W0_2_0;                       /**< Memory Region Descriptor, offset: 0x2400 */
  __IO uint32_t MRGD_W1_2_0;                       /**< Memory Region Descriptor, offset: 0x2404 */
  __IO uint32_t MRGD_W2_2_0;                       /**< Memory Region Descriptor, offset: 0x2408 */
  __IO uint32_t MRGD_W3_2_0;                       /**< Memory Region Descriptor, offset: 0x240C */
  __IO uint32_t MRGD_W4_2_0;                       /**< Memory Region Descriptor, offset: 0x2410 */
       uint8_t RESERVED_60[12];
  __IO uint32_t MRGD_W0_2_1;                       /**< Memory Region Descriptor, offset: 0x2420 */
  __IO uint32_t MRGD_W1_2_1;                       /**< Memory Region Descriptor, offset: 0x2424 */
  __IO uint32_t MRGD_W2_2_1;                       /**< Memory Region Descriptor, offset: 0x2428 */
  __IO uint32_t MRGD_W3_2_1;                       /**< Memory Region Descriptor, offset: 0x242C */
  __IO uint32_t MRGD_W4_2_1;                       /**< Memory Region Descriptor, offset: 0x2430 */
       uint8_t RESERVED_61[12];
  __IO uint32_t MRGD_W0_2_2;                       /**< Memory Region Descriptor, offset: 0x2440 */
  __IO uint32_t MRGD_W1_2_2;                       /**< Memory Region Descriptor, offset: 0x2444 */
  __IO uint32_t MRGD_W2_2_2;                       /**< Memory Region Descriptor, offset: 0x2448 */
  __IO uint32_t MRGD_W3_2_2;                       /**< Memory Region Descriptor, offset: 0x244C */
  __IO uint32_t MRGD_W4_2_2;                       /**< Memory Region Descriptor, offset: 0x2450 */
       uint8_t RESERVED_62[12];
  __IO uint32_t MRGD_W0_2_3;                       /**< Memory Region Descriptor, offset: 0x2460 */
  __IO uint32_t MRGD_W1_2_3;                       /**< Memory Region Descriptor, offset: 0x2464 */
  __IO uint32_t MRGD_W2_2_3;                       /**< Memory Region Descriptor, offset: 0x2468 */
  __IO uint32_t MRGD_W3_2_3;                       /**< Memory Region Descriptor, offset: 0x246C */
  __IO uint32_t MRGD_W4_2_3;                       /**< Memory Region Descriptor, offset: 0x2470 */
       uint8_t RESERVED_63[396];
  __IO uint32_t MRGD_W0_3_0;                       /**< Memory Region Descriptor, offset: 0x2600 */
  __IO uint32_t MRGD_W1_3_0;                       /**< Memory Region Descriptor, offset: 0x2604 */
  __IO uint32_t MRGD_W2_3_0;                       /**< Memory Region Descriptor, offset: 0x2608 */
  __IO uint32_t MRGD_W3_3_0;                       /**< Memory Region Descriptor, offset: 0x260C */
  __IO uint32_t MRGD_W4_3_0;                       /**< Memory Region Descriptor, offset: 0x2610 */
       uint8_t RESERVED_64[12];
  __IO uint32_t MRGD_W0_3_1;                       /**< Memory Region Descriptor, offset: 0x2620 */
  __IO uint32_t MRGD_W1_3_1;                       /**< Memory Region Descriptor, offset: 0x2624 */
  __IO uint32_t MRGD_W2_3_1;                       /**< Memory Region Descriptor, offset: 0x2628 */
  __IO uint32_t MRGD_W3_3_1;                       /**< Memory Region Descriptor, offset: 0x262C */
  __IO uint32_t MRGD_W4_3_1;                       /**< Memory Region Descriptor, offset: 0x2630 */
       uint8_t RESERVED_65[12];
  __IO uint32_t MRGD_W0_3_2;                       /**< Memory Region Descriptor, offset: 0x2640 */
  __IO uint32_t MRGD_W1_3_2;                       /**< Memory Region Descriptor, offset: 0x2644 */
  __IO uint32_t MRGD_W2_3_2;                       /**< Memory Region Descriptor, offset: 0x2648 */
  __IO uint32_t MRGD_W3_3_2;                       /**< Memory Region Descriptor, offset: 0x264C */
  __IO uint32_t MRGD_W4_3_2;                       /**< Memory Region Descriptor, offset: 0x2650 */
       uint8_t RESERVED_66[12];
  __IO uint32_t MRGD_W0_3_3;                       /**< Memory Region Descriptor, offset: 0x2660 */
  __IO uint32_t MRGD_W1_3_3;                       /**< Memory Region Descriptor, offset: 0x2664 */
  __IO uint32_t MRGD_W2_3_3;                       /**< Memory Region Descriptor, offset: 0x2668 */
  __IO uint32_t MRGD_W3_3_3;                       /**< Memory Region Descriptor, offset: 0x266C */
  __IO uint32_t MRGD_W4_3_3;                       /**< Memory Region Descriptor, offset: 0x2670 */
       uint8_t RESERVED_67[396];
  __IO uint32_t MRGD_W0_4_0;                       /**< Memory Region Descriptor, offset: 0x2800 */
  __IO uint32_t MRGD_W1_4_0;                       /**< Memory Region Descriptor, offset: 0x2804 */
  __IO uint32_t MRGD_W2_4_0;                       /**< Memory Region Descriptor, offset: 0x2808 */
  __IO uint32_t MRGD_W3_4_0;                       /**< Memory Region Descriptor, offset: 0x280C */
  __IO uint32_t MRGD_W4_4_0;                       /**< Memory Region Descriptor, offset: 0x2810 */
       uint8_t RESERVED_68[12];
  __IO uint32_t MRGD_W0_4_1;                       /**< Memory Region Descriptor, offset: 0x2820 */
  __IO uint32_t MRGD_W1_4_1;                       /**< Memory Region Descriptor, offset: 0x2824 */
  __IO uint32_t MRGD_W2_4_1;                       /**< Memory Region Descriptor, offset: 0x2828 */
  __IO uint32_t MRGD_W3_4_1;                       /**< Memory Region Descriptor, offset: 0x282C */
  __IO uint32_t MRGD_W4_4_1;                       /**< Memory Region Descriptor, offset: 0x2830 */
       uint8_t RESERVED_69[12];
  __IO uint32_t MRGD_W0_4_2;                       /**< Memory Region Descriptor, offset: 0x2840 */
  __IO uint32_t MRGD_W1_4_2;                       /**< Memory Region Descriptor, offset: 0x2844 */
  __IO uint32_t MRGD_W2_4_2;                       /**< Memory Region Descriptor, offset: 0x2848 */
  __IO uint32_t MRGD_W3_4_2;                       /**< Memory Region Descriptor, offset: 0x284C */
  __IO uint32_t MRGD_W4_4_2;                       /**< Memory Region Descriptor, offset: 0x2850 */
       uint8_t RESERVED_70[12];
  __IO uint32_t MRGD_W0_4_3;                       /**< Memory Region Descriptor, offset: 0x2860 */
  __IO uint32_t MRGD_W1_4_3;                       /**< Memory Region Descriptor, offset: 0x2864 */
  __IO uint32_t MRGD_W2_4_3;                       /**< Memory Region Descriptor, offset: 0x2868 */
  __IO uint32_t MRGD_W3_4_3;                       /**< Memory Region Descriptor, offset: 0x286C */
  __IO uint32_t MRGD_W4_4_3;                       /**< Memory Region Descriptor, offset: 0x2870 */
       uint8_t RESERVED_71[12];
  __IO uint32_t MRGD_W0_4_4;                       /**< Memory Region Descriptor, offset: 0x2880 */
  __IO uint32_t MRGD_W1_4_4;                       /**< Memory Region Descriptor, offset: 0x2884 */
  __IO uint32_t MRGD_W2_4_4;                       /**< Memory Region Descriptor, offset: 0x2888 */
  __IO uint32_t MRGD_W3_4_4;                       /**< Memory Region Descriptor, offset: 0x288C */
  __IO uint32_t MRGD_W4_4_4;                       /**< Memory Region Descriptor, offset: 0x2890 */
       uint8_t RESERVED_72[12];
  __IO uint32_t MRGD_W0_4_5;                       /**< Memory Region Descriptor, offset: 0x28A0 */
  __IO uint32_t MRGD_W1_4_5;                       /**< Memory Region Descriptor, offset: 0x28A4 */
  __IO uint32_t MRGD_W2_4_5;                       /**< Memory Region Descriptor, offset: 0x28A8 */
  __IO uint32_t MRGD_W3_4_5;                       /**< Memory Region Descriptor, offset: 0x28AC */
  __IO uint32_t MRGD_W4_4_5;                       /**< Memory Region Descriptor, offset: 0x28B0 */
       uint8_t RESERVED_73[12];
  __IO uint32_t MRGD_W0_4_6;                       /**< Memory Region Descriptor, offset: 0x28C0 */
  __IO uint32_t MRGD_W1_4_6;                       /**< Memory Region Descriptor, offset: 0x28C4 */
  __IO uint32_t MRGD_W2_4_6;                       /**< Memory Region Descriptor, offset: 0x28C8 */
  __IO uint32_t MRGD_W3_4_6;                       /**< Memory Region Descriptor, offset: 0x28CC */
  __IO uint32_t MRGD_W4_4_6;                       /**< Memory Region Descriptor, offset: 0x28D0 */
       uint8_t RESERVED_74[12];
  __IO uint32_t MRGD_W0_4_7;                       /**< Memory Region Descriptor, offset: 0x28E0 */
  __IO uint32_t MRGD_W1_4_7;                       /**< Memory Region Descriptor, offset: 0x28E4 */
  __IO uint32_t MRGD_W2_4_7;                       /**< Memory Region Descriptor, offset: 0x28E8 */
  __IO uint32_t MRGD_W3_4_7;                       /**< Memory Region Descriptor, offset: 0x28EC */
  __IO uint32_t MRGD_W4_4_7;                       /**< Memory Region Descriptor, offset: 0x28F0 */
       uint8_t RESERVED_75[268];
  __IO uint32_t MRGD_W0_5_0;                       /**< Memory Region Descriptor, offset: 0x2A00 */
  __IO uint32_t MRGD_W1_5_0;                       /**< Memory Region Descriptor, offset: 0x2A04 */
  __IO uint32_t MRGD_W2_5_0;                       /**< Memory Region Descriptor, offset: 0x2A08 */
  __IO uint32_t MRGD_W3_5_0;                       /**< Memory Region Descriptor, offset: 0x2A0C */
  __IO uint32_t MRGD_W4_5_0;                       /**< Memory Region Descriptor, offset: 0x2A10 */
       uint8_t RESERVED_76[12];
  __IO uint32_t MRGD_W0_5_1;                       /**< Memory Region Descriptor, offset: 0x2A20 */
  __IO uint32_t MRGD_W1_5_1;                       /**< Memory Region Descriptor, offset: 0x2A24 */
  __IO uint32_t MRGD_W2_5_1;                       /**< Memory Region Descriptor, offset: 0x2A28 */
  __IO uint32_t MRGD_W3_5_1;                       /**< Memory Region Descriptor, offset: 0x2A2C */
  __IO uint32_t MRGD_W4_5_1;                       /**< Memory Region Descriptor, offset: 0x2A30 */
       uint8_t RESERVED_77[12];
  __IO uint32_t MRGD_W0_5_2;                       /**< Memory Region Descriptor, offset: 0x2A40 */
  __IO uint32_t MRGD_W1_5_2;                       /**< Memory Region Descriptor, offset: 0x2A44 */
  __IO uint32_t MRGD_W2_5_2;                       /**< Memory Region Descriptor, offset: 0x2A48 */
  __IO uint32_t MRGD_W3_5_2;                       /**< Memory Region Descriptor, offset: 0x2A4C */
  __IO uint32_t MRGD_W4_5_2;                       /**< Memory Region Descriptor, offset: 0x2A50 */
       uint8_t RESERVED_78[12];
  __IO uint32_t MRGD_W0_5_3;                       /**< Memory Region Descriptor, offset: 0x2A60 */
  __IO uint32_t MRGD_W1_5_3;                       /**< Memory Region Descriptor, offset: 0x2A64 */
  __IO uint32_t MRGD_W2_5_3;                       /**< Memory Region Descriptor, offset: 0x2A68 */
  __IO uint32_t MRGD_W3_5_3;                       /**< Memory Region Descriptor, offset: 0x2A6C */
  __IO uint32_t MRGD_W4_5_3;                       /**< Memory Region Descriptor, offset: 0x2A70 */
       uint8_t RESERVED_79[12];
  __IO uint32_t MRGD_W0_5_4;                       /**< Memory Region Descriptor, offset: 0x2A80 */
  __IO uint32_t MRGD_W1_5_4;                       /**< Memory Region Descriptor, offset: 0x2A84 */
  __IO uint32_t MRGD_W2_5_4;                       /**< Memory Region Descriptor, offset: 0x2A88 */
  __IO uint32_t MRGD_W3_5_4;                       /**< Memory Region Descriptor, offset: 0x2A8C */
  __IO uint32_t MRGD_W4_5_4;                       /**< Memory Region Descriptor, offset: 0x2A90 */
       uint8_t RESERVED_80[12];
  __IO uint32_t MRGD_W0_5_5;                       /**< Memory Region Descriptor, offset: 0x2AA0 */
  __IO uint32_t MRGD_W1_5_5;                       /**< Memory Region Descriptor, offset: 0x2AA4 */
  __IO uint32_t MRGD_W2_5_5;                       /**< Memory Region Descriptor, offset: 0x2AA8 */
  __IO uint32_t MRGD_W3_5_5;                       /**< Memory Region Descriptor, offset: 0x2AAC */
  __IO uint32_t MRGD_W4_5_5;                       /**< Memory Region Descriptor, offset: 0x2AB0 */
       uint8_t RESERVED_81[12];
  __IO uint32_t MRGD_W0_5_6;                       /**< Memory Region Descriptor, offset: 0x2AC0 */
  __IO uint32_t MRGD_W1_5_6;                       /**< Memory Region Descriptor, offset: 0x2AC4 */
  __IO uint32_t MRGD_W2_5_6;                       /**< Memory Region Descriptor, offset: 0x2AC8 */
  __IO uint32_t MRGD_W3_5_6;                       /**< Memory Region Descriptor, offset: 0x2ACC */
  __IO uint32_t MRGD_W4_5_6;                       /**< Memory Region Descriptor, offset: 0x2AD0 */
       uint8_t RESERVED_82[12];
  __IO uint32_t MRGD_W0_5_7;                       /**< Memory Region Descriptor, offset: 0x2AE0 */
  __IO uint32_t MRGD_W1_5_7;                       /**< Memory Region Descriptor, offset: 0x2AE4 */
  __IO uint32_t MRGD_W2_5_7;                       /**< Memory Region Descriptor, offset: 0x2AE8 */
  __IO uint32_t MRGD_W3_5_7;                       /**< Memory Region Descriptor, offset: 0x2AEC */
  __IO uint32_t MRGD_W4_5_7;                       /**< Memory Region Descriptor, offset: 0x2AF0 */
       uint8_t RESERVED_83[268];
  __IO uint32_t MRGD_W0_6_0;                       /**< Memory Region Descriptor, offset: 0x2C00 */
  __IO uint32_t MRGD_W1_6_0;                       /**< Memory Region Descriptor, offset: 0x2C04 */
  __IO uint32_t MRGD_W2_6_0;                       /**< Memory Region Descriptor, offset: 0x2C08 */
  __IO uint32_t MRGD_W3_6_0;                       /**< Memory Region Descriptor, offset: 0x2C0C */
  __IO uint32_t MRGD_W4_6_0;                       /**< Memory Region Descriptor, offset: 0x2C10 */
       uint8_t RESERVED_84[12];
  __IO uint32_t MRGD_W0_6_1;                       /**< Memory Region Descriptor, offset: 0x2C20 */
  __IO uint32_t MRGD_W1_6_1;                       /**< Memory Region Descriptor, offset: 0x2C24 */
  __IO uint32_t MRGD_W2_6_1;                       /**< Memory Region Descriptor, offset: 0x2C28 */
  __IO uint32_t MRGD_W3_6_1;                       /**< Memory Region Descriptor, offset: 0x2C2C */
  __IO uint32_t MRGD_W4_6_1;                       /**< Memory Region Descriptor, offset: 0x2C30 */
       uint8_t RESERVED_85[12];
  __IO uint32_t MRGD_W0_6_2;                       /**< Memory Region Descriptor, offset: 0x2C40 */
  __IO uint32_t MRGD_W1_6_2;                       /**< Memory Region Descriptor, offset: 0x2C44 */
  __IO uint32_t MRGD_W2_6_2;                       /**< Memory Region Descriptor, offset: 0x2C48 */
  __IO uint32_t MRGD_W3_6_2;                       /**< Memory Region Descriptor, offset: 0x2C4C */
  __IO uint32_t MRGD_W4_6_2;                       /**< Memory Region Descriptor, offset: 0x2C50 */
       uint8_t RESERVED_86[12];
  __IO uint32_t MRGD_W0_6_3;                       /**< Memory Region Descriptor, offset: 0x2C60 */
  __IO uint32_t MRGD_W1_6_3;                       /**< Memory Region Descriptor, offset: 0x2C64 */
  __IO uint32_t MRGD_W2_6_3;                       /**< Memory Region Descriptor, offset: 0x2C68 */
  __IO uint32_t MRGD_W3_6_3;                       /**< Memory Region Descriptor, offset: 0x2C6C */
  __IO uint32_t MRGD_W4_6_3;                       /**< Memory Region Descriptor, offset: 0x2C70 */
       uint8_t RESERVED_87[12];
  __IO uint32_t MRGD_W0_6_4;                       /**< Memory Region Descriptor, offset: 0x2C80 */
  __IO uint32_t MRGD_W1_6_4;                       /**< Memory Region Descriptor, offset: 0x2C84 */
  __IO uint32_t MRGD_W2_6_4;                       /**< Memory Region Descriptor, offset: 0x2C88 */
  __IO uint32_t MRGD_W3_6_4;                       /**< Memory Region Descriptor, offset: 0x2C8C */
  __IO uint32_t MRGD_W4_6_4;                       /**< Memory Region Descriptor, offset: 0x2C90 */
       uint8_t RESERVED_88[12];
  __IO uint32_t MRGD_W0_6_5;                       /**< Memory Region Descriptor, offset: 0x2CA0 */
  __IO uint32_t MRGD_W1_6_5;                       /**< Memory Region Descriptor, offset: 0x2CA4 */
  __IO uint32_t MRGD_W2_6_5;                       /**< Memory Region Descriptor, offset: 0x2CA8 */
  __IO uint32_t MRGD_W3_6_5;                       /**< Memory Region Descriptor, offset: 0x2CAC */
  __IO uint32_t MRGD_W4_6_5;                       /**< Memory Region Descriptor, offset: 0x2CB0 */
       uint8_t RESERVED_89[12];
  __IO uint32_t MRGD_W0_6_6;                       /**< Memory Region Descriptor, offset: 0x2CC0 */
  __IO uint32_t MRGD_W1_6_6;                       /**< Memory Region Descriptor, offset: 0x2CC4 */
  __IO uint32_t MRGD_W2_6_6;                       /**< Memory Region Descriptor, offset: 0x2CC8 */
  __IO uint32_t MRGD_W3_6_6;                       /**< Memory Region Descriptor, offset: 0x2CCC */
  __IO uint32_t MRGD_W4_6_6;                       /**< Memory Region Descriptor, offset: 0x2CD0 */
       uint8_t RESERVED_90[12];
  __IO uint32_t MRGD_W0_6_7;                       /**< Memory Region Descriptor, offset: 0x2CE0 */
  __IO uint32_t MRGD_W1_6_7;                       /**< Memory Region Descriptor, offset: 0x2CE4 */
  __IO uint32_t MRGD_W2_6_7;                       /**< Memory Region Descriptor, offset: 0x2CE8 */
  __IO uint32_t MRGD_W3_6_7;                       /**< Memory Region Descriptor, offset: 0x2CEC */
  __IO uint32_t MRGD_W4_6_7;                       /**< Memory Region Descriptor, offset: 0x2CF0 */
       uint8_t RESERVED_91[268];
  __IO uint32_t MRGD_W0_7_0;                       /**< Memory Region Descriptor, offset: 0x2E00 */
  __IO uint32_t MRGD_W1_7_0;                       /**< Memory Region Descriptor, offset: 0x2E04 */
  __IO uint32_t MRGD_W2_7_0;                       /**< Memory Region Descriptor, offset: 0x2E08 */
  __IO uint32_t MRGD_W3_7_0;                       /**< Memory Region Descriptor, offset: 0x2E0C */
  __IO uint32_t MRGD_W4_7_0;                       /**< Memory Region Descriptor, offset: 0x2E10 */
       uint8_t RESERVED_92[12];
  __IO uint32_t MRGD_W0_7_1;                       /**< Memory Region Descriptor, offset: 0x2E20 */
  __IO uint32_t MRGD_W1_7_1;                       /**< Memory Region Descriptor, offset: 0x2E24 */
  __IO uint32_t MRGD_W2_7_1;                       /**< Memory Region Descriptor, offset: 0x2E28 */
  __IO uint32_t MRGD_W3_7_1;                       /**< Memory Region Descriptor, offset: 0x2E2C */
  __IO uint32_t MRGD_W4_7_1;                       /**< Memory Region Descriptor, offset: 0x2E30 */
       uint8_t RESERVED_93[12];
  __IO uint32_t MRGD_W0_7_2;                       /**< Memory Region Descriptor, offset: 0x2E40 */
  __IO uint32_t MRGD_W1_7_2;                       /**< Memory Region Descriptor, offset: 0x2E44 */
  __IO uint32_t MRGD_W2_7_2;                       /**< Memory Region Descriptor, offset: 0x2E48 */
  __IO uint32_t MRGD_W3_7_2;                       /**< Memory Region Descriptor, offset: 0x2E4C */
  __IO uint32_t MRGD_W4_7_2;                       /**< Memory Region Descriptor, offset: 0x2E50 */
       uint8_t RESERVED_94[12];
  __IO uint32_t MRGD_W0_7_3;                       /**< Memory Region Descriptor, offset: 0x2E60 */
  __IO uint32_t MRGD_W1_7_3;                       /**< Memory Region Descriptor, offset: 0x2E64 */
  __IO uint32_t MRGD_W2_7_3;                       /**< Memory Region Descriptor, offset: 0x2E68 */
  __IO uint32_t MRGD_W3_7_3;                       /**< Memory Region Descriptor, offset: 0x2E6C */
  __IO uint32_t MRGD_W4_7_3;                       /**< Memory Region Descriptor, offset: 0x2E70 */
       uint8_t RESERVED_95[12];
  __IO uint32_t MRGD_W0_7_4;                       /**< Memory Region Descriptor, offset: 0x2E80 */
  __IO uint32_t MRGD_W1_7_4;                       /**< Memory Region Descriptor, offset: 0x2E84 */
  __IO uint32_t MRGD_W2_7_4;                       /**< Memory Region Descriptor, offset: 0x2E88 */
  __IO uint32_t MRGD_W3_7_4;                       /**< Memory Region Descriptor, offset: 0x2E8C */
  __IO uint32_t MRGD_W4_7_4;                       /**< Memory Region Descriptor, offset: 0x2E90 */
       uint8_t RESERVED_96[12];
  __IO uint32_t MRGD_W0_7_5;                       /**< Memory Region Descriptor, offset: 0x2EA0 */
  __IO uint32_t MRGD_W1_7_5;                       /**< Memory Region Descriptor, offset: 0x2EA4 */
  __IO uint32_t MRGD_W2_7_5;                       /**< Memory Region Descriptor, offset: 0x2EA8 */
  __IO uint32_t MRGD_W3_7_5;                       /**< Memory Region Descriptor, offset: 0x2EAC */
  __IO uint32_t MRGD_W4_7_5;                       /**< Memory Region Descriptor, offset: 0x2EB0 */
       uint8_t RESERVED_97[12];
  __IO uint32_t MRGD_W0_7_6;                       /**< Memory Region Descriptor, offset: 0x2EC0 */
  __IO uint32_t MRGD_W1_7_6;                       /**< Memory Region Descriptor, offset: 0x2EC4 */
  __IO uint32_t MRGD_W2_7_6;                       /**< Memory Region Descriptor, offset: 0x2EC8 */
  __IO uint32_t MRGD_W3_7_6;                       /**< Memory Region Descriptor, offset: 0x2ECC */
  __IO uint32_t MRGD_W4_7_6;                       /**< Memory Region Descriptor, offset: 0x2ED0 */
       uint8_t RESERVED_98[12];
  __IO uint32_t MRGD_W0_7_7;                       /**< Memory Region Descriptor, offset: 0x2EE0 */
  __IO uint32_t MRGD_W1_7_7;                       /**< Memory Region Descriptor, offset: 0x2EE4 */
  __IO uint32_t MRGD_W2_7_7;                       /**< Memory Region Descriptor, offset: 0x2EE8 */
  __IO uint32_t MRGD_W3_7_7;                       /**< Memory Region Descriptor, offset: 0x2EEC */
  __IO uint32_t MRGD_W4_7_7;                       /**< Memory Region Descriptor, offset: 0x2EF0 */
       uint8_t RESERVED_99[268];
  __IO uint32_t MRGD_W0_8_0;                       /**< Memory Region Descriptor, offset: 0x3000 */
  __IO uint32_t MRGD_W1_8_0;                       /**< Memory Region Descriptor, offset: 0x3004 */
  __IO uint32_t MRGD_W2_8_0;                       /**< Memory Region Descriptor, offset: 0x3008 */
  __IO uint32_t MRGD_W3_8_0;                       /**< Memory Region Descriptor, offset: 0x300C */
  __IO uint32_t MRGD_W4_8_0;                       /**< Memory Region Descriptor, offset: 0x3010 */
       uint8_t RESERVED_100[12];
  __IO uint32_t MRGD_W0_8_1;                       /**< Memory Region Descriptor, offset: 0x3020 */
  __IO uint32_t MRGD_W1_8_1;                       /**< Memory Region Descriptor, offset: 0x3024 */
  __IO uint32_t MRGD_W2_8_1;                       /**< Memory Region Descriptor, offset: 0x3028 */
  __IO uint32_t MRGD_W3_8_1;                       /**< Memory Region Descriptor, offset: 0x302C */
  __IO uint32_t MRGD_W4_8_1;                       /**< Memory Region Descriptor, offset: 0x3030 */
       uint8_t RESERVED_101[12];
  __IO uint32_t MRGD_W0_8_2;                       /**< Memory Region Descriptor, offset: 0x3040 */
  __IO uint32_t MRGD_W1_8_2;                       /**< Memory Region Descriptor, offset: 0x3044 */
  __IO uint32_t MRGD_W2_8_2;                       /**< Memory Region Descriptor, offset: 0x3048 */
  __IO uint32_t MRGD_W3_8_2;                       /**< Memory Region Descriptor, offset: 0x304C */
  __IO uint32_t MRGD_W4_8_2;                       /**< Memory Region Descriptor, offset: 0x3050 */
       uint8_t RESERVED_102[12];
  __IO uint32_t MRGD_W0_8_3;                       /**< Memory Region Descriptor, offset: 0x3060 */
  __IO uint32_t MRGD_W1_8_3;                       /**< Memory Region Descriptor, offset: 0x3064 */
  __IO uint32_t MRGD_W2_8_3;                       /**< Memory Region Descriptor, offset: 0x3068 */
  __IO uint32_t MRGD_W3_8_3;                       /**< Memory Region Descriptor, offset: 0x306C */
  __IO uint32_t MRGD_W4_8_3;                       /**< Memory Region Descriptor, offset: 0x3070 */
       uint8_t RESERVED_103[396];
  __IO uint32_t MRGD_W0_9_0;                       /**< Memory Region Descriptor, offset: 0x3200 */
  __IO uint32_t MRGD_W1_9_0;                       /**< Memory Region Descriptor, offset: 0x3204 */
  __IO uint32_t MRGD_W2_9_0;                       /**< Memory Region Descriptor, offset: 0x3208 */
  __IO uint32_t MRGD_W3_9_0;                       /**< Memory Region Descriptor, offset: 0x320C */
  __IO uint32_t MRGD_W4_9_0;                       /**< Memory Region Descriptor, offset: 0x3210 */
       uint8_t RESERVED_104[12];
  __IO uint32_t MRGD_W0_9_1;                       /**< Memory Region Descriptor, offset: 0x3220 */
  __IO uint32_t MRGD_W1_9_1;                       /**< Memory Region Descriptor, offset: 0x3224 */
  __IO uint32_t MRGD_W2_9_1;                       /**< Memory Region Descriptor, offset: 0x3228 */
  __IO uint32_t MRGD_W3_9_1;                       /**< Memory Region Descriptor, offset: 0x322C */
  __IO uint32_t MRGD_W4_9_1;                       /**< Memory Region Descriptor, offset: 0x3230 */
       uint8_t RESERVED_105[12];
  __IO uint32_t MRGD_W0_9_2;                       /**< Memory Region Descriptor, offset: 0x3240 */
  __IO uint32_t MRGD_W1_9_2;                       /**< Memory Region Descriptor, offset: 0x3244 */
  __IO uint32_t MRGD_W2_9_2;                       /**< Memory Region Descriptor, offset: 0x3248 */
  __IO uint32_t MRGD_W3_9_2;                       /**< Memory Region Descriptor, offset: 0x324C */
  __IO uint32_t MRGD_W4_9_2;                       /**< Memory Region Descriptor, offset: 0x3250 */
       uint8_t RESERVED_106[12];
  __IO uint32_t MRGD_W0_9_3;                       /**< Memory Region Descriptor, offset: 0x3260 */
  __IO uint32_t MRGD_W1_9_3;                       /**< Memory Region Descriptor, offset: 0x3264 */
  __IO uint32_t MRGD_W2_9_3;                       /**< Memory Region Descriptor, offset: 0x3268 */
  __IO uint32_t MRGD_W3_9_3;                       /**< Memory Region Descriptor, offset: 0x326C */
  __IO uint32_t MRGD_W4_9_3;                       /**< Memory Region Descriptor, offset: 0x3270 */
       uint8_t RESERVED_107[12];
  __IO uint32_t MRGD_W0_9_4;                       /**< Memory Region Descriptor, offset: 0x3280 */
  __IO uint32_t MRGD_W1_9_4;                       /**< Memory Region Descriptor, offset: 0x3284 */
  __IO uint32_t MRGD_W2_9_4;                       /**< Memory Region Descriptor, offset: 0x3288 */
  __IO uint32_t MRGD_W3_9_4;                       /**< Memory Region Descriptor, offset: 0x328C */
  __IO uint32_t MRGD_W4_9_4;                       /**< Memory Region Descriptor, offset: 0x3290 */
       uint8_t RESERVED_108[12];
  __IO uint32_t MRGD_W0_9_5;                       /**< Memory Region Descriptor, offset: 0x32A0 */
  __IO uint32_t MRGD_W1_9_5;                       /**< Memory Region Descriptor, offset: 0x32A4 */
  __IO uint32_t MRGD_W2_9_5;                       /**< Memory Region Descriptor, offset: 0x32A8 */
  __IO uint32_t MRGD_W3_9_5;                       /**< Memory Region Descriptor, offset: 0x32AC */
  __IO uint32_t MRGD_W4_9_5;                       /**< Memory Region Descriptor, offset: 0x32B0 */
       uint8_t RESERVED_109[12];
  __IO uint32_t MRGD_W0_9_6;                       /**< Memory Region Descriptor, offset: 0x32C0 */
  __IO uint32_t MRGD_W1_9_6;                       /**< Memory Region Descriptor, offset: 0x32C4 */
  __IO uint32_t MRGD_W2_9_6;                       /**< Memory Region Descriptor, offset: 0x32C8 */
  __IO uint32_t MRGD_W3_9_6;                       /**< Memory Region Descriptor, offset: 0x32CC */
  __IO uint32_t MRGD_W4_9_6;                       /**< Memory Region Descriptor, offset: 0x32D0 */
       uint8_t RESERVED_110[12];
  __IO uint32_t MRGD_W0_9_7;                       /**< Memory Region Descriptor, offset: 0x32E0 */
  __IO uint32_t MRGD_W1_9_7;                       /**< Memory Region Descriptor, offset: 0x32E4 */
  __IO uint32_t MRGD_W2_9_7;                       /**< Memory Region Descriptor, offset: 0x32E8 */
  __IO uint32_t MRGD_W3_9_7;                       /**< Memory Region Descriptor, offset: 0x32EC */
  __IO uint32_t MRGD_W4_9_7;                       /**< Memory Region Descriptor, offset: 0x32F0 */
       uint8_t RESERVED_111[268];
  __IO uint32_t MRGD_W0_10_0;                      /**< Memory Region Descriptor, offset: 0x3400 */
  __IO uint32_t MRGD_W1_10_0;                      /**< Memory Region Descriptor, offset: 0x3404 */
  __IO uint32_t MRGD_W2_10_0;                      /**< Memory Region Descriptor, offset: 0x3408 */
  __IO uint32_t MRGD_W3_10_0;                      /**< Memory Region Descriptor, offset: 0x340C */
  __IO uint32_t MRGD_W4_10_0;                      /**< Memory Region Descriptor, offset: 0x3410 */
       uint8_t RESERVED_112[12];
  __IO uint32_t MRGD_W0_10_1;                      /**< Memory Region Descriptor, offset: 0x3420 */
  __IO uint32_t MRGD_W1_10_1;                      /**< Memory Region Descriptor, offset: 0x3424 */
  __IO uint32_t MRGD_W2_10_1;                      /**< Memory Region Descriptor, offset: 0x3428 */
  __IO uint32_t MRGD_W3_10_1;                      /**< Memory Region Descriptor, offset: 0x342C */
  __IO uint32_t MRGD_W4_10_1;                      /**< Memory Region Descriptor, offset: 0x3430 */
       uint8_t RESERVED_113[12];
  __IO uint32_t MRGD_W0_10_2;                      /**< Memory Region Descriptor, offset: 0x3440 */
  __IO uint32_t MRGD_W1_10_2;                      /**< Memory Region Descriptor, offset: 0x3444 */
  __IO uint32_t MRGD_W2_10_2;                      /**< Memory Region Descriptor, offset: 0x3448 */
  __IO uint32_t MRGD_W3_10_2;                      /**< Memory Region Descriptor, offset: 0x344C */
  __IO uint32_t MRGD_W4_10_2;                      /**< Memory Region Descriptor, offset: 0x3450 */
       uint8_t RESERVED_114[12];
  __IO uint32_t MRGD_W0_10_3;                      /**< Memory Region Descriptor, offset: 0x3460 */
  __IO uint32_t MRGD_W1_10_3;                      /**< Memory Region Descriptor, offset: 0x3464 */
  __IO uint32_t MRGD_W2_10_3;                      /**< Memory Region Descriptor, offset: 0x3468 */
  __IO uint32_t MRGD_W3_10_3;                      /**< Memory Region Descriptor, offset: 0x346C */
  __IO uint32_t MRGD_W4_10_3;                      /**< Memory Region Descriptor, offset: 0x3470 */
       uint8_t RESERVED_115[12];
  __IO uint32_t MRGD_W0_10_4;                      /**< Memory Region Descriptor, offset: 0x3480 */
  __IO uint32_t MRGD_W1_10_4;                      /**< Memory Region Descriptor, offset: 0x3484 */
  __IO uint32_t MRGD_W2_10_4;                      /**< Memory Region Descriptor, offset: 0x3488 */
  __IO uint32_t MRGD_W3_10_4;                      /**< Memory Region Descriptor, offset: 0x348C */
  __IO uint32_t MRGD_W4_10_4;                      /**< Memory Region Descriptor, offset: 0x3490 */
       uint8_t RESERVED_116[12];
  __IO uint32_t MRGD_W0_10_5;                      /**< Memory Region Descriptor, offset: 0x34A0 */
  __IO uint32_t MRGD_W1_10_5;                      /**< Memory Region Descriptor, offset: 0x34A4 */
  __IO uint32_t MRGD_W2_10_5;                      /**< Memory Region Descriptor, offset: 0x34A8 */
  __IO uint32_t MRGD_W3_10_5;                      /**< Memory Region Descriptor, offset: 0x34AC */
  __IO uint32_t MRGD_W4_10_5;                      /**< Memory Region Descriptor, offset: 0x34B0 */
       uint8_t RESERVED_117[12];
  __IO uint32_t MRGD_W0_10_6;                      /**< Memory Region Descriptor, offset: 0x34C0 */
  __IO uint32_t MRGD_W1_10_6;                      /**< Memory Region Descriptor, offset: 0x34C4 */
  __IO uint32_t MRGD_W2_10_6;                      /**< Memory Region Descriptor, offset: 0x34C8 */
  __IO uint32_t MRGD_W3_10_6;                      /**< Memory Region Descriptor, offset: 0x34CC */
  __IO uint32_t MRGD_W4_10_6;                      /**< Memory Region Descriptor, offset: 0x34D0 */
       uint8_t RESERVED_118[12];
  __IO uint32_t MRGD_W0_10_7;                      /**< Memory Region Descriptor, offset: 0x34E0 */
  __IO uint32_t MRGD_W1_10_7;                      /**< Memory Region Descriptor, offset: 0x34E4 */
  __IO uint32_t MRGD_W2_10_7;                      /**< Memory Region Descriptor, offset: 0x34E8 */
  __IO uint32_t MRGD_W3_10_7;                      /**< Memory Region Descriptor, offset: 0x34EC */
  __IO uint32_t MRGD_W4_10_7;                      /**< Memory Region Descriptor, offset: 0x34F0 */
       uint8_t RESERVED_119[268];
  __IO uint32_t MRGD_W0_11_0;                      /**< Memory Region Descriptor, offset: 0x3600 */
  __IO uint32_t MRGD_W1_11_0;                      /**< Memory Region Descriptor, offset: 0x3604 */
  __IO uint32_t MRGD_W2_11_0;                      /**< Memory Region Descriptor, offset: 0x3608 */
  __IO uint32_t MRGD_W3_11_0;                      /**< Memory Region Descriptor, offset: 0x360C */
  __IO uint32_t MRGD_W4_11_0;                      /**< Memory Region Descriptor, offset: 0x3610 */
       uint8_t RESERVED_120[12];
  __IO uint32_t MRGD_W0_11_1;                      /**< Memory Region Descriptor, offset: 0x3620 */
  __IO uint32_t MRGD_W1_11_1;                      /**< Memory Region Descriptor, offset: 0x3624 */
  __IO uint32_t MRGD_W2_11_1;                      /**< Memory Region Descriptor, offset: 0x3628 */
  __IO uint32_t MRGD_W3_11_1;                      /**< Memory Region Descriptor, offset: 0x362C */
  __IO uint32_t MRGD_W4_11_1;                      /**< Memory Region Descriptor, offset: 0x3630 */
       uint8_t RESERVED_121[12];
  __IO uint32_t MRGD_W0_11_2;                      /**< Memory Region Descriptor, offset: 0x3640 */
  __IO uint32_t MRGD_W1_11_2;                      /**< Memory Region Descriptor, offset: 0x3644 */
  __IO uint32_t MRGD_W2_11_2;                      /**< Memory Region Descriptor, offset: 0x3648 */
  __IO uint32_t MRGD_W3_11_2;                      /**< Memory Region Descriptor, offset: 0x364C */
  __IO uint32_t MRGD_W4_11_2;                      /**< Memory Region Descriptor, offset: 0x3650 */
       uint8_t RESERVED_122[12];
  __IO uint32_t MRGD_W0_11_3;                      /**< Memory Region Descriptor, offset: 0x3660 */
  __IO uint32_t MRGD_W1_11_3;                      /**< Memory Region Descriptor, offset: 0x3664 */
  __IO uint32_t MRGD_W2_11_3;                      /**< Memory Region Descriptor, offset: 0x3668 */
  __IO uint32_t MRGD_W3_11_3;                      /**< Memory Region Descriptor, offset: 0x366C */
  __IO uint32_t MRGD_W4_11_3;                      /**< Memory Region Descriptor, offset: 0x3670 */
       uint8_t RESERVED_123[396];
  __IO uint32_t MRGD_W0_12_0;                      /**< Memory Region Descriptor, offset: 0x3800 */
  __IO uint32_t MRGD_W1_12_0;                      /**< Memory Region Descriptor, offset: 0x3804 */
  __IO uint32_t MRGD_W2_12_0;                      /**< Memory Region Descriptor, offset: 0x3808 */
  __IO uint32_t MRGD_W3_12_0;                      /**< Memory Region Descriptor, offset: 0x380C */
  __IO uint32_t MRGD_W4_12_0;                      /**< Memory Region Descriptor, offset: 0x3810 */
       uint8_t RESERVED_124[12];
  __IO uint32_t MRGD_W0_12_1;                      /**< Memory Region Descriptor, offset: 0x3820 */
  __IO uint32_t MRGD_W1_12_1;                      /**< Memory Region Descriptor, offset: 0x3824 */
  __IO uint32_t MRGD_W2_12_1;                      /**< Memory Region Descriptor, offset: 0x3828 */
  __IO uint32_t MRGD_W3_12_1;                      /**< Memory Region Descriptor, offset: 0x382C */
  __IO uint32_t MRGD_W4_12_1;                      /**< Memory Region Descriptor, offset: 0x3830 */
       uint8_t RESERVED_125[1996];
  __IO uint32_t MSAC_W0_0_0;                       /**< Memory Slot Access Control, offset: 0x4000 */
  __IO uint32_t MSAC_W1_0_0;                       /**< Memory Slot Access Control, offset: 0x4004 */
  __IO uint32_t MSAC_W0_0_1;                       /**< Memory Slot Access Control, offset: 0x4008 */
  __IO uint32_t MSAC_W1_0_1;                       /**< Memory Slot Access Control, offset: 0x400C */
       uint8_t RESERVED_126[1008];
  __IO uint32_t MSAC_W0_1_0;                       /**< Memory Slot Access Control, offset: 0x4400 */
  __IO uint32_t MSAC_W1_1_0;                       /**< Memory Slot Access Control, offset: 0x4404 */
       uint8_t RESERVED_127[1016];
  __IO uint32_t MSAC_W0_2_0;                       /**< Memory Slot Access Control, offset: 0x4800 */
  __IO uint32_t MSAC_W1_2_0;                       /**< Memory Slot Access Control, offset: 0x4804 */
  __IO uint32_t MSAC_W0_2_1;                       /**< Memory Slot Access Control, offset: 0x4808 */
  __IO uint32_t MSAC_W1_2_1;                       /**< Memory Slot Access Control, offset: 0x480C */
  __IO uint32_t MSAC_W0_2_2;                       /**< Memory Slot Access Control, offset: 0x4810 */
  __IO uint32_t MSAC_W1_2_2;                       /**< Memory Slot Access Control, offset: 0x4814 */
  __IO uint32_t MSAC_W0_2_3;                       /**< Memory Slot Access Control, offset: 0x4818 */
  __IO uint32_t MSAC_W1_2_3;                       /**< Memory Slot Access Control, offset: 0x481C */
  __IO uint32_t MSAC_W0_2_4;                       /**< Memory Slot Access Control, offset: 0x4820 */
  __IO uint32_t MSAC_W1_2_4;                       /**< Memory Slot Access Control, offset: 0x4824 */
  __IO uint32_t MSAC_W0_2_5;                       /**< Memory Slot Access Control, offset: 0x4828 */
  __IO uint32_t MSAC_W1_2_5;                       /**< Memory Slot Access Control, offset: 0x482C */
  __IO uint32_t MSAC_W0_2_6;                       /**< Memory Slot Access Control, offset: 0x4830 */
  __IO uint32_t MSAC_W1_2_6;                       /**< Memory Slot Access Control, offset: 0x4834 */
} XRDC_Type;

/* ----------------------------------------------------------------------------
   -- XRDC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup XRDC_Register_Masks XRDC Register Masks
 * @{
 */

/*! @name CR - Control Register */
/*! @{ */

#define XRDC_CR_GVLDM_MASK                       (0x1U)
#define XRDC_CR_GVLDM_SHIFT                      (0U)
/*! GVLDM - Global Valid for MDACs(XRDC global enable/disable).
 *  0b0..XRDC MDACs are disabled.
 *  0b1..XRDC MDACs are enabled.
 */
#define XRDC_CR_GVLDM(x)                         (((uint32_t)(((uint32_t)(x)) << XRDC_CR_GVLDM_SHIFT)) & XRDC_CR_GVLDM_MASK)

#define XRDC_CR_HRL_MASK                         (0x1EU)
#define XRDC_CR_HRL_SHIFT                        (1U)
/*! HRL - Hardware Revision Level */
#define XRDC_CR_HRL(x)                           (((uint32_t)(((uint32_t)(x)) << XRDC_CR_HRL_SHIFT)) & XRDC_CR_HRL_MASK)

#define XRDC_CR_GVLDP_MASK                       (0x4000U)
#define XRDC_CR_GVLDP_SHIFT                      (14U)
/*! GVLDP - Global Valid for PACs/MSCs
 *  0b0..XRDC PACs/MSCs are disabled.
 *  0b1..XRDC PACs/MSCs are enabled.
 */
#define XRDC_CR_GVLDP(x)                         (((uint32_t)(((uint32_t)(x)) << XRDC_CR_GVLDP_SHIFT)) & XRDC_CR_GVLDP_MASK)

#define XRDC_CR_GVLDC_MASK                       (0x8000U)
#define XRDC_CR_GVLDC_SHIFT                      (15U)
/*! GVLDC - Global Valid for MRCs
 *  0b0..XRDC MRCs are disabled.
 *  0b1..XRDC MRCs are enabled.
 */
#define XRDC_CR_GVLDC(x)                         (((uint32_t)(((uint32_t)(x)) << XRDC_CR_GVLDC_SHIFT)) & XRDC_CR_GVLDC_MASK)

#define XRDC_CR_DBDS_MASK                        (0xF0000U)
#define XRDC_CR_DBDS_SHIFT                       (16U)
/*! DBDS - Deny by Default (DBD) Status
 *  0b0000..Not in Deny by Default window
 *  0b1000..Deny by default and (ELE + CA35 SecPriv allowed)
 *  0b1001..Deny by default and (ELE + CM33 allowed)
 *  0b1010..Deny by default and (ELE + CM33 SecPriv allowed)
 *  0b1011..Deny by default and (ELE + CM33 SecPriv + CA35 SecPriv allowed)
 *  0b1100..Deny by default and (ELE allowed)
 *  0b1110..All accesses denied
 *  0b1111..All accesses allowed
 */
#define XRDC_CR_DBDS(x)                          (((uint32_t)(((uint32_t)(x)) << XRDC_CR_DBDS_SHIFT)) & XRDC_CR_DBDS_MASK)

#define XRDC_CR_LK1_MASK                         (0x40000000U)
#define XRDC_CR_LK1_SHIFT                        (30U)
/*! LK1 - Lock Status
 *  0b0..The CR can be written by any secure privileged write.
 *  0b1..The CR is locked (read-only) until the next reset.
 */
#define XRDC_CR_LK1(x)                           (((uint32_t)(((uint32_t)(x)) << XRDC_CR_LK1_SHIFT)) & XRDC_CR_LK1_MASK)
/*! @} */

/*! @name HWCFG0 - Hardware Configuration Register 0 */
/*! @{ */

#define XRDC_HWCFG0_NDID_MASK                    (0xFFU)
#define XRDC_HWCFG0_NDID_SHIFT                   (0U)
/*! NDID - Number of domains */
#define XRDC_HWCFG0_NDID(x)                      (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG0_NDID_SHIFT)) & XRDC_HWCFG0_NDID_MASK)

#define XRDC_HWCFG0_NMSTR_MASK                   (0xFF00U)
#define XRDC_HWCFG0_NMSTR_SHIFT                  (8U)
/*! NMSTR - Number of bus masters */
#define XRDC_HWCFG0_NMSTR(x)                     (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG0_NMSTR_SHIFT)) & XRDC_HWCFG0_NMSTR_MASK)

#define XRDC_HWCFG0_NMRC_MASK                    (0xFF0000U)
#define XRDC_HWCFG0_NMRC_SHIFT                   (16U)
/*! NMRC - Number of MRCs */
#define XRDC_HWCFG0_NMRC(x)                      (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG0_NMRC_SHIFT)) & XRDC_HWCFG0_NMRC_MASK)

#define XRDC_HWCFG0_NPAC_MASK                    (0x3000000U)
#define XRDC_HWCFG0_NPAC_SHIFT                   (24U)
/*! NPAC - Number of PACs */
#define XRDC_HWCFG0_NPAC(x)                      (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG0_NPAC_SHIFT)) & XRDC_HWCFG0_NPAC_MASK)

#define XRDC_HWCFG0_NMSC_MASK                    (0xC000000U)
#define XRDC_HWCFG0_NMSC_SHIFT                   (26U)
/*! NMSC - Number of MSCs */
#define XRDC_HWCFG0_NMSC(x)                      (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG0_NMSC_SHIFT)) & XRDC_HWCFG0_NMSC_MASK)

#define XRDC_HWCFG0_MID_MASK                     (0xF0000000U)
#define XRDC_HWCFG0_MID_SHIFT                    (28U)
/*! MID - Module ID */
#define XRDC_HWCFG0_MID(x)                       (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG0_MID_SHIFT)) & XRDC_HWCFG0_MID_MASK)
/*! @} */

/*! @name HWCFG1 - Hardware Configuration Register 1 */
/*! @{ */

#define XRDC_HWCFG1_DID_MASK                     (0xFU)
#define XRDC_HWCFG1_DID_SHIFT                    (0U)
/*! DID - Domain identifier number */
#define XRDC_HWCFG1_DID(x)                       (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG1_DID_SHIFT)) & XRDC_HWCFG1_DID_MASK)
/*! @} */

/*! @name HWCFG2 - Hardware Configuration Register 2 */
/*! @{ */

#define XRDC_HWCFG2_PIDP0_MASK                   (0x1U)
#define XRDC_HWCFG2_PIDP0_SHIFT                  (0U)
/*! PIDP0 - Process identifier
 *  0b0..Bus master 0 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 0 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP0(x)                     (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP0_SHIFT)) & XRDC_HWCFG2_PIDP0_MASK)

#define XRDC_HWCFG2_PIDP1_MASK                   (0x2U)
#define XRDC_HWCFG2_PIDP1_SHIFT                  (1U)
/*! PIDP1 - Process identifier
 *  0b0..Bus master 1 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 1 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP1(x)                     (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP1_SHIFT)) & XRDC_HWCFG2_PIDP1_MASK)

#define XRDC_HWCFG2_PIDP2_MASK                   (0x4U)
#define XRDC_HWCFG2_PIDP2_SHIFT                  (2U)
/*! PIDP2 - Process identifier
 *  0b0..Bus master 2 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 2 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP2(x)                     (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP2_SHIFT)) & XRDC_HWCFG2_PIDP2_MASK)

#define XRDC_HWCFG2_PIDP3_MASK                   (0x8U)
#define XRDC_HWCFG2_PIDP3_SHIFT                  (3U)
/*! PIDP3 - Process identifier
 *  0b0..Bus master 3 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 3 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP3(x)                     (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP3_SHIFT)) & XRDC_HWCFG2_PIDP3_MASK)

#define XRDC_HWCFG2_PIDP4_MASK                   (0x10U)
#define XRDC_HWCFG2_PIDP4_SHIFT                  (4U)
/*! PIDP4 - Process identifier
 *  0b0..Bus master 4 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 4 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP4(x)                     (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP4_SHIFT)) & XRDC_HWCFG2_PIDP4_MASK)

#define XRDC_HWCFG2_PIDP5_MASK                   (0x20U)
#define XRDC_HWCFG2_PIDP5_SHIFT                  (5U)
/*! PIDP5 - Process identifier
 *  0b0..Bus master 5 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 5 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP5(x)                     (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP5_SHIFT)) & XRDC_HWCFG2_PIDP5_MASK)

#define XRDC_HWCFG2_PIDP6_MASK                   (0x40U)
#define XRDC_HWCFG2_PIDP6_SHIFT                  (6U)
/*! PIDP6 - Process identifier
 *  0b0..Bus master 6 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 6 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP6(x)                     (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP6_SHIFT)) & XRDC_HWCFG2_PIDP6_MASK)

#define XRDC_HWCFG2_PIDP7_MASK                   (0x80U)
#define XRDC_HWCFG2_PIDP7_SHIFT                  (7U)
/*! PIDP7 - Process identifier
 *  0b0..Bus master 7 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 7 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP7(x)                     (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP7_SHIFT)) & XRDC_HWCFG2_PIDP7_MASK)

#define XRDC_HWCFG2_PIDP8_MASK                   (0x100U)
#define XRDC_HWCFG2_PIDP8_SHIFT                  (8U)
/*! PIDP8 - Process identifier
 *  0b0..Bus master 8 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 8 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP8(x)                     (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP8_SHIFT)) & XRDC_HWCFG2_PIDP8_MASK)

#define XRDC_HWCFG2_PIDP9_MASK                   (0x200U)
#define XRDC_HWCFG2_PIDP9_SHIFT                  (9U)
/*! PIDP9 - Process identifier
 *  0b0..Bus master 9 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 9 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP9(x)                     (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP9_SHIFT)) & XRDC_HWCFG2_PIDP9_MASK)

#define XRDC_HWCFG2_PIDP10_MASK                  (0x400U)
#define XRDC_HWCFG2_PIDP10_SHIFT                 (10U)
/*! PIDP10 - Process identifier
 *  0b0..Bus master 10 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 10 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP10(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP10_SHIFT)) & XRDC_HWCFG2_PIDP10_MASK)

#define XRDC_HWCFG2_PIDP11_MASK                  (0x800U)
#define XRDC_HWCFG2_PIDP11_SHIFT                 (11U)
/*! PIDP11 - Process identifier
 *  0b0..Bus master 11 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 11 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP11(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP11_SHIFT)) & XRDC_HWCFG2_PIDP11_MASK)

#define XRDC_HWCFG2_PIDP12_MASK                  (0x1000U)
#define XRDC_HWCFG2_PIDP12_SHIFT                 (12U)
/*! PIDP12 - Process identifier
 *  0b0..Bus master 12 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 12 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP12(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP12_SHIFT)) & XRDC_HWCFG2_PIDP12_MASK)

#define XRDC_HWCFG2_PIDP13_MASK                  (0x2000U)
#define XRDC_HWCFG2_PIDP13_SHIFT                 (13U)
/*! PIDP13 - Process identifier
 *  0b0..Bus master 13 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 13 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP13(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP13_SHIFT)) & XRDC_HWCFG2_PIDP13_MASK)

#define XRDC_HWCFG2_PIDP14_MASK                  (0x4000U)
#define XRDC_HWCFG2_PIDP14_SHIFT                 (14U)
/*! PIDP14 - Process identifier
 *  0b0..Bus master 14 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 14 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP14(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP14_SHIFT)) & XRDC_HWCFG2_PIDP14_MASK)

#define XRDC_HWCFG2_PIDP15_MASK                  (0x8000U)
#define XRDC_HWCFG2_PIDP15_SHIFT                 (15U)
/*! PIDP15 - Process identifier
 *  0b0..Bus master 15 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 15 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP15(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP15_SHIFT)) & XRDC_HWCFG2_PIDP15_MASK)

#define XRDC_HWCFG2_PIDP16_MASK                  (0x10000U)
#define XRDC_HWCFG2_PIDP16_SHIFT                 (16U)
/*! PIDP16 - Process identifier
 *  0b0..Bus master 16 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 16 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP16(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP16_SHIFT)) & XRDC_HWCFG2_PIDP16_MASK)

#define XRDC_HWCFG2_PIDP17_MASK                  (0x20000U)
#define XRDC_HWCFG2_PIDP17_SHIFT                 (17U)
/*! PIDP17 - Process identifier
 *  0b0..Bus master 17 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 17 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP17(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP17_SHIFT)) & XRDC_HWCFG2_PIDP17_MASK)

#define XRDC_HWCFG2_PIDP18_MASK                  (0x40000U)
#define XRDC_HWCFG2_PIDP18_SHIFT                 (18U)
/*! PIDP18 - Process identifier
 *  0b0..Bus master 18 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 18 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP18(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP18_SHIFT)) & XRDC_HWCFG2_PIDP18_MASK)

#define XRDC_HWCFG2_PIDP19_MASK                  (0x80000U)
#define XRDC_HWCFG2_PIDP19_SHIFT                 (19U)
/*! PIDP19 - Process identifier
 *  0b0..Bus master 19 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 19 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP19(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP19_SHIFT)) & XRDC_HWCFG2_PIDP19_MASK)

#define XRDC_HWCFG2_PIDP20_MASK                  (0x100000U)
#define XRDC_HWCFG2_PIDP20_SHIFT                 (20U)
/*! PIDP20 - Process identifier
 *  0b0..Bus master 20 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 20 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP20(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP20_SHIFT)) & XRDC_HWCFG2_PIDP20_MASK)

#define XRDC_HWCFG2_PIDP21_MASK                  (0x200000U)
#define XRDC_HWCFG2_PIDP21_SHIFT                 (21U)
/*! PIDP21 - Process identifier
 *  0b0..Bus master 21 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 21 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP21(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP21_SHIFT)) & XRDC_HWCFG2_PIDP21_MASK)

#define XRDC_HWCFG2_PIDP22_MASK                  (0x400000U)
#define XRDC_HWCFG2_PIDP22_SHIFT                 (22U)
/*! PIDP22 - Process identifier
 *  0b0..Bus master 22 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 22 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP22(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP22_SHIFT)) & XRDC_HWCFG2_PIDP22_MASK)

#define XRDC_HWCFG2_PIDP23_MASK                  (0x800000U)
#define XRDC_HWCFG2_PIDP23_SHIFT                 (23U)
/*! PIDP23 - Process identifier
 *  0b0..Bus master 23 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 23 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP23(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP23_SHIFT)) & XRDC_HWCFG2_PIDP23_MASK)

#define XRDC_HWCFG2_PIDP24_MASK                  (0x1000000U)
#define XRDC_HWCFG2_PIDP24_SHIFT                 (24U)
/*! PIDP24 - Process identifier
 *  0b0..Bus master 24 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 24 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP24(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP24_SHIFT)) & XRDC_HWCFG2_PIDP24_MASK)

#define XRDC_HWCFG2_PIDP25_MASK                  (0x2000000U)
#define XRDC_HWCFG2_PIDP25_SHIFT                 (25U)
/*! PIDP25 - Process identifier
 *  0b0..Bus master 25 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 25 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP25(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP25_SHIFT)) & XRDC_HWCFG2_PIDP25_MASK)

#define XRDC_HWCFG2_PIDP26_MASK                  (0x4000000U)
#define XRDC_HWCFG2_PIDP26_SHIFT                 (26U)
/*! PIDP26 - Process identifier
 *  0b0..Bus master 26 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 26 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP26(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP26_SHIFT)) & XRDC_HWCFG2_PIDP26_MASK)

#define XRDC_HWCFG2_PIDP27_MASK                  (0x8000000U)
#define XRDC_HWCFG2_PIDP27_SHIFT                 (27U)
/*! PIDP27 - Process identifier
 *  0b0..Bus master 27 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 27 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP27(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP27_SHIFT)) & XRDC_HWCFG2_PIDP27_MASK)

#define XRDC_HWCFG2_PIDP28_MASK                  (0x10000000U)
#define XRDC_HWCFG2_PIDP28_SHIFT                 (28U)
/*! PIDP28 - Process identifier
 *  0b0..Bus master 28 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 28 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP28(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP28_SHIFT)) & XRDC_HWCFG2_PIDP28_MASK)

#define XRDC_HWCFG2_PIDP29_MASK                  (0x20000000U)
#define XRDC_HWCFG2_PIDP29_SHIFT                 (29U)
/*! PIDP29 - Process identifier
 *  0b0..Bus master 29 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 29 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP29(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP29_SHIFT)) & XRDC_HWCFG2_PIDP29_MASK)

#define XRDC_HWCFG2_PIDP30_MASK                  (0x40000000U)
#define XRDC_HWCFG2_PIDP30_SHIFT                 (30U)
/*! PIDP30 - Process identifier
 *  0b0..Bus master 30 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 30 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP30(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP30_SHIFT)) & XRDC_HWCFG2_PIDP30_MASK)

#define XRDC_HWCFG2_PIDP31_MASK                  (0x80000000U)
#define XRDC_HWCFG2_PIDP31_SHIFT                 (31U)
/*! PIDP31 - Process identifier
 *  0b0..Bus master 31 does not source a process identifier register. The XRDC_MDAC logic provides the needed PID for processor cores.
 *  0b1..Bus master 31 sources a process identifier register to the XRDC_MDAC logic.
 */
#define XRDC_HWCFG2_PIDP31(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG2_PIDP31_SHIFT)) & XRDC_HWCFG2_PIDP31_MASK)
/*! @} */

/*! @name HWCFG3 - Hardware Configuration Register 3 */
/*! @{ */

#define XRDC_HWCFG3_PIDPn_MASK                   (0xFFFFFFFFU)
#define XRDC_HWCFG3_PIDPn_SHIFT                  (0U)
/*! PIDPn - Process identifier */
#define XRDC_HWCFG3_PIDPn(x)                     (((uint32_t)(((uint32_t)(x)) << XRDC_HWCFG3_PIDPn_SHIFT)) & XRDC_HWCFG3_PIDPn_MASK)
/*! @} */

/*! @name MDACFG - Master Domain Assignment Configuration Register */
/*! @{ */

#define XRDC_MDACFG_NMDAR_MASK                   (0xFU)
#define XRDC_MDACFG_NMDAR_SHIFT                  (0U)
/*! NMDAR - Number of master domain assignment registers for bus master m */
#define XRDC_MDACFG_NMDAR(x)                     (((uint8_t)(((uint8_t)(x)) << XRDC_MDACFG_NMDAR_SHIFT)) & XRDC_MDACFG_NMDAR_MASK)

#define XRDC_MDACFG_NCM_MASK                     (0x80U)
#define XRDC_MDACFG_NCM_SHIFT                    (7U)
/*! NCM - Non-CPU Master
 *  0b0..Bus master is a processor.
 *  0b1..Bus master is a non-processor.
 */
#define XRDC_MDACFG_NCM(x)                       (((uint8_t)(((uint8_t)(x)) << XRDC_MDACFG_NCM_SHIFT)) & XRDC_MDACFG_NCM_MASK)
/*! @} */

/*! @name MRCFG - Memory Region Configuration Register */
/*! @{ */

#define XRDC_MRCFG_NMRGD_MASK                    (0x1FU)
#define XRDC_MRCFG_NMRGD_SHIFT                   (0U)
/*! NMRGD - Number of memory region descriptors for memory region controller n */
#define XRDC_MRCFG_NMRGD(x)                      (((uint8_t)(((uint8_t)(x)) << XRDC_MRCFG_NMRGD_SHIFT)) & XRDC_MRCFG_NMRGD_MASK)
/*! @} */

/* The count of XRDC_MRCFG */
#define XRDC_MRCFG_COUNT                         (13U)

/*! @name FDID - Fault Domain ID */
/*! @{ */

#define XRDC_FDID_FDID_MASK                      (0xFU)
#define XRDC_FDID_FDID_SHIFT                     (0U)
/*! FDID - Domain ID of Faulted Access */
#define XRDC_FDID_FDID(x)                        (((uint32_t)(((uint32_t)(x)) << XRDC_FDID_FDID_SHIFT)) & XRDC_FDID_FDID_MASK)
/*! @} */

/*! @name DERRLOC - Domain Error Location Register */
/*! @{ */

#define XRDC_DERRLOC_MRCINST_MASK                (0xFFFFU)
#define XRDC_DERRLOC_MRCINST_SHIFT               (0U)
/*! MRCINST - MRC instance */
#define XRDC_DERRLOC_MRCINST(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERRLOC_MRCINST_SHIFT)) & XRDC_DERRLOC_MRCINST_MASK)

#define XRDC_DERRLOC_PACINST_MASK                (0xF0000U)
#define XRDC_DERRLOC_PACINST_SHIFT               (16U)
/*! PACINST - PAC instance */
#define XRDC_DERRLOC_PACINST(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERRLOC_PACINST_SHIFT)) & XRDC_DERRLOC_PACINST_MASK)

#define XRDC_DERRLOC_MSCINST_MASK                (0xF00000U)
#define XRDC_DERRLOC_MSCINST_SHIFT               (20U)
/*! MSCINST - MSC instance */
#define XRDC_DERRLOC_MSCINST(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERRLOC_MSCINST_SHIFT)) & XRDC_DERRLOC_MSCINST_MASK)
/*! @} */

/*! @name DERR_W0_0 - Domain Error Word0 Register */
/*! @{ */

#define XRDC_DERR_W0_0_EADDR_MASK                (0xFFFFFFFFU)
#define XRDC_DERR_W0_0_EADDR_SHIFT               (0U)
/*! EADDR - Error address */
#define XRDC_DERR_W0_0_EADDR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W0_0_EADDR_SHIFT)) & XRDC_DERR_W0_0_EADDR_MASK)
/*! @} */

/*! @name DERR_W1_0 - Domain Error Word1 Register */
/*! @{ */

#define XRDC_DERR_W1_0_EDID_MASK                 (0xFU)
#define XRDC_DERR_W1_0_EDID_SHIFT                (0U)
/*! EDID - Error domain identifier */
#define XRDC_DERR_W1_0_EDID(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_0_EDID_SHIFT)) & XRDC_DERR_W1_0_EDID_MASK)

#define XRDC_DERR_W1_0_EATR_MASK                 (0x700U)
#define XRDC_DERR_W1_0_EATR_SHIFT                (8U)
/*! EATR - Error attributes
 *  0b000..Secure user mode, instruction fetch access.
 *  0b001..Secure user mode, data access.
 *  0b010..Secure privileged mode, instruction fetch access.
 *  0b011..Secure privileged mode, data access.
 *  0b100..Nonsecure user mode, instruction fetch access.
 *  0b101..Nonsecure user mode, data access.
 *  0b110..Nonsecure privileged mode, instruction fetch access.
 *  0b111..Nonsecure privileged mode, data access.
 */
#define XRDC_DERR_W1_0_EATR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_0_EATR_SHIFT)) & XRDC_DERR_W1_0_EATR_MASK)

#define XRDC_DERR_W1_0_ERW_MASK                  (0x800U)
#define XRDC_DERR_W1_0_ERW_SHIFT                 (11U)
/*! ERW - Error read/write
 *  0b0..Read access
 *  0b1..Write access
 */
#define XRDC_DERR_W1_0_ERW(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_0_ERW_SHIFT)) & XRDC_DERR_W1_0_ERW_MASK)

#define XRDC_DERR_W1_0_EPORT_MASK                (0x7000000U)
#define XRDC_DERR_W1_0_EPORT_SHIFT               (24U)
/*! EPORT - Error port */
#define XRDC_DERR_W1_0_EPORT(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_0_EPORT_SHIFT)) & XRDC_DERR_W1_0_EPORT_MASK)

#define XRDC_DERR_W1_0_EST_MASK                  (0xC0000000U)
#define XRDC_DERR_W1_0_EST_SHIFT                 (30U)
/*! EST - Error state
 *  0b00..No access violation has been detected.
 *  0b01..No access violation has been detected.
 *  0b10..A single access violation has been detected.
 *  0b11..Multiple access violations for this domain have been detected by this submodule instance. Only the
 *        address and attribute information for the first error have been captured in DERR_W0_i and DERR_W1_i.
 */
#define XRDC_DERR_W1_0_EST(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_0_EST_SHIFT)) & XRDC_DERR_W1_0_EST_MASK)
/*! @} */

/*! @name DERR_W3_0 - Domain Error Word3 Register */
/*! @{ */

#define XRDC_DERR_W3_0_RECR_MASK                 (0xC0000000U)
#define XRDC_DERR_W3_0_RECR_SHIFT                (30U)
/*! RECR - Rearm Error Capture Registers */
#define XRDC_DERR_W3_0_RECR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W3_0_RECR_SHIFT)) & XRDC_DERR_W3_0_RECR_MASK)
/*! @} */

/*! @name DERR_W0_1 - Domain Error Word0 Register */
/*! @{ */

#define XRDC_DERR_W0_1_EADDR_MASK                (0xFFFFFFFFU)
#define XRDC_DERR_W0_1_EADDR_SHIFT               (0U)
/*! EADDR - Error address */
#define XRDC_DERR_W0_1_EADDR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W0_1_EADDR_SHIFT)) & XRDC_DERR_W0_1_EADDR_MASK)
/*! @} */

/*! @name DERR_W1_1 - Domain Error Word1 Register */
/*! @{ */

#define XRDC_DERR_W1_1_EDID_MASK                 (0xFU)
#define XRDC_DERR_W1_1_EDID_SHIFT                (0U)
/*! EDID - Error domain identifier */
#define XRDC_DERR_W1_1_EDID(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_1_EDID_SHIFT)) & XRDC_DERR_W1_1_EDID_MASK)

#define XRDC_DERR_W1_1_EATR_MASK                 (0x700U)
#define XRDC_DERR_W1_1_EATR_SHIFT                (8U)
/*! EATR - Error attributes
 *  0b000..Secure user mode, instruction fetch access.
 *  0b001..Secure user mode, data access.
 *  0b010..Secure privileged mode, instruction fetch access.
 *  0b011..Secure privileged mode, data access.
 *  0b100..Nonsecure user mode, instruction fetch access.
 *  0b101..Nonsecure user mode, data access.
 *  0b110..Nonsecure privileged mode, instruction fetch access.
 *  0b111..Nonsecure privileged mode, data access.
 */
#define XRDC_DERR_W1_1_EATR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_1_EATR_SHIFT)) & XRDC_DERR_W1_1_EATR_MASK)

#define XRDC_DERR_W1_1_ERW_MASK                  (0x800U)
#define XRDC_DERR_W1_1_ERW_SHIFT                 (11U)
/*! ERW - Error read/write
 *  0b0..Read access
 *  0b1..Write access
 */
#define XRDC_DERR_W1_1_ERW(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_1_ERW_SHIFT)) & XRDC_DERR_W1_1_ERW_MASK)

#define XRDC_DERR_W1_1_EPORT_MASK                (0x7000000U)
#define XRDC_DERR_W1_1_EPORT_SHIFT               (24U)
/*! EPORT - Error port */
#define XRDC_DERR_W1_1_EPORT(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_1_EPORT_SHIFT)) & XRDC_DERR_W1_1_EPORT_MASK)

#define XRDC_DERR_W1_1_EST_MASK                  (0xC0000000U)
#define XRDC_DERR_W1_1_EST_SHIFT                 (30U)
/*! EST - Error state
 *  0b00..No access violation has been detected.
 *  0b01..No access violation has been detected.
 *  0b10..A single access violation has been detected.
 *  0b11..Multiple access violations for this domain have been detected by this submodule instance. Only the
 *        address and attribute information for the first error have been captured in DERR_W0_i and DERR_W1_i.
 */
#define XRDC_DERR_W1_1_EST(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_1_EST_SHIFT)) & XRDC_DERR_W1_1_EST_MASK)
/*! @} */

/*! @name DERR_W3_1 - Domain Error Word3 Register */
/*! @{ */

#define XRDC_DERR_W3_1_RECR_MASK                 (0xC0000000U)
#define XRDC_DERR_W3_1_RECR_SHIFT                (30U)
/*! RECR - Rearm Error Capture Registers */
#define XRDC_DERR_W3_1_RECR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W3_1_RECR_SHIFT)) & XRDC_DERR_W3_1_RECR_MASK)
/*! @} */

/*! @name DERR_W0_2 - Domain Error Word0 Register */
/*! @{ */

#define XRDC_DERR_W0_2_EADDR_MASK                (0xFFFFFFFFU)
#define XRDC_DERR_W0_2_EADDR_SHIFT               (0U)
/*! EADDR - Error address */
#define XRDC_DERR_W0_2_EADDR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W0_2_EADDR_SHIFT)) & XRDC_DERR_W0_2_EADDR_MASK)
/*! @} */

/*! @name DERR_W1_2 - Domain Error Word1 Register */
/*! @{ */

#define XRDC_DERR_W1_2_EDID_MASK                 (0xFU)
#define XRDC_DERR_W1_2_EDID_SHIFT                (0U)
/*! EDID - Error domain identifier */
#define XRDC_DERR_W1_2_EDID(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_2_EDID_SHIFT)) & XRDC_DERR_W1_2_EDID_MASK)

#define XRDC_DERR_W1_2_EATR_MASK                 (0x700U)
#define XRDC_DERR_W1_2_EATR_SHIFT                (8U)
/*! EATR - Error attributes
 *  0b000..Secure user mode, instruction fetch access.
 *  0b001..Secure user mode, data access.
 *  0b010..Secure privileged mode, instruction fetch access.
 *  0b011..Secure privileged mode, data access.
 *  0b100..Nonsecure user mode, instruction fetch access.
 *  0b101..Nonsecure user mode, data access.
 *  0b110..Nonsecure privileged mode, instruction fetch access.
 *  0b111..Nonsecure privileged mode, data access.
 */
#define XRDC_DERR_W1_2_EATR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_2_EATR_SHIFT)) & XRDC_DERR_W1_2_EATR_MASK)

#define XRDC_DERR_W1_2_ERW_MASK                  (0x800U)
#define XRDC_DERR_W1_2_ERW_SHIFT                 (11U)
/*! ERW - Error read/write
 *  0b0..Read access
 *  0b1..Write access
 */
#define XRDC_DERR_W1_2_ERW(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_2_ERW_SHIFT)) & XRDC_DERR_W1_2_ERW_MASK)

#define XRDC_DERR_W1_2_EPORT_MASK                (0x7000000U)
#define XRDC_DERR_W1_2_EPORT_SHIFT               (24U)
/*! EPORT - Error port */
#define XRDC_DERR_W1_2_EPORT(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_2_EPORT_SHIFT)) & XRDC_DERR_W1_2_EPORT_MASK)

#define XRDC_DERR_W1_2_EST_MASK                  (0xC0000000U)
#define XRDC_DERR_W1_2_EST_SHIFT                 (30U)
/*! EST - Error state
 *  0b00..No access violation has been detected.
 *  0b01..No access violation has been detected.
 *  0b10..A single access violation has been detected.
 *  0b11..Multiple access violations for this domain have been detected by this submodule instance. Only the
 *        address and attribute information for the first error have been captured in DERR_W0_i and DERR_W1_i.
 */
#define XRDC_DERR_W1_2_EST(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_2_EST_SHIFT)) & XRDC_DERR_W1_2_EST_MASK)
/*! @} */

/*! @name DERR_W3_2 - Domain Error Word3 Register */
/*! @{ */

#define XRDC_DERR_W3_2_RECR_MASK                 (0xC0000000U)
#define XRDC_DERR_W3_2_RECR_SHIFT                (30U)
/*! RECR - Rearm Error Capture Registers */
#define XRDC_DERR_W3_2_RECR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W3_2_RECR_SHIFT)) & XRDC_DERR_W3_2_RECR_MASK)
/*! @} */

/*! @name DERR_W0_3 - Domain Error Word0 Register */
/*! @{ */

#define XRDC_DERR_W0_3_EADDR_MASK                (0xFFFFFFFFU)
#define XRDC_DERR_W0_3_EADDR_SHIFT               (0U)
/*! EADDR - Error address */
#define XRDC_DERR_W0_3_EADDR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W0_3_EADDR_SHIFT)) & XRDC_DERR_W0_3_EADDR_MASK)
/*! @} */

/*! @name DERR_W1_3 - Domain Error Word1 Register */
/*! @{ */

#define XRDC_DERR_W1_3_EDID_MASK                 (0xFU)
#define XRDC_DERR_W1_3_EDID_SHIFT                (0U)
/*! EDID - Error domain identifier */
#define XRDC_DERR_W1_3_EDID(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_3_EDID_SHIFT)) & XRDC_DERR_W1_3_EDID_MASK)

#define XRDC_DERR_W1_3_EATR_MASK                 (0x700U)
#define XRDC_DERR_W1_3_EATR_SHIFT                (8U)
/*! EATR - Error attributes
 *  0b000..Secure user mode, instruction fetch access.
 *  0b001..Secure user mode, data access.
 *  0b010..Secure privileged mode, instruction fetch access.
 *  0b011..Secure privileged mode, data access.
 *  0b100..Nonsecure user mode, instruction fetch access.
 *  0b101..Nonsecure user mode, data access.
 *  0b110..Nonsecure privileged mode, instruction fetch access.
 *  0b111..Nonsecure privileged mode, data access.
 */
#define XRDC_DERR_W1_3_EATR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_3_EATR_SHIFT)) & XRDC_DERR_W1_3_EATR_MASK)

#define XRDC_DERR_W1_3_ERW_MASK                  (0x800U)
#define XRDC_DERR_W1_3_ERW_SHIFT                 (11U)
/*! ERW - Error read/write
 *  0b0..Read access
 *  0b1..Write access
 */
#define XRDC_DERR_W1_3_ERW(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_3_ERW_SHIFT)) & XRDC_DERR_W1_3_ERW_MASK)

#define XRDC_DERR_W1_3_EPORT_MASK                (0x7000000U)
#define XRDC_DERR_W1_3_EPORT_SHIFT               (24U)
/*! EPORT - Error port */
#define XRDC_DERR_W1_3_EPORT(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_3_EPORT_SHIFT)) & XRDC_DERR_W1_3_EPORT_MASK)

#define XRDC_DERR_W1_3_EST_MASK                  (0xC0000000U)
#define XRDC_DERR_W1_3_EST_SHIFT                 (30U)
/*! EST - Error state
 *  0b00..No access violation has been detected.
 *  0b01..No access violation has been detected.
 *  0b10..A single access violation has been detected.
 *  0b11..Multiple access violations for this domain have been detected by this submodule instance. Only the
 *        address and attribute information for the first error have been captured in DERR_W0_i and DERR_W1_i.
 */
#define XRDC_DERR_W1_3_EST(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_3_EST_SHIFT)) & XRDC_DERR_W1_3_EST_MASK)
/*! @} */

/*! @name DERR_W3_3 - Domain Error Word3 Register */
/*! @{ */

#define XRDC_DERR_W3_3_RECR_MASK                 (0xC0000000U)
#define XRDC_DERR_W3_3_RECR_SHIFT                (30U)
/*! RECR - Rearm Error Capture Registers */
#define XRDC_DERR_W3_3_RECR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W3_3_RECR_SHIFT)) & XRDC_DERR_W3_3_RECR_MASK)
/*! @} */

/*! @name DERR_W0_4 - Domain Error Word0 Register */
/*! @{ */

#define XRDC_DERR_W0_4_EADDR_MASK                (0xFFFFFFFFU)
#define XRDC_DERR_W0_4_EADDR_SHIFT               (0U)
/*! EADDR - Error address */
#define XRDC_DERR_W0_4_EADDR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W0_4_EADDR_SHIFT)) & XRDC_DERR_W0_4_EADDR_MASK)
/*! @} */

/*! @name DERR_W1_4 - Domain Error Word1 Register */
/*! @{ */

#define XRDC_DERR_W1_4_EDID_MASK                 (0xFU)
#define XRDC_DERR_W1_4_EDID_SHIFT                (0U)
/*! EDID - Error domain identifier */
#define XRDC_DERR_W1_4_EDID(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_4_EDID_SHIFT)) & XRDC_DERR_W1_4_EDID_MASK)

#define XRDC_DERR_W1_4_EATR_MASK                 (0x700U)
#define XRDC_DERR_W1_4_EATR_SHIFT                (8U)
/*! EATR - Error attributes
 *  0b000..Secure user mode, instruction fetch access.
 *  0b001..Secure user mode, data access.
 *  0b010..Secure privileged mode, instruction fetch access.
 *  0b011..Secure privileged mode, data access.
 *  0b100..Nonsecure user mode, instruction fetch access.
 *  0b101..Nonsecure user mode, data access.
 *  0b110..Nonsecure privileged mode, instruction fetch access.
 *  0b111..Nonsecure privileged mode, data access.
 */
#define XRDC_DERR_W1_4_EATR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_4_EATR_SHIFT)) & XRDC_DERR_W1_4_EATR_MASK)

#define XRDC_DERR_W1_4_ERW_MASK                  (0x800U)
#define XRDC_DERR_W1_4_ERW_SHIFT                 (11U)
/*! ERW - Error read/write
 *  0b0..Read access
 *  0b1..Write access
 */
#define XRDC_DERR_W1_4_ERW(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_4_ERW_SHIFT)) & XRDC_DERR_W1_4_ERW_MASK)

#define XRDC_DERR_W1_4_EPORT_MASK                (0x7000000U)
#define XRDC_DERR_W1_4_EPORT_SHIFT               (24U)
/*! EPORT - Error port */
#define XRDC_DERR_W1_4_EPORT(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_4_EPORT_SHIFT)) & XRDC_DERR_W1_4_EPORT_MASK)

#define XRDC_DERR_W1_4_EST_MASK                  (0xC0000000U)
#define XRDC_DERR_W1_4_EST_SHIFT                 (30U)
/*! EST - Error state
 *  0b00..No access violation has been detected.
 *  0b01..No access violation has been detected.
 *  0b10..A single access violation has been detected.
 *  0b11..Multiple access violations for this domain have been detected by this submodule instance. Only the
 *        address and attribute information for the first error have been captured in DERR_W0_i and DERR_W1_i.
 */
#define XRDC_DERR_W1_4_EST(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_4_EST_SHIFT)) & XRDC_DERR_W1_4_EST_MASK)
/*! @} */

/*! @name DERR_W3_4 - Domain Error Word3 Register */
/*! @{ */

#define XRDC_DERR_W3_4_RECR_MASK                 (0xC0000000U)
#define XRDC_DERR_W3_4_RECR_SHIFT                (30U)
/*! RECR - Rearm Error Capture Registers */
#define XRDC_DERR_W3_4_RECR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W3_4_RECR_SHIFT)) & XRDC_DERR_W3_4_RECR_MASK)
/*! @} */

/*! @name DERR_W0_5 - Domain Error Word0 Register */
/*! @{ */

#define XRDC_DERR_W0_5_EADDR_MASK                (0xFFFFFFFFU)
#define XRDC_DERR_W0_5_EADDR_SHIFT               (0U)
/*! EADDR - Error address */
#define XRDC_DERR_W0_5_EADDR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W0_5_EADDR_SHIFT)) & XRDC_DERR_W0_5_EADDR_MASK)
/*! @} */

/*! @name DERR_W1_5 - Domain Error Word1 Register */
/*! @{ */

#define XRDC_DERR_W1_5_EDID_MASK                 (0xFU)
#define XRDC_DERR_W1_5_EDID_SHIFT                (0U)
/*! EDID - Error domain identifier */
#define XRDC_DERR_W1_5_EDID(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_5_EDID_SHIFT)) & XRDC_DERR_W1_5_EDID_MASK)

#define XRDC_DERR_W1_5_EATR_MASK                 (0x700U)
#define XRDC_DERR_W1_5_EATR_SHIFT                (8U)
/*! EATR - Error attributes
 *  0b000..Secure user mode, instruction fetch access.
 *  0b001..Secure user mode, data access.
 *  0b010..Secure privileged mode, instruction fetch access.
 *  0b011..Secure privileged mode, data access.
 *  0b100..Nonsecure user mode, instruction fetch access.
 *  0b101..Nonsecure user mode, data access.
 *  0b110..Nonsecure privileged mode, instruction fetch access.
 *  0b111..Nonsecure privileged mode, data access.
 */
#define XRDC_DERR_W1_5_EATR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_5_EATR_SHIFT)) & XRDC_DERR_W1_5_EATR_MASK)

#define XRDC_DERR_W1_5_ERW_MASK                  (0x800U)
#define XRDC_DERR_W1_5_ERW_SHIFT                 (11U)
/*! ERW - Error read/write
 *  0b0..Read access
 *  0b1..Write access
 */
#define XRDC_DERR_W1_5_ERW(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_5_ERW_SHIFT)) & XRDC_DERR_W1_5_ERW_MASK)

#define XRDC_DERR_W1_5_EPORT_MASK                (0x7000000U)
#define XRDC_DERR_W1_5_EPORT_SHIFT               (24U)
/*! EPORT - Error port */
#define XRDC_DERR_W1_5_EPORT(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_5_EPORT_SHIFT)) & XRDC_DERR_W1_5_EPORT_MASK)

#define XRDC_DERR_W1_5_EST_MASK                  (0xC0000000U)
#define XRDC_DERR_W1_5_EST_SHIFT                 (30U)
/*! EST - Error state
 *  0b00..No access violation has been detected.
 *  0b01..No access violation has been detected.
 *  0b10..A single access violation has been detected.
 *  0b11..Multiple access violations for this domain have been detected by this submodule instance. Only the
 *        address and attribute information for the first error have been captured in DERR_W0_i and DERR_W1_i.
 */
#define XRDC_DERR_W1_5_EST(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_5_EST_SHIFT)) & XRDC_DERR_W1_5_EST_MASK)
/*! @} */

/*! @name DERR_W3_5 - Domain Error Word3 Register */
/*! @{ */

#define XRDC_DERR_W3_5_RECR_MASK                 (0xC0000000U)
#define XRDC_DERR_W3_5_RECR_SHIFT                (30U)
/*! RECR - Rearm Error Capture Registers */
#define XRDC_DERR_W3_5_RECR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W3_5_RECR_SHIFT)) & XRDC_DERR_W3_5_RECR_MASK)
/*! @} */

/*! @name DERR_W0_6 - Domain Error Word0 Register */
/*! @{ */

#define XRDC_DERR_W0_6_EADDR_MASK                (0xFFFFFFFFU)
#define XRDC_DERR_W0_6_EADDR_SHIFT               (0U)
/*! EADDR - Error address */
#define XRDC_DERR_W0_6_EADDR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W0_6_EADDR_SHIFT)) & XRDC_DERR_W0_6_EADDR_MASK)
/*! @} */

/*! @name DERR_W1_6 - Domain Error Word1 Register */
/*! @{ */

#define XRDC_DERR_W1_6_EDID_MASK                 (0xFU)
#define XRDC_DERR_W1_6_EDID_SHIFT                (0U)
/*! EDID - Error domain identifier */
#define XRDC_DERR_W1_6_EDID(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_6_EDID_SHIFT)) & XRDC_DERR_W1_6_EDID_MASK)

#define XRDC_DERR_W1_6_EATR_MASK                 (0x700U)
#define XRDC_DERR_W1_6_EATR_SHIFT                (8U)
/*! EATR - Error attributes
 *  0b000..Secure user mode, instruction fetch access.
 *  0b001..Secure user mode, data access.
 *  0b010..Secure privileged mode, instruction fetch access.
 *  0b011..Secure privileged mode, data access.
 *  0b100..Nonsecure user mode, instruction fetch access.
 *  0b101..Nonsecure user mode, data access.
 *  0b110..Nonsecure privileged mode, instruction fetch access.
 *  0b111..Nonsecure privileged mode, data access.
 */
#define XRDC_DERR_W1_6_EATR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_6_EATR_SHIFT)) & XRDC_DERR_W1_6_EATR_MASK)

#define XRDC_DERR_W1_6_ERW_MASK                  (0x800U)
#define XRDC_DERR_W1_6_ERW_SHIFT                 (11U)
/*! ERW - Error read/write
 *  0b0..Read access
 *  0b1..Write access
 */
#define XRDC_DERR_W1_6_ERW(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_6_ERW_SHIFT)) & XRDC_DERR_W1_6_ERW_MASK)

#define XRDC_DERR_W1_6_EPORT_MASK                (0x7000000U)
#define XRDC_DERR_W1_6_EPORT_SHIFT               (24U)
/*! EPORT - Error port */
#define XRDC_DERR_W1_6_EPORT(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_6_EPORT_SHIFT)) & XRDC_DERR_W1_6_EPORT_MASK)

#define XRDC_DERR_W1_6_EST_MASK                  (0xC0000000U)
#define XRDC_DERR_W1_6_EST_SHIFT                 (30U)
/*! EST - Error state
 *  0b00..No access violation has been detected.
 *  0b01..No access violation has been detected.
 *  0b10..A single access violation has been detected.
 *  0b11..Multiple access violations for this domain have been detected by this submodule instance. Only the
 *        address and attribute information for the first error have been captured in DERR_W0_i and DERR_W1_i.
 */
#define XRDC_DERR_W1_6_EST(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_6_EST_SHIFT)) & XRDC_DERR_W1_6_EST_MASK)
/*! @} */

/*! @name DERR_W3_6 - Domain Error Word3 Register */
/*! @{ */

#define XRDC_DERR_W3_6_RECR_MASK                 (0xC0000000U)
#define XRDC_DERR_W3_6_RECR_SHIFT                (30U)
/*! RECR - Rearm Error Capture Registers */
#define XRDC_DERR_W3_6_RECR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W3_6_RECR_SHIFT)) & XRDC_DERR_W3_6_RECR_MASK)
/*! @} */

/*! @name DERR_W0_7 - Domain Error Word0 Register */
/*! @{ */

#define XRDC_DERR_W0_7_EADDR_MASK                (0xFFFFFFFFU)
#define XRDC_DERR_W0_7_EADDR_SHIFT               (0U)
/*! EADDR - Error address */
#define XRDC_DERR_W0_7_EADDR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W0_7_EADDR_SHIFT)) & XRDC_DERR_W0_7_EADDR_MASK)
/*! @} */

/*! @name DERR_W1_7 - Domain Error Word1 Register */
/*! @{ */

#define XRDC_DERR_W1_7_EDID_MASK                 (0xFU)
#define XRDC_DERR_W1_7_EDID_SHIFT                (0U)
/*! EDID - Error domain identifier */
#define XRDC_DERR_W1_7_EDID(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_7_EDID_SHIFT)) & XRDC_DERR_W1_7_EDID_MASK)

#define XRDC_DERR_W1_7_EATR_MASK                 (0x700U)
#define XRDC_DERR_W1_7_EATR_SHIFT                (8U)
/*! EATR - Error attributes
 *  0b000..Secure user mode, instruction fetch access.
 *  0b001..Secure user mode, data access.
 *  0b010..Secure privileged mode, instruction fetch access.
 *  0b011..Secure privileged mode, data access.
 *  0b100..Nonsecure user mode, instruction fetch access.
 *  0b101..Nonsecure user mode, data access.
 *  0b110..Nonsecure privileged mode, instruction fetch access.
 *  0b111..Nonsecure privileged mode, data access.
 */
#define XRDC_DERR_W1_7_EATR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_7_EATR_SHIFT)) & XRDC_DERR_W1_7_EATR_MASK)

#define XRDC_DERR_W1_7_ERW_MASK                  (0x800U)
#define XRDC_DERR_W1_7_ERW_SHIFT                 (11U)
/*! ERW - Error read/write
 *  0b0..Read access
 *  0b1..Write access
 */
#define XRDC_DERR_W1_7_ERW(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_7_ERW_SHIFT)) & XRDC_DERR_W1_7_ERW_MASK)

#define XRDC_DERR_W1_7_EPORT_MASK                (0x7000000U)
#define XRDC_DERR_W1_7_EPORT_SHIFT               (24U)
/*! EPORT - Error port */
#define XRDC_DERR_W1_7_EPORT(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_7_EPORT_SHIFT)) & XRDC_DERR_W1_7_EPORT_MASK)

#define XRDC_DERR_W1_7_EST_MASK                  (0xC0000000U)
#define XRDC_DERR_W1_7_EST_SHIFT                 (30U)
/*! EST - Error state
 *  0b00..No access violation has been detected.
 *  0b01..No access violation has been detected.
 *  0b10..A single access violation has been detected.
 *  0b11..Multiple access violations for this domain have been detected by this submodule instance. Only the
 *        address and attribute information for the first error have been captured in DERR_W0_i and DERR_W1_i.
 */
#define XRDC_DERR_W1_7_EST(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_7_EST_SHIFT)) & XRDC_DERR_W1_7_EST_MASK)
/*! @} */

/*! @name DERR_W3_7 - Domain Error Word3 Register */
/*! @{ */

#define XRDC_DERR_W3_7_RECR_MASK                 (0xC0000000U)
#define XRDC_DERR_W3_7_RECR_SHIFT                (30U)
/*! RECR - Rearm Error Capture Registers */
#define XRDC_DERR_W3_7_RECR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W3_7_RECR_SHIFT)) & XRDC_DERR_W3_7_RECR_MASK)
/*! @} */

/*! @name DERR_W0_8 - Domain Error Word0 Register */
/*! @{ */

#define XRDC_DERR_W0_8_EADDR_MASK                (0xFFFFFFFFU)
#define XRDC_DERR_W0_8_EADDR_SHIFT               (0U)
/*! EADDR - Error address */
#define XRDC_DERR_W0_8_EADDR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W0_8_EADDR_SHIFT)) & XRDC_DERR_W0_8_EADDR_MASK)
/*! @} */

/*! @name DERR_W1_8 - Domain Error Word1 Register */
/*! @{ */

#define XRDC_DERR_W1_8_EDID_MASK                 (0xFU)
#define XRDC_DERR_W1_8_EDID_SHIFT                (0U)
/*! EDID - Error domain identifier */
#define XRDC_DERR_W1_8_EDID(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_8_EDID_SHIFT)) & XRDC_DERR_W1_8_EDID_MASK)

#define XRDC_DERR_W1_8_EATR_MASK                 (0x700U)
#define XRDC_DERR_W1_8_EATR_SHIFT                (8U)
/*! EATR - Error attributes
 *  0b000..Secure user mode, instruction fetch access.
 *  0b001..Secure user mode, data access.
 *  0b010..Secure privileged mode, instruction fetch access.
 *  0b011..Secure privileged mode, data access.
 *  0b100..Nonsecure user mode, instruction fetch access.
 *  0b101..Nonsecure user mode, data access.
 *  0b110..Nonsecure privileged mode, instruction fetch access.
 *  0b111..Nonsecure privileged mode, data access.
 */
#define XRDC_DERR_W1_8_EATR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_8_EATR_SHIFT)) & XRDC_DERR_W1_8_EATR_MASK)

#define XRDC_DERR_W1_8_ERW_MASK                  (0x800U)
#define XRDC_DERR_W1_8_ERW_SHIFT                 (11U)
/*! ERW - Error read/write
 *  0b0..Read access
 *  0b1..Write access
 */
#define XRDC_DERR_W1_8_ERW(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_8_ERW_SHIFT)) & XRDC_DERR_W1_8_ERW_MASK)

#define XRDC_DERR_W1_8_EPORT_MASK                (0x7000000U)
#define XRDC_DERR_W1_8_EPORT_SHIFT               (24U)
/*! EPORT - Error port */
#define XRDC_DERR_W1_8_EPORT(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_8_EPORT_SHIFT)) & XRDC_DERR_W1_8_EPORT_MASK)

#define XRDC_DERR_W1_8_EST_MASK                  (0xC0000000U)
#define XRDC_DERR_W1_8_EST_SHIFT                 (30U)
/*! EST - Error state
 *  0b00..No access violation has been detected.
 *  0b01..No access violation has been detected.
 *  0b10..A single access violation has been detected.
 *  0b11..Multiple access violations for this domain have been detected by this submodule instance. Only the
 *        address and attribute information for the first error have been captured in DERR_W0_i and DERR_W1_i.
 */
#define XRDC_DERR_W1_8_EST(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_8_EST_SHIFT)) & XRDC_DERR_W1_8_EST_MASK)
/*! @} */

/*! @name DERR_W3_8 - Domain Error Word3 Register */
/*! @{ */

#define XRDC_DERR_W3_8_RECR_MASK                 (0xC0000000U)
#define XRDC_DERR_W3_8_RECR_SHIFT                (30U)
/*! RECR - Rearm Error Capture Registers */
#define XRDC_DERR_W3_8_RECR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W3_8_RECR_SHIFT)) & XRDC_DERR_W3_8_RECR_MASK)
/*! @} */

/*! @name DERR_W0_9 - Domain Error Word0 Register */
/*! @{ */

#define XRDC_DERR_W0_9_EADDR_MASK                (0xFFFFFFFFU)
#define XRDC_DERR_W0_9_EADDR_SHIFT               (0U)
/*! EADDR - Error address */
#define XRDC_DERR_W0_9_EADDR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W0_9_EADDR_SHIFT)) & XRDC_DERR_W0_9_EADDR_MASK)
/*! @} */

/*! @name DERR_W1_9 - Domain Error Word1 Register */
/*! @{ */

#define XRDC_DERR_W1_9_EDID_MASK                 (0xFU)
#define XRDC_DERR_W1_9_EDID_SHIFT                (0U)
/*! EDID - Error domain identifier */
#define XRDC_DERR_W1_9_EDID(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_9_EDID_SHIFT)) & XRDC_DERR_W1_9_EDID_MASK)

#define XRDC_DERR_W1_9_EATR_MASK                 (0x700U)
#define XRDC_DERR_W1_9_EATR_SHIFT                (8U)
/*! EATR - Error attributes
 *  0b000..Secure user mode, instruction fetch access.
 *  0b001..Secure user mode, data access.
 *  0b010..Secure privileged mode, instruction fetch access.
 *  0b011..Secure privileged mode, data access.
 *  0b100..Nonsecure user mode, instruction fetch access.
 *  0b101..Nonsecure user mode, data access.
 *  0b110..Nonsecure privileged mode, instruction fetch access.
 *  0b111..Nonsecure privileged mode, data access.
 */
#define XRDC_DERR_W1_9_EATR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_9_EATR_SHIFT)) & XRDC_DERR_W1_9_EATR_MASK)

#define XRDC_DERR_W1_9_ERW_MASK                  (0x800U)
#define XRDC_DERR_W1_9_ERW_SHIFT                 (11U)
/*! ERW - Error read/write
 *  0b0..Read access
 *  0b1..Write access
 */
#define XRDC_DERR_W1_9_ERW(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_9_ERW_SHIFT)) & XRDC_DERR_W1_9_ERW_MASK)

#define XRDC_DERR_W1_9_EPORT_MASK                (0x7000000U)
#define XRDC_DERR_W1_9_EPORT_SHIFT               (24U)
/*! EPORT - Error port */
#define XRDC_DERR_W1_9_EPORT(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_9_EPORT_SHIFT)) & XRDC_DERR_W1_9_EPORT_MASK)

#define XRDC_DERR_W1_9_EST_MASK                  (0xC0000000U)
#define XRDC_DERR_W1_9_EST_SHIFT                 (30U)
/*! EST - Error state
 *  0b00..No access violation has been detected.
 *  0b01..No access violation has been detected.
 *  0b10..A single access violation has been detected.
 *  0b11..Multiple access violations for this domain have been detected by this submodule instance. Only the
 *        address and attribute information for the first error have been captured in DERR_W0_i and DERR_W1_i.
 */
#define XRDC_DERR_W1_9_EST(x)                    (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_9_EST_SHIFT)) & XRDC_DERR_W1_9_EST_MASK)
/*! @} */

/*! @name DERR_W3_9 - Domain Error Word3 Register */
/*! @{ */

#define XRDC_DERR_W3_9_RECR_MASK                 (0xC0000000U)
#define XRDC_DERR_W3_9_RECR_SHIFT                (30U)
/*! RECR - Rearm Error Capture Registers */
#define XRDC_DERR_W3_9_RECR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W3_9_RECR_SHIFT)) & XRDC_DERR_W3_9_RECR_MASK)
/*! @} */

/*! @name DERR_W0_10 - Domain Error Word0 Register */
/*! @{ */

#define XRDC_DERR_W0_10_EADDR_MASK               (0xFFFFFFFFU)
#define XRDC_DERR_W0_10_EADDR_SHIFT              (0U)
/*! EADDR - Error address */
#define XRDC_DERR_W0_10_EADDR(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W0_10_EADDR_SHIFT)) & XRDC_DERR_W0_10_EADDR_MASK)
/*! @} */

/*! @name DERR_W1_10 - Domain Error Word1 Register */
/*! @{ */

#define XRDC_DERR_W1_10_EDID_MASK                (0xFU)
#define XRDC_DERR_W1_10_EDID_SHIFT               (0U)
/*! EDID - Error domain identifier */
#define XRDC_DERR_W1_10_EDID(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_10_EDID_SHIFT)) & XRDC_DERR_W1_10_EDID_MASK)

#define XRDC_DERR_W1_10_EATR_MASK                (0x700U)
#define XRDC_DERR_W1_10_EATR_SHIFT               (8U)
/*! EATR - Error attributes
 *  0b000..Secure user mode, instruction fetch access.
 *  0b001..Secure user mode, data access.
 *  0b010..Secure privileged mode, instruction fetch access.
 *  0b011..Secure privileged mode, data access.
 *  0b100..Nonsecure user mode, instruction fetch access.
 *  0b101..Nonsecure user mode, data access.
 *  0b110..Nonsecure privileged mode, instruction fetch access.
 *  0b111..Nonsecure privileged mode, data access.
 */
#define XRDC_DERR_W1_10_EATR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_10_EATR_SHIFT)) & XRDC_DERR_W1_10_EATR_MASK)

#define XRDC_DERR_W1_10_ERW_MASK                 (0x800U)
#define XRDC_DERR_W1_10_ERW_SHIFT                (11U)
/*! ERW - Error read/write
 *  0b0..Read access
 *  0b1..Write access
 */
#define XRDC_DERR_W1_10_ERW(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_10_ERW_SHIFT)) & XRDC_DERR_W1_10_ERW_MASK)

#define XRDC_DERR_W1_10_EPORT_MASK               (0x7000000U)
#define XRDC_DERR_W1_10_EPORT_SHIFT              (24U)
/*! EPORT - Error port */
#define XRDC_DERR_W1_10_EPORT(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_10_EPORT_SHIFT)) & XRDC_DERR_W1_10_EPORT_MASK)

#define XRDC_DERR_W1_10_EST_MASK                 (0xC0000000U)
#define XRDC_DERR_W1_10_EST_SHIFT                (30U)
/*! EST - Error state
 *  0b00..No access violation has been detected.
 *  0b01..No access violation has been detected.
 *  0b10..A single access violation has been detected.
 *  0b11..Multiple access violations for this domain have been detected by this submodule instance. Only the
 *        address and attribute information for the first error have been captured in DERR_W0_i and DERR_W1_i.
 */
#define XRDC_DERR_W1_10_EST(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_10_EST_SHIFT)) & XRDC_DERR_W1_10_EST_MASK)
/*! @} */

/*! @name DERR_W3_10 - Domain Error Word3 Register */
/*! @{ */

#define XRDC_DERR_W3_10_RECR_MASK                (0xC0000000U)
#define XRDC_DERR_W3_10_RECR_SHIFT               (30U)
/*! RECR - Rearm Error Capture Registers */
#define XRDC_DERR_W3_10_RECR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W3_10_RECR_SHIFT)) & XRDC_DERR_W3_10_RECR_MASK)
/*! @} */

/*! @name DERR_W0_11 - Domain Error Word0 Register */
/*! @{ */

#define XRDC_DERR_W0_11_EADDR_MASK               (0xFFFFFFFFU)
#define XRDC_DERR_W0_11_EADDR_SHIFT              (0U)
/*! EADDR - Error address */
#define XRDC_DERR_W0_11_EADDR(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W0_11_EADDR_SHIFT)) & XRDC_DERR_W0_11_EADDR_MASK)
/*! @} */

/*! @name DERR_W1_11 - Domain Error Word1 Register */
/*! @{ */

#define XRDC_DERR_W1_11_EDID_MASK                (0xFU)
#define XRDC_DERR_W1_11_EDID_SHIFT               (0U)
/*! EDID - Error domain identifier */
#define XRDC_DERR_W1_11_EDID(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_11_EDID_SHIFT)) & XRDC_DERR_W1_11_EDID_MASK)

#define XRDC_DERR_W1_11_EATR_MASK                (0x700U)
#define XRDC_DERR_W1_11_EATR_SHIFT               (8U)
/*! EATR - Error attributes
 *  0b000..Secure user mode, instruction fetch access.
 *  0b001..Secure user mode, data access.
 *  0b010..Secure privileged mode, instruction fetch access.
 *  0b011..Secure privileged mode, data access.
 *  0b100..Nonsecure user mode, instruction fetch access.
 *  0b101..Nonsecure user mode, data access.
 *  0b110..Nonsecure privileged mode, instruction fetch access.
 *  0b111..Nonsecure privileged mode, data access.
 */
#define XRDC_DERR_W1_11_EATR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_11_EATR_SHIFT)) & XRDC_DERR_W1_11_EATR_MASK)

#define XRDC_DERR_W1_11_ERW_MASK                 (0x800U)
#define XRDC_DERR_W1_11_ERW_SHIFT                (11U)
/*! ERW - Error read/write
 *  0b0..Read access
 *  0b1..Write access
 */
#define XRDC_DERR_W1_11_ERW(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_11_ERW_SHIFT)) & XRDC_DERR_W1_11_ERW_MASK)

#define XRDC_DERR_W1_11_EPORT_MASK               (0x7000000U)
#define XRDC_DERR_W1_11_EPORT_SHIFT              (24U)
/*! EPORT - Error port */
#define XRDC_DERR_W1_11_EPORT(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_11_EPORT_SHIFT)) & XRDC_DERR_W1_11_EPORT_MASK)

#define XRDC_DERR_W1_11_EST_MASK                 (0xC0000000U)
#define XRDC_DERR_W1_11_EST_SHIFT                (30U)
/*! EST - Error state
 *  0b00..No access violation has been detected.
 *  0b01..No access violation has been detected.
 *  0b10..A single access violation has been detected.
 *  0b11..Multiple access violations for this domain have been detected by this submodule instance. Only the
 *        address and attribute information for the first error have been captured in DERR_W0_i and DERR_W1_i.
 */
#define XRDC_DERR_W1_11_EST(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_11_EST_SHIFT)) & XRDC_DERR_W1_11_EST_MASK)
/*! @} */

/*! @name DERR_W3_11 - Domain Error Word3 Register */
/*! @{ */

#define XRDC_DERR_W3_11_RECR_MASK                (0xC0000000U)
#define XRDC_DERR_W3_11_RECR_SHIFT               (30U)
/*! RECR - Rearm Error Capture Registers */
#define XRDC_DERR_W3_11_RECR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W3_11_RECR_SHIFT)) & XRDC_DERR_W3_11_RECR_MASK)
/*! @} */

/*! @name DERR_W0_12 - Domain Error Word0 Register */
/*! @{ */

#define XRDC_DERR_W0_12_EADDR_MASK               (0xFFFFFFFFU)
#define XRDC_DERR_W0_12_EADDR_SHIFT              (0U)
/*! EADDR - Error address */
#define XRDC_DERR_W0_12_EADDR(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W0_12_EADDR_SHIFT)) & XRDC_DERR_W0_12_EADDR_MASK)
/*! @} */

/*! @name DERR_W1_12 - Domain Error Word1 Register */
/*! @{ */

#define XRDC_DERR_W1_12_EDID_MASK                (0xFU)
#define XRDC_DERR_W1_12_EDID_SHIFT               (0U)
/*! EDID - Error domain identifier */
#define XRDC_DERR_W1_12_EDID(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_12_EDID_SHIFT)) & XRDC_DERR_W1_12_EDID_MASK)

#define XRDC_DERR_W1_12_EATR_MASK                (0x700U)
#define XRDC_DERR_W1_12_EATR_SHIFT               (8U)
/*! EATR - Error attributes
 *  0b000..Secure user mode, instruction fetch access.
 *  0b001..Secure user mode, data access.
 *  0b010..Secure privileged mode, instruction fetch access.
 *  0b011..Secure privileged mode, data access.
 *  0b100..Nonsecure user mode, instruction fetch access.
 *  0b101..Nonsecure user mode, data access.
 *  0b110..Nonsecure privileged mode, instruction fetch access.
 *  0b111..Nonsecure privileged mode, data access.
 */
#define XRDC_DERR_W1_12_EATR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_12_EATR_SHIFT)) & XRDC_DERR_W1_12_EATR_MASK)

#define XRDC_DERR_W1_12_ERW_MASK                 (0x800U)
#define XRDC_DERR_W1_12_ERW_SHIFT                (11U)
/*! ERW - Error read/write
 *  0b0..Read access
 *  0b1..Write access
 */
#define XRDC_DERR_W1_12_ERW(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_12_ERW_SHIFT)) & XRDC_DERR_W1_12_ERW_MASK)

#define XRDC_DERR_W1_12_EPORT_MASK               (0x7000000U)
#define XRDC_DERR_W1_12_EPORT_SHIFT              (24U)
/*! EPORT - Error port */
#define XRDC_DERR_W1_12_EPORT(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_12_EPORT_SHIFT)) & XRDC_DERR_W1_12_EPORT_MASK)

#define XRDC_DERR_W1_12_EST_MASK                 (0xC0000000U)
#define XRDC_DERR_W1_12_EST_SHIFT                (30U)
/*! EST - Error state
 *  0b00..No access violation has been detected.
 *  0b01..No access violation has been detected.
 *  0b10..A single access violation has been detected.
 *  0b11..Multiple access violations for this domain have been detected by this submodule instance. Only the
 *        address and attribute information for the first error have been captured in DERR_W0_i and DERR_W1_i.
 */
#define XRDC_DERR_W1_12_EST(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_12_EST_SHIFT)) & XRDC_DERR_W1_12_EST_MASK)
/*! @} */

/*! @name DERR_W3_12 - Domain Error Word3 Register */
/*! @{ */

#define XRDC_DERR_W3_12_RECR_MASK                (0xC0000000U)
#define XRDC_DERR_W3_12_RECR_SHIFT               (30U)
/*! RECR - Rearm Error Capture Registers */
#define XRDC_DERR_W3_12_RECR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W3_12_RECR_SHIFT)) & XRDC_DERR_W3_12_RECR_MASK)
/*! @} */

/*! @name DERR_W0_16 - Domain Error Word0 Register */
/*! @{ */

#define XRDC_DERR_W0_16_EADDR_MASK               (0xFFFFFFFFU)
#define XRDC_DERR_W0_16_EADDR_SHIFT              (0U)
/*! EADDR - Error address */
#define XRDC_DERR_W0_16_EADDR(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W0_16_EADDR_SHIFT)) & XRDC_DERR_W0_16_EADDR_MASK)
/*! @} */

/*! @name DERR_W1_16 - Domain Error Word1 Register */
/*! @{ */

#define XRDC_DERR_W1_16_EDID_MASK                (0xFU)
#define XRDC_DERR_W1_16_EDID_SHIFT               (0U)
/*! EDID - Error domain identifier */
#define XRDC_DERR_W1_16_EDID(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_16_EDID_SHIFT)) & XRDC_DERR_W1_16_EDID_MASK)

#define XRDC_DERR_W1_16_EATR_MASK                (0x700U)
#define XRDC_DERR_W1_16_EATR_SHIFT               (8U)
/*! EATR - Error attributes
 *  0b000..Secure user mode, instruction fetch access.
 *  0b001..Secure user mode, data access.
 *  0b010..Secure privileged mode, instruction fetch access.
 *  0b011..Secure privileged mode, data access.
 *  0b100..Nonsecure user mode, instruction fetch access.
 *  0b101..Nonsecure user mode, data access.
 *  0b110..Nonsecure privileged mode, instruction fetch access.
 *  0b111..Nonsecure privileged mode, data access.
 */
#define XRDC_DERR_W1_16_EATR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_16_EATR_SHIFT)) & XRDC_DERR_W1_16_EATR_MASK)

#define XRDC_DERR_W1_16_ERW_MASK                 (0x800U)
#define XRDC_DERR_W1_16_ERW_SHIFT                (11U)
/*! ERW - Error read/write
 *  0b0..Read access
 *  0b1..Write access
 */
#define XRDC_DERR_W1_16_ERW(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_16_ERW_SHIFT)) & XRDC_DERR_W1_16_ERW_MASK)

#define XRDC_DERR_W1_16_EPORT_MASK               (0x7000000U)
#define XRDC_DERR_W1_16_EPORT_SHIFT              (24U)
/*! EPORT - Error port */
#define XRDC_DERR_W1_16_EPORT(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_16_EPORT_SHIFT)) & XRDC_DERR_W1_16_EPORT_MASK)

#define XRDC_DERR_W1_16_EST_MASK                 (0xC0000000U)
#define XRDC_DERR_W1_16_EST_SHIFT                (30U)
/*! EST - Error state
 *  0b00..No access violation has been detected.
 *  0b01..No access violation has been detected.
 *  0b10..A single access violation has been detected.
 *  0b11..Multiple access violations for this domain have been detected by this submodule instance. Only the
 *        address and attribute information for the first error have been captured in DERR_W0_i and DERR_W1_i.
 */
#define XRDC_DERR_W1_16_EST(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_16_EST_SHIFT)) & XRDC_DERR_W1_16_EST_MASK)
/*! @} */

/*! @name DERR_W3_16 - Domain Error Word3 Register */
/*! @{ */

#define XRDC_DERR_W3_16_RECR_MASK                (0xC0000000U)
#define XRDC_DERR_W3_16_RECR_SHIFT               (30U)
/*! RECR - Rearm Error Capture Registers */
#define XRDC_DERR_W3_16_RECR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W3_16_RECR_SHIFT)) & XRDC_DERR_W3_16_RECR_MASK)
/*! @} */

/*! @name DERR_W0_17 - Domain Error Word0 Register */
/*! @{ */

#define XRDC_DERR_W0_17_EADDR_MASK               (0xFFFFFFFFU)
#define XRDC_DERR_W0_17_EADDR_SHIFT              (0U)
/*! EADDR - Error address */
#define XRDC_DERR_W0_17_EADDR(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W0_17_EADDR_SHIFT)) & XRDC_DERR_W0_17_EADDR_MASK)
/*! @} */

/*! @name DERR_W1_17 - Domain Error Word1 Register */
/*! @{ */

#define XRDC_DERR_W1_17_EDID_MASK                (0xFU)
#define XRDC_DERR_W1_17_EDID_SHIFT               (0U)
/*! EDID - Error domain identifier */
#define XRDC_DERR_W1_17_EDID(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_17_EDID_SHIFT)) & XRDC_DERR_W1_17_EDID_MASK)

#define XRDC_DERR_W1_17_EATR_MASK                (0x700U)
#define XRDC_DERR_W1_17_EATR_SHIFT               (8U)
/*! EATR - Error attributes
 *  0b000..Secure user mode, instruction fetch access.
 *  0b001..Secure user mode, data access.
 *  0b010..Secure privileged mode, instruction fetch access.
 *  0b011..Secure privileged mode, data access.
 *  0b100..Nonsecure user mode, instruction fetch access.
 *  0b101..Nonsecure user mode, data access.
 *  0b110..Nonsecure privileged mode, instruction fetch access.
 *  0b111..Nonsecure privileged mode, data access.
 */
#define XRDC_DERR_W1_17_EATR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_17_EATR_SHIFT)) & XRDC_DERR_W1_17_EATR_MASK)

#define XRDC_DERR_W1_17_ERW_MASK                 (0x800U)
#define XRDC_DERR_W1_17_ERW_SHIFT                (11U)
/*! ERW - Error read/write
 *  0b0..Read access
 *  0b1..Write access
 */
#define XRDC_DERR_W1_17_ERW(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_17_ERW_SHIFT)) & XRDC_DERR_W1_17_ERW_MASK)

#define XRDC_DERR_W1_17_EPORT_MASK               (0x7000000U)
#define XRDC_DERR_W1_17_EPORT_SHIFT              (24U)
/*! EPORT - Error port */
#define XRDC_DERR_W1_17_EPORT(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_17_EPORT_SHIFT)) & XRDC_DERR_W1_17_EPORT_MASK)

#define XRDC_DERR_W1_17_EST_MASK                 (0xC0000000U)
#define XRDC_DERR_W1_17_EST_SHIFT                (30U)
/*! EST - Error state
 *  0b00..No access violation has been detected.
 *  0b01..No access violation has been detected.
 *  0b10..A single access violation has been detected.
 *  0b11..Multiple access violations for this domain have been detected by this submodule instance. Only the
 *        address and attribute information for the first error have been captured in DERR_W0_i and DERR_W1_i.
 */
#define XRDC_DERR_W1_17_EST(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_17_EST_SHIFT)) & XRDC_DERR_W1_17_EST_MASK)
/*! @} */

/*! @name DERR_W3_17 - Domain Error Word3 Register */
/*! @{ */

#define XRDC_DERR_W3_17_RECR_MASK                (0xC0000000U)
#define XRDC_DERR_W3_17_RECR_SHIFT               (30U)
/*! RECR - Rearm Error Capture Registers */
#define XRDC_DERR_W3_17_RECR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W3_17_RECR_SHIFT)) & XRDC_DERR_W3_17_RECR_MASK)
/*! @} */

/*! @name DERR_W0_18 - Domain Error Word0 Register */
/*! @{ */

#define XRDC_DERR_W0_18_EADDR_MASK               (0xFFFFFFFFU)
#define XRDC_DERR_W0_18_EADDR_SHIFT              (0U)
/*! EADDR - Error address */
#define XRDC_DERR_W0_18_EADDR(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W0_18_EADDR_SHIFT)) & XRDC_DERR_W0_18_EADDR_MASK)
/*! @} */

/*! @name DERR_W1_18 - Domain Error Word1 Register */
/*! @{ */

#define XRDC_DERR_W1_18_EDID_MASK                (0xFU)
#define XRDC_DERR_W1_18_EDID_SHIFT               (0U)
/*! EDID - Error domain identifier */
#define XRDC_DERR_W1_18_EDID(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_18_EDID_SHIFT)) & XRDC_DERR_W1_18_EDID_MASK)

#define XRDC_DERR_W1_18_EATR_MASK                (0x700U)
#define XRDC_DERR_W1_18_EATR_SHIFT               (8U)
/*! EATR - Error attributes
 *  0b000..Secure user mode, instruction fetch access.
 *  0b001..Secure user mode, data access.
 *  0b010..Secure privileged mode, instruction fetch access.
 *  0b011..Secure privileged mode, data access.
 *  0b100..Nonsecure user mode, instruction fetch access.
 *  0b101..Nonsecure user mode, data access.
 *  0b110..Nonsecure privileged mode, instruction fetch access.
 *  0b111..Nonsecure privileged mode, data access.
 */
#define XRDC_DERR_W1_18_EATR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_18_EATR_SHIFT)) & XRDC_DERR_W1_18_EATR_MASK)

#define XRDC_DERR_W1_18_ERW_MASK                 (0x800U)
#define XRDC_DERR_W1_18_ERW_SHIFT                (11U)
/*! ERW - Error read/write
 *  0b0..Read access
 *  0b1..Write access
 */
#define XRDC_DERR_W1_18_ERW(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_18_ERW_SHIFT)) & XRDC_DERR_W1_18_ERW_MASK)

#define XRDC_DERR_W1_18_EPORT_MASK               (0x7000000U)
#define XRDC_DERR_W1_18_EPORT_SHIFT              (24U)
/*! EPORT - Error port */
#define XRDC_DERR_W1_18_EPORT(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_18_EPORT_SHIFT)) & XRDC_DERR_W1_18_EPORT_MASK)

#define XRDC_DERR_W1_18_EST_MASK                 (0xC0000000U)
#define XRDC_DERR_W1_18_EST_SHIFT                (30U)
/*! EST - Error state
 *  0b00..No access violation has been detected.
 *  0b01..No access violation has been detected.
 *  0b10..A single access violation has been detected.
 *  0b11..Multiple access violations for this domain have been detected by this submodule instance. Only the
 *        address and attribute information for the first error have been captured in DERR_W0_i and DERR_W1_i.
 */
#define XRDC_DERR_W1_18_EST(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_18_EST_SHIFT)) & XRDC_DERR_W1_18_EST_MASK)
/*! @} */

/*! @name DERR_W3_18 - Domain Error Word3 Register */
/*! @{ */

#define XRDC_DERR_W3_18_RECR_MASK                (0xC0000000U)
#define XRDC_DERR_W3_18_RECR_SHIFT               (30U)
/*! RECR - Rearm Error Capture Registers */
#define XRDC_DERR_W3_18_RECR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W3_18_RECR_SHIFT)) & XRDC_DERR_W3_18_RECR_MASK)
/*! @} */

/*! @name DERR_W0_20 - Domain Error Word0 Register */
/*! @{ */

#define XRDC_DERR_W0_20_EADDR_MASK               (0xFFFFFFFFU)
#define XRDC_DERR_W0_20_EADDR_SHIFT              (0U)
/*! EADDR - Error address */
#define XRDC_DERR_W0_20_EADDR(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W0_20_EADDR_SHIFT)) & XRDC_DERR_W0_20_EADDR_MASK)
/*! @} */

/*! @name DERR_W1_20 - Domain Error Word1 Register */
/*! @{ */

#define XRDC_DERR_W1_20_EDID_MASK                (0xFU)
#define XRDC_DERR_W1_20_EDID_SHIFT               (0U)
/*! EDID - Error domain identifier */
#define XRDC_DERR_W1_20_EDID(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_20_EDID_SHIFT)) & XRDC_DERR_W1_20_EDID_MASK)

#define XRDC_DERR_W1_20_EATR_MASK                (0x700U)
#define XRDC_DERR_W1_20_EATR_SHIFT               (8U)
/*! EATR - Error attributes
 *  0b000..Secure user mode, instruction fetch access.
 *  0b001..Secure user mode, data access.
 *  0b010..Secure privileged mode, instruction fetch access.
 *  0b011..Secure privileged mode, data access.
 *  0b100..Nonsecure user mode, instruction fetch access.
 *  0b101..Nonsecure user mode, data access.
 *  0b110..Nonsecure privileged mode, instruction fetch access.
 *  0b111..Nonsecure privileged mode, data access.
 */
#define XRDC_DERR_W1_20_EATR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_20_EATR_SHIFT)) & XRDC_DERR_W1_20_EATR_MASK)

#define XRDC_DERR_W1_20_ERW_MASK                 (0x800U)
#define XRDC_DERR_W1_20_ERW_SHIFT                (11U)
/*! ERW - Error read/write
 *  0b0..Read access
 *  0b1..Write access
 */
#define XRDC_DERR_W1_20_ERW(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_20_ERW_SHIFT)) & XRDC_DERR_W1_20_ERW_MASK)

#define XRDC_DERR_W1_20_EPORT_MASK               (0x7000000U)
#define XRDC_DERR_W1_20_EPORT_SHIFT              (24U)
/*! EPORT - Error port */
#define XRDC_DERR_W1_20_EPORT(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_20_EPORT_SHIFT)) & XRDC_DERR_W1_20_EPORT_MASK)

#define XRDC_DERR_W1_20_EST_MASK                 (0xC0000000U)
#define XRDC_DERR_W1_20_EST_SHIFT                (30U)
/*! EST - Error state
 *  0b00..No access violation has been detected.
 *  0b01..No access violation has been detected.
 *  0b10..A single access violation has been detected.
 *  0b11..Multiple access violations for this domain have been detected by this submodule instance. Only the
 *        address and attribute information for the first error have been captured in DERR_W0_i and DERR_W1_i.
 */
#define XRDC_DERR_W1_20_EST(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_20_EST_SHIFT)) & XRDC_DERR_W1_20_EST_MASK)
/*! @} */

/*! @name DERR_W3_20 - Domain Error Word3 Register */
/*! @{ */

#define XRDC_DERR_W3_20_RECR_MASK                (0xC0000000U)
#define XRDC_DERR_W3_20_RECR_SHIFT               (30U)
/*! RECR - Rearm Error Capture Registers */
#define XRDC_DERR_W3_20_RECR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W3_20_RECR_SHIFT)) & XRDC_DERR_W3_20_RECR_MASK)
/*! @} */

/*! @name DERR_W0_21 - Domain Error Word0 Register */
/*! @{ */

#define XRDC_DERR_W0_21_EADDR_MASK               (0xFFFFFFFFU)
#define XRDC_DERR_W0_21_EADDR_SHIFT              (0U)
/*! EADDR - Error address */
#define XRDC_DERR_W0_21_EADDR(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W0_21_EADDR_SHIFT)) & XRDC_DERR_W0_21_EADDR_MASK)
/*! @} */

/*! @name DERR_W1_21 - Domain Error Word1 Register */
/*! @{ */

#define XRDC_DERR_W1_21_EDID_MASK                (0xFU)
#define XRDC_DERR_W1_21_EDID_SHIFT               (0U)
/*! EDID - Error domain identifier */
#define XRDC_DERR_W1_21_EDID(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_21_EDID_SHIFT)) & XRDC_DERR_W1_21_EDID_MASK)

#define XRDC_DERR_W1_21_EATR_MASK                (0x700U)
#define XRDC_DERR_W1_21_EATR_SHIFT               (8U)
/*! EATR - Error attributes
 *  0b000..Secure user mode, instruction fetch access.
 *  0b001..Secure user mode, data access.
 *  0b010..Secure privileged mode, instruction fetch access.
 *  0b011..Secure privileged mode, data access.
 *  0b100..Nonsecure user mode, instruction fetch access.
 *  0b101..Nonsecure user mode, data access.
 *  0b110..Nonsecure privileged mode, instruction fetch access.
 *  0b111..Nonsecure privileged mode, data access.
 */
#define XRDC_DERR_W1_21_EATR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_21_EATR_SHIFT)) & XRDC_DERR_W1_21_EATR_MASK)

#define XRDC_DERR_W1_21_ERW_MASK                 (0x800U)
#define XRDC_DERR_W1_21_ERW_SHIFT                (11U)
/*! ERW - Error read/write
 *  0b0..Read access
 *  0b1..Write access
 */
#define XRDC_DERR_W1_21_ERW(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_21_ERW_SHIFT)) & XRDC_DERR_W1_21_ERW_MASK)

#define XRDC_DERR_W1_21_EPORT_MASK               (0x7000000U)
#define XRDC_DERR_W1_21_EPORT_SHIFT              (24U)
/*! EPORT - Error port */
#define XRDC_DERR_W1_21_EPORT(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_21_EPORT_SHIFT)) & XRDC_DERR_W1_21_EPORT_MASK)

#define XRDC_DERR_W1_21_EST_MASK                 (0xC0000000U)
#define XRDC_DERR_W1_21_EST_SHIFT                (30U)
/*! EST - Error state
 *  0b00..No access violation has been detected.
 *  0b01..No access violation has been detected.
 *  0b10..A single access violation has been detected.
 *  0b11..Multiple access violations for this domain have been detected by this submodule instance. Only the
 *        address and attribute information for the first error have been captured in DERR_W0_i and DERR_W1_i.
 */
#define XRDC_DERR_W1_21_EST(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_21_EST_SHIFT)) & XRDC_DERR_W1_21_EST_MASK)
/*! @} */

/*! @name DERR_W3_21 - Domain Error Word3 Register */
/*! @{ */

#define XRDC_DERR_W3_21_RECR_MASK                (0xC0000000U)
#define XRDC_DERR_W3_21_RECR_SHIFT               (30U)
/*! RECR - Rearm Error Capture Registers */
#define XRDC_DERR_W3_21_RECR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W3_21_RECR_SHIFT)) & XRDC_DERR_W3_21_RECR_MASK)
/*! @} */

/*! @name DERR_W0_22 - Domain Error Word0 Register */
/*! @{ */

#define XRDC_DERR_W0_22_EADDR_MASK               (0xFFFFFFFFU)
#define XRDC_DERR_W0_22_EADDR_SHIFT              (0U)
/*! EADDR - Error address */
#define XRDC_DERR_W0_22_EADDR(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W0_22_EADDR_SHIFT)) & XRDC_DERR_W0_22_EADDR_MASK)
/*! @} */

/*! @name DERR_W1_22 - Domain Error Word1 Register */
/*! @{ */

#define XRDC_DERR_W1_22_EDID_MASK                (0xFU)
#define XRDC_DERR_W1_22_EDID_SHIFT               (0U)
/*! EDID - Error domain identifier */
#define XRDC_DERR_W1_22_EDID(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_22_EDID_SHIFT)) & XRDC_DERR_W1_22_EDID_MASK)

#define XRDC_DERR_W1_22_EATR_MASK                (0x700U)
#define XRDC_DERR_W1_22_EATR_SHIFT               (8U)
/*! EATR - Error attributes
 *  0b000..Secure user mode, instruction fetch access.
 *  0b001..Secure user mode, data access.
 *  0b010..Secure privileged mode, instruction fetch access.
 *  0b011..Secure privileged mode, data access.
 *  0b100..Nonsecure user mode, instruction fetch access.
 *  0b101..Nonsecure user mode, data access.
 *  0b110..Nonsecure privileged mode, instruction fetch access.
 *  0b111..Nonsecure privileged mode, data access.
 */
#define XRDC_DERR_W1_22_EATR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_22_EATR_SHIFT)) & XRDC_DERR_W1_22_EATR_MASK)

#define XRDC_DERR_W1_22_ERW_MASK                 (0x800U)
#define XRDC_DERR_W1_22_ERW_SHIFT                (11U)
/*! ERW - Error read/write
 *  0b0..Read access
 *  0b1..Write access
 */
#define XRDC_DERR_W1_22_ERW(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_22_ERW_SHIFT)) & XRDC_DERR_W1_22_ERW_MASK)

#define XRDC_DERR_W1_22_EPORT_MASK               (0x7000000U)
#define XRDC_DERR_W1_22_EPORT_SHIFT              (24U)
/*! EPORT - Error port */
#define XRDC_DERR_W1_22_EPORT(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_22_EPORT_SHIFT)) & XRDC_DERR_W1_22_EPORT_MASK)

#define XRDC_DERR_W1_22_EST_MASK                 (0xC0000000U)
#define XRDC_DERR_W1_22_EST_SHIFT                (30U)
/*! EST - Error state
 *  0b00..No access violation has been detected.
 *  0b01..No access violation has been detected.
 *  0b10..A single access violation has been detected.
 *  0b11..Multiple access violations for this domain have been detected by this submodule instance. Only the
 *        address and attribute information for the first error have been captured in DERR_W0_i and DERR_W1_i.
 */
#define XRDC_DERR_W1_22_EST(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W1_22_EST_SHIFT)) & XRDC_DERR_W1_22_EST_MASK)
/*! @} */

/*! @name DERR_W3_22 - Domain Error Word3 Register */
/*! @{ */

#define XRDC_DERR_W3_22_RECR_MASK                (0xC0000000U)
#define XRDC_DERR_W3_22_RECR_SHIFT               (30U)
/*! RECR - Rearm Error Capture Registers */
#define XRDC_DERR_W3_22_RECR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_DERR_W3_22_RECR_SHIFT)) & XRDC_DERR_W3_22_RECR_MASK)
/*! @} */

/*! @name PID0 - Process Identifier */
/*! @{ */

#define XRDC_PID0_PID_MASK                       (0x3FU)
#define XRDC_PID0_PID_SHIFT                      (0U)
/*! PID - Process identifier */
#define XRDC_PID0_PID(x)                         (((uint32_t)(((uint32_t)(x)) << XRDC_PID0_PID_SHIFT)) & XRDC_PID0_PID_MASK)

#define XRDC_PID0_SP4SM_MASK                     (0x8000000U)
#define XRDC_PID0_SP4SM_SHIFT                    (27U)
/*! SP4SM - Special 4-state model */
#define XRDC_PID0_SP4SM(x)                       (((uint32_t)(((uint32_t)(x)) << XRDC_PID0_SP4SM_SHIFT)) & XRDC_PID0_SP4SM_MASK)

#define XRDC_PID0_TSM_MASK                       (0x10000000U)
#define XRDC_PID0_TSM_SHIFT                      (28U)
/*! TSM - Three-state model */
#define XRDC_PID0_TSM(x)                         (((uint32_t)(((uint32_t)(x)) << XRDC_PID0_TSM_SHIFT)) & XRDC_PID0_TSM_MASK)

#define XRDC_PID0_LK2_MASK                       (0x60000000U)
#define XRDC_PID0_LK2_SHIFT                      (29U)
/*! LK2 - Lock
 *  0b00..Register can be written by any secure privileged write.
 *  0b01..Register can be written by any secure privileged write.
 *  0b10..Register can only be written by a secure privileged write from bus master m.
 *  0b11..Register is locked (read-only) until the next reset.
 */
#define XRDC_PID0_LK2(x)                         (((uint32_t)(((uint32_t)(x)) << XRDC_PID0_LK2_SHIFT)) & XRDC_PID0_LK2_MASK)
/*! @} */

/*! @name MDA_W0_0_DFMT0 - Master Domain Assignment */
/*! @{ */

#define XRDC_MDA_W0_0_DFMT0_DID_MASK             (0xFU)
#define XRDC_MDA_W0_0_DFMT0_DID_SHIFT            (0U)
/*! DID - Domain identifier */
#define XRDC_MDA_W0_0_DFMT0_DID(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_0_DFMT0_DID_SHIFT)) & XRDC_MDA_W0_0_DFMT0_DID_MASK)

#define XRDC_MDA_W0_0_DFMT0_DIDS_MASK            (0x30U)
#define XRDC_MDA_W0_0_DFMT0_DIDS_SHIFT           (4U)
/*! DIDS - DID Select
 *  0b00..Use MDAm[3:0] as the domain identifier.
 *  0b01..Use the input DID as the domain identifier.
 *  0b10..Use MDAm[3:2] concatenated with the low-order 2 bits of the input DID (DID_in[1:0]) as the domain identifier.
 *  0b11..Reserved for future use.
 */
#define XRDC_MDA_W0_0_DFMT0_DIDS(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_0_DFMT0_DIDS_SHIFT)) & XRDC_MDA_W0_0_DFMT0_DIDS_MASK)

#define XRDC_MDA_W0_0_DFMT0_PE_MASK              (0xC0U)
#define XRDC_MDA_W0_0_DFMT0_PE_SHIFT             (6U)
/*! PE - Process identifier enable
 *  0b00..No process identifier is included in the domain hit evaluation.
 *  0b01..No process identifier is included in the domain hit evaluation.
 *  0b10..The process identifier is included in the domain hit evaluation as defined by the expression:
 *        partial_domain_hit = (PE == 2) && ((PID & ~PIDM) == (XRDC_PIDn[PID] & ~PIDM))
 *  0b11..The process identifier is included in the domain hit evaluation as defined by the expression:
 *        partial_domain_hit = (PE == 3) && ~((PID & ~PIDM) == (XRDC_PIDn[PID] & ~PIDM))
 */
#define XRDC_MDA_W0_0_DFMT0_PE(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_0_DFMT0_PE_SHIFT)) & XRDC_MDA_W0_0_DFMT0_PE_MASK)

#define XRDC_MDA_W0_0_DFMT0_PIDM_MASK            (0x3F00U)
#define XRDC_MDA_W0_0_DFMT0_PIDM_SHIFT           (8U)
/*! PIDM - Process Identifier Mask */
#define XRDC_MDA_W0_0_DFMT0_PIDM(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_0_DFMT0_PIDM_SHIFT)) & XRDC_MDA_W0_0_DFMT0_PIDM_MASK)

#define XRDC_MDA_W0_0_DFMT0_PID_MASK             (0x3F0000U)
#define XRDC_MDA_W0_0_DFMT0_PID_SHIFT            (16U)
/*! PID - Process Identifier */
#define XRDC_MDA_W0_0_DFMT0_PID(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_0_DFMT0_PID_SHIFT)) & XRDC_MDA_W0_0_DFMT0_PID_MASK)

#define XRDC_MDA_W0_0_DFMT0_DFMT_MASK            (0x20000000U)
#define XRDC_MDA_W0_0_DFMT0_DFMT_SHIFT           (29U)
/*! DFMT - Domain format
 *  0b0..Processor-core domain assignment
 *  0b1..Non-processor domain assignment
 */
#define XRDC_MDA_W0_0_DFMT0_DFMT(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_0_DFMT0_DFMT_SHIFT)) & XRDC_MDA_W0_0_DFMT0_DFMT_MASK)

#define XRDC_MDA_W0_0_DFMT0_LK1_MASK             (0x40000000U)
#define XRDC_MDA_W0_0_DFMT0_LK1_SHIFT            (30U)
/*! LK1 - 1-bit Lock
 *  0b0..Register can be written by any secure privileged write.
 *  0b1..Register is locked (read-only) until the next reset.
 */
#define XRDC_MDA_W0_0_DFMT0_LK1(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_0_DFMT0_LK1_SHIFT)) & XRDC_MDA_W0_0_DFMT0_LK1_MASK)

#define XRDC_MDA_W0_0_DFMT0_VLD_MASK             (0x80000000U)
#define XRDC_MDA_W0_0_DFMT0_VLD_SHIFT            (31U)
/*! VLD - Valid
 *  0b0..The Wr domain assignment is invalid.
 *  0b1..The Wr domain assignment is valid.
 */
#define XRDC_MDA_W0_0_DFMT0_VLD(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_0_DFMT0_VLD_SHIFT)) & XRDC_MDA_W0_0_DFMT0_VLD_MASK)
/*! @} */

/*! @name MDA_W1_0_DFMT0 - Master Domain Assignment */
/*! @{ */

#define XRDC_MDA_W1_0_DFMT0_DID_MASK             (0xFU)
#define XRDC_MDA_W1_0_DFMT0_DID_SHIFT            (0U)
/*! DID - Domain identifier */
#define XRDC_MDA_W1_0_DFMT0_DID(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W1_0_DFMT0_DID_SHIFT)) & XRDC_MDA_W1_0_DFMT0_DID_MASK)

#define XRDC_MDA_W1_0_DFMT0_DIDS_MASK            (0x30U)
#define XRDC_MDA_W1_0_DFMT0_DIDS_SHIFT           (4U)
/*! DIDS - DID Select
 *  0b00..Use MDAm[3:0] as the domain identifier.
 *  0b01..Use the input DID as the domain identifier.
 *  0b10..Use MDAm[3:2] concatenated with the low-order 2 bits of the input DID (DID_in[1:0]) as the domain identifier.
 *  0b11..Reserved for future use.
 */
#define XRDC_MDA_W1_0_DFMT0_DIDS(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W1_0_DFMT0_DIDS_SHIFT)) & XRDC_MDA_W1_0_DFMT0_DIDS_MASK)

#define XRDC_MDA_W1_0_DFMT0_PE_MASK              (0xC0U)
#define XRDC_MDA_W1_0_DFMT0_PE_SHIFT             (6U)
/*! PE - Process identifier enable
 *  0b00..No process identifier is included in the domain hit evaluation.
 *  0b01..No process identifier is included in the domain hit evaluation.
 *  0b10..The process identifier is included in the domain hit evaluation as defined by the expression:
 *        partial_domain_hit = (PE == 2) && ((PID & ~PIDM) == (XRDC_PIDn[PID] & ~PIDM))
 *  0b11..The process identifier is included in the domain hit evaluation as defined by the expression:
 *        partial_domain_hit = (PE == 3) && ~((PID & ~PIDM) == (XRDC_PIDn[PID] & ~PIDM))
 */
#define XRDC_MDA_W1_0_DFMT0_PE(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W1_0_DFMT0_PE_SHIFT)) & XRDC_MDA_W1_0_DFMT0_PE_MASK)

#define XRDC_MDA_W1_0_DFMT0_PIDM_MASK            (0x3F00U)
#define XRDC_MDA_W1_0_DFMT0_PIDM_SHIFT           (8U)
/*! PIDM - Process Identifier Mask */
#define XRDC_MDA_W1_0_DFMT0_PIDM(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W1_0_DFMT0_PIDM_SHIFT)) & XRDC_MDA_W1_0_DFMT0_PIDM_MASK)

#define XRDC_MDA_W1_0_DFMT0_PID_MASK             (0x3F0000U)
#define XRDC_MDA_W1_0_DFMT0_PID_SHIFT            (16U)
/*! PID - Process Identifier */
#define XRDC_MDA_W1_0_DFMT0_PID(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W1_0_DFMT0_PID_SHIFT)) & XRDC_MDA_W1_0_DFMT0_PID_MASK)

#define XRDC_MDA_W1_0_DFMT0_DFMT_MASK            (0x20000000U)
#define XRDC_MDA_W1_0_DFMT0_DFMT_SHIFT           (29U)
/*! DFMT - Domain format
 *  0b0..Processor-core domain assignment
 *  0b1..Non-processor domain assignment
 */
#define XRDC_MDA_W1_0_DFMT0_DFMT(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W1_0_DFMT0_DFMT_SHIFT)) & XRDC_MDA_W1_0_DFMT0_DFMT_MASK)

#define XRDC_MDA_W1_0_DFMT0_LK1_MASK             (0x40000000U)
#define XRDC_MDA_W1_0_DFMT0_LK1_SHIFT            (30U)
/*! LK1 - 1-bit Lock
 *  0b0..Register can be written by any secure privileged write.
 *  0b1..Register is locked (read-only) until the next reset.
 */
#define XRDC_MDA_W1_0_DFMT0_LK1(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W1_0_DFMT0_LK1_SHIFT)) & XRDC_MDA_W1_0_DFMT0_LK1_MASK)

#define XRDC_MDA_W1_0_DFMT0_VLD_MASK             (0x80000000U)
#define XRDC_MDA_W1_0_DFMT0_VLD_SHIFT            (31U)
/*! VLD - Valid
 *  0b0..The Wr domain assignment is invalid.
 *  0b1..The Wr domain assignment is valid.
 */
#define XRDC_MDA_W1_0_DFMT0_VLD(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W1_0_DFMT0_VLD_SHIFT)) & XRDC_MDA_W1_0_DFMT0_VLD_MASK)
/*! @} */

/*! @name MDA_W0_1_DFMT1 - Master Domain Assignment */
/*! @{ */

#define XRDC_MDA_W0_1_DFMT1_DID_MASK             (0xFU)
#define XRDC_MDA_W0_1_DFMT1_DID_SHIFT            (0U)
/*! DID - Domain identifier */
#define XRDC_MDA_W0_1_DFMT1_DID(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_1_DFMT1_DID_SHIFT)) & XRDC_MDA_W0_1_DFMT1_DID_MASK)

#define XRDC_MDA_W0_1_DFMT1_PA_MASK              (0x30U)
#define XRDC_MDA_W0_1_DFMT1_PA_SHIFT             (4U)
/*! PA - Privileged attribute
 *  0b00..Force the bus attribute for this master to user.
 *  0b01..Force the bus attribute for this master to privileged.
 *  0b10..Use the bus master's privileged/user attribute directly.
 *  0b11..Use the bus master's privileged/user attribute directly.
 */
#define XRDC_MDA_W0_1_DFMT1_PA(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_1_DFMT1_PA_SHIFT)) & XRDC_MDA_W0_1_DFMT1_PA_MASK)

#define XRDC_MDA_W0_1_DFMT1_SA_MASK              (0xC0U)
#define XRDC_MDA_W0_1_DFMT1_SA_SHIFT             (6U)
/*! SA - Secure attribute
 *  0b00..Force the bus attribute for this master to secure.
 *  0b01..Force the bus attribute for this master to nonsecure.
 *  0b10..Use the bus master's secure/nonsecure attribute directly.
 *  0b11..Use the bus master's secure/nonsecure attribute directly.
 */
#define XRDC_MDA_W0_1_DFMT1_SA(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_1_DFMT1_SA_SHIFT)) & XRDC_MDA_W0_1_DFMT1_SA_MASK)

#define XRDC_MDA_W0_1_DFMT1_DIDB_MASK            (0x100U)
#define XRDC_MDA_W0_1_DFMT1_DIDB_SHIFT           (8U)
/*! DIDB - DID Bypass
 *  0b0..Use MDAn[3:0] as the domain identifier.
 *  0b1..Use the DID input as the domain identifier.
 */
#define XRDC_MDA_W0_1_DFMT1_DIDB(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_1_DFMT1_DIDB_SHIFT)) & XRDC_MDA_W0_1_DFMT1_DIDB_MASK)

#define XRDC_MDA_W0_1_DFMT1_DFMT_MASK            (0x20000000U)
#define XRDC_MDA_W0_1_DFMT1_DFMT_SHIFT           (29U)
/*! DFMT - Domain format
 *  0b0..Processor-core domain assignment
 *  0b1..Non-processor domain assignment
 */
#define XRDC_MDA_W0_1_DFMT1_DFMT(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_1_DFMT1_DFMT_SHIFT)) & XRDC_MDA_W0_1_DFMT1_DFMT_MASK)

#define XRDC_MDA_W0_1_DFMT1_LK1_MASK             (0x40000000U)
#define XRDC_MDA_W0_1_DFMT1_LK1_SHIFT            (30U)
/*! LK1 - 1-bit Lock
 *  0b0..Register can be written by any secure privileged write.
 *  0b1..Register is locked (read-only) until the next reset.
 */
#define XRDC_MDA_W0_1_DFMT1_LK1(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_1_DFMT1_LK1_SHIFT)) & XRDC_MDA_W0_1_DFMT1_LK1_MASK)

#define XRDC_MDA_W0_1_DFMT1_VLD_MASK             (0x80000000U)
#define XRDC_MDA_W0_1_DFMT1_VLD_SHIFT            (31U)
/*! VLD - Valid
 *  0b0..The Wr domain assignment is invalid.
 *  0b1..The Wr domain assignment is valid.
 */
#define XRDC_MDA_W0_1_DFMT1_VLD(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_1_DFMT1_VLD_SHIFT)) & XRDC_MDA_W0_1_DFMT1_VLD_MASK)
/*! @} */

/*! @name MDA_W0_2_DFMT1 - Master Domain Assignment */
/*! @{ */

#define XRDC_MDA_W0_2_DFMT1_DID_MASK             (0xFU)
#define XRDC_MDA_W0_2_DFMT1_DID_SHIFT            (0U)
/*! DID - Domain identifier */
#define XRDC_MDA_W0_2_DFMT1_DID(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_2_DFMT1_DID_SHIFT)) & XRDC_MDA_W0_2_DFMT1_DID_MASK)

#define XRDC_MDA_W0_2_DFMT1_PA_MASK              (0x30U)
#define XRDC_MDA_W0_2_DFMT1_PA_SHIFT             (4U)
/*! PA - Privileged attribute
 *  0b00..Force the bus attribute for this master to user.
 *  0b01..Force the bus attribute for this master to privileged.
 *  0b10..Use the bus master's privileged/user attribute directly.
 *  0b11..Use the bus master's privileged/user attribute directly.
 */
#define XRDC_MDA_W0_2_DFMT1_PA(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_2_DFMT1_PA_SHIFT)) & XRDC_MDA_W0_2_DFMT1_PA_MASK)

#define XRDC_MDA_W0_2_DFMT1_SA_MASK              (0xC0U)
#define XRDC_MDA_W0_2_DFMT1_SA_SHIFT             (6U)
/*! SA - Secure attribute
 *  0b00..Force the bus attribute for this master to secure.
 *  0b01..Force the bus attribute for this master to nonsecure.
 *  0b10..Use the bus master's secure/nonsecure attribute directly.
 *  0b11..Use the bus master's secure/nonsecure attribute directly.
 */
#define XRDC_MDA_W0_2_DFMT1_SA(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_2_DFMT1_SA_SHIFT)) & XRDC_MDA_W0_2_DFMT1_SA_MASK)

#define XRDC_MDA_W0_2_DFMT1_DIDB_MASK            (0x100U)
#define XRDC_MDA_W0_2_DFMT1_DIDB_SHIFT           (8U)
/*! DIDB - DID Bypass
 *  0b0..Use MDAn[3:0] as the domain identifier.
 *  0b1..Use the DID input as the domain identifier.
 */
#define XRDC_MDA_W0_2_DFMT1_DIDB(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_2_DFMT1_DIDB_SHIFT)) & XRDC_MDA_W0_2_DFMT1_DIDB_MASK)

#define XRDC_MDA_W0_2_DFMT1_DFMT_MASK            (0x20000000U)
#define XRDC_MDA_W0_2_DFMT1_DFMT_SHIFT           (29U)
/*! DFMT - Domain format
 *  0b0..Processor-core domain assignment
 *  0b1..Non-processor domain assignment
 */
#define XRDC_MDA_W0_2_DFMT1_DFMT(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_2_DFMT1_DFMT_SHIFT)) & XRDC_MDA_W0_2_DFMT1_DFMT_MASK)

#define XRDC_MDA_W0_2_DFMT1_LK1_MASK             (0x40000000U)
#define XRDC_MDA_W0_2_DFMT1_LK1_SHIFT            (30U)
/*! LK1 - 1-bit Lock
 *  0b0..Register can be written by any secure privileged write.
 *  0b1..Register is locked (read-only) until the next reset.
 */
#define XRDC_MDA_W0_2_DFMT1_LK1(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_2_DFMT1_LK1_SHIFT)) & XRDC_MDA_W0_2_DFMT1_LK1_MASK)

#define XRDC_MDA_W0_2_DFMT1_VLD_MASK             (0x80000000U)
#define XRDC_MDA_W0_2_DFMT1_VLD_SHIFT            (31U)
/*! VLD - Valid
 *  0b0..The Wr domain assignment is invalid.
 *  0b1..The Wr domain assignment is valid.
 */
#define XRDC_MDA_W0_2_DFMT1_VLD(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_2_DFMT1_VLD_SHIFT)) & XRDC_MDA_W0_2_DFMT1_VLD_MASK)
/*! @} */

/*! @name MDA_W0_3_DFMT1 - Master Domain Assignment */
/*! @{ */

#define XRDC_MDA_W0_3_DFMT1_DID_MASK             (0xFU)
#define XRDC_MDA_W0_3_DFMT1_DID_SHIFT            (0U)
/*! DID - Domain identifier */
#define XRDC_MDA_W0_3_DFMT1_DID(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_3_DFMT1_DID_SHIFT)) & XRDC_MDA_W0_3_DFMT1_DID_MASK)

#define XRDC_MDA_W0_3_DFMT1_PA_MASK              (0x30U)
#define XRDC_MDA_W0_3_DFMT1_PA_SHIFT             (4U)
/*! PA - Privileged attribute
 *  0b00..Force the bus attribute for this master to user.
 *  0b01..Force the bus attribute for this master to privileged.
 *  0b10..Use the bus master's privileged/user attribute directly.
 *  0b11..Use the bus master's privileged/user attribute directly.
 */
#define XRDC_MDA_W0_3_DFMT1_PA(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_3_DFMT1_PA_SHIFT)) & XRDC_MDA_W0_3_DFMT1_PA_MASK)

#define XRDC_MDA_W0_3_DFMT1_SA_MASK              (0xC0U)
#define XRDC_MDA_W0_3_DFMT1_SA_SHIFT             (6U)
/*! SA - Secure attribute
 *  0b00..Force the bus attribute for this master to secure.
 *  0b01..Force the bus attribute for this master to nonsecure.
 *  0b10..Use the bus master's secure/nonsecure attribute directly.
 *  0b11..Use the bus master's secure/nonsecure attribute directly.
 */
#define XRDC_MDA_W0_3_DFMT1_SA(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_3_DFMT1_SA_SHIFT)) & XRDC_MDA_W0_3_DFMT1_SA_MASK)

#define XRDC_MDA_W0_3_DFMT1_DIDB_MASK            (0x100U)
#define XRDC_MDA_W0_3_DFMT1_DIDB_SHIFT           (8U)
/*! DIDB - DID Bypass
 *  0b0..Use MDAn[3:0] as the domain identifier.
 *  0b1..Use the DID input as the domain identifier.
 */
#define XRDC_MDA_W0_3_DFMT1_DIDB(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_3_DFMT1_DIDB_SHIFT)) & XRDC_MDA_W0_3_DFMT1_DIDB_MASK)

#define XRDC_MDA_W0_3_DFMT1_DFMT_MASK            (0x20000000U)
#define XRDC_MDA_W0_3_DFMT1_DFMT_SHIFT           (29U)
/*! DFMT - Domain format
 *  0b0..Processor-core domain assignment
 *  0b1..Non-processor domain assignment
 */
#define XRDC_MDA_W0_3_DFMT1_DFMT(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_3_DFMT1_DFMT_SHIFT)) & XRDC_MDA_W0_3_DFMT1_DFMT_MASK)

#define XRDC_MDA_W0_3_DFMT1_LK1_MASK             (0x40000000U)
#define XRDC_MDA_W0_3_DFMT1_LK1_SHIFT            (30U)
/*! LK1 - 1-bit Lock
 *  0b0..Register can be written by any secure privileged write.
 *  0b1..Register is locked (read-only) until the next reset.
 */
#define XRDC_MDA_W0_3_DFMT1_LK1(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_3_DFMT1_LK1_SHIFT)) & XRDC_MDA_W0_3_DFMT1_LK1_MASK)

#define XRDC_MDA_W0_3_DFMT1_VLD_MASK             (0x80000000U)
#define XRDC_MDA_W0_3_DFMT1_VLD_SHIFT            (31U)
/*! VLD - Valid
 *  0b0..The Wr domain assignment is invalid.
 *  0b1..The Wr domain assignment is valid.
 */
#define XRDC_MDA_W0_3_DFMT1_VLD(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_3_DFMT1_VLD_SHIFT)) & XRDC_MDA_W0_3_DFMT1_VLD_MASK)
/*! @} */

/*! @name MDA_W0_4_DFMT1 - Master Domain Assignment */
/*! @{ */

#define XRDC_MDA_W0_4_DFMT1_DID_MASK             (0xFU)
#define XRDC_MDA_W0_4_DFMT1_DID_SHIFT            (0U)
/*! DID - Domain identifier */
#define XRDC_MDA_W0_4_DFMT1_DID(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_4_DFMT1_DID_SHIFT)) & XRDC_MDA_W0_4_DFMT1_DID_MASK)

#define XRDC_MDA_W0_4_DFMT1_PA_MASK              (0x30U)
#define XRDC_MDA_W0_4_DFMT1_PA_SHIFT             (4U)
/*! PA - Privileged attribute
 *  0b00..Force the bus attribute for this master to user.
 *  0b01..Force the bus attribute for this master to privileged.
 *  0b10..Use the bus master's privileged/user attribute directly.
 *  0b11..Use the bus master's privileged/user attribute directly.
 */
#define XRDC_MDA_W0_4_DFMT1_PA(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_4_DFMT1_PA_SHIFT)) & XRDC_MDA_W0_4_DFMT1_PA_MASK)

#define XRDC_MDA_W0_4_DFMT1_SA_MASK              (0xC0U)
#define XRDC_MDA_W0_4_DFMT1_SA_SHIFT             (6U)
/*! SA - Secure attribute
 *  0b00..Force the bus attribute for this master to secure.
 *  0b01..Force the bus attribute for this master to nonsecure.
 *  0b10..Use the bus master's secure/nonsecure attribute directly.
 *  0b11..Use the bus master's secure/nonsecure attribute directly.
 */
#define XRDC_MDA_W0_4_DFMT1_SA(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_4_DFMT1_SA_SHIFT)) & XRDC_MDA_W0_4_DFMT1_SA_MASK)

#define XRDC_MDA_W0_4_DFMT1_DIDB_MASK            (0x100U)
#define XRDC_MDA_W0_4_DFMT1_DIDB_SHIFT           (8U)
/*! DIDB - DID Bypass
 *  0b0..Use MDAn[3:0] as the domain identifier.
 *  0b1..Use the DID input as the domain identifier.
 */
#define XRDC_MDA_W0_4_DFMT1_DIDB(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_4_DFMT1_DIDB_SHIFT)) & XRDC_MDA_W0_4_DFMT1_DIDB_MASK)

#define XRDC_MDA_W0_4_DFMT1_DFMT_MASK            (0x20000000U)
#define XRDC_MDA_W0_4_DFMT1_DFMT_SHIFT           (29U)
/*! DFMT - Domain format
 *  0b0..Processor-core domain assignment
 *  0b1..Non-processor domain assignment
 */
#define XRDC_MDA_W0_4_DFMT1_DFMT(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_4_DFMT1_DFMT_SHIFT)) & XRDC_MDA_W0_4_DFMT1_DFMT_MASK)

#define XRDC_MDA_W0_4_DFMT1_LK1_MASK             (0x40000000U)
#define XRDC_MDA_W0_4_DFMT1_LK1_SHIFT            (30U)
/*! LK1 - 1-bit Lock
 *  0b0..Register can be written by any secure privileged write.
 *  0b1..Register is locked (read-only) until the next reset.
 */
#define XRDC_MDA_W0_4_DFMT1_LK1(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_4_DFMT1_LK1_SHIFT)) & XRDC_MDA_W0_4_DFMT1_LK1_MASK)

#define XRDC_MDA_W0_4_DFMT1_VLD_MASK             (0x80000000U)
#define XRDC_MDA_W0_4_DFMT1_VLD_SHIFT            (31U)
/*! VLD - Valid
 *  0b0..The Wr domain assignment is invalid.
 *  0b1..The Wr domain assignment is valid.
 */
#define XRDC_MDA_W0_4_DFMT1_VLD(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_4_DFMT1_VLD_SHIFT)) & XRDC_MDA_W0_4_DFMT1_VLD_MASK)
/*! @} */

/*! @name MDA_W0_5_DFMT1 - Master Domain Assignment */
/*! @{ */

#define XRDC_MDA_W0_5_DFMT1_DID_MASK             (0xFU)
#define XRDC_MDA_W0_5_DFMT1_DID_SHIFT            (0U)
/*! DID - Domain identifier */
#define XRDC_MDA_W0_5_DFMT1_DID(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_5_DFMT1_DID_SHIFT)) & XRDC_MDA_W0_5_DFMT1_DID_MASK)

#define XRDC_MDA_W0_5_DFMT1_PA_MASK              (0x30U)
#define XRDC_MDA_W0_5_DFMT1_PA_SHIFT             (4U)
/*! PA - Privileged attribute
 *  0b00..Force the bus attribute for this master to user.
 *  0b01..Force the bus attribute for this master to privileged.
 *  0b10..Use the bus master's privileged/user attribute directly.
 *  0b11..Use the bus master's privileged/user attribute directly.
 */
#define XRDC_MDA_W0_5_DFMT1_PA(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_5_DFMT1_PA_SHIFT)) & XRDC_MDA_W0_5_DFMT1_PA_MASK)

#define XRDC_MDA_W0_5_DFMT1_SA_MASK              (0xC0U)
#define XRDC_MDA_W0_5_DFMT1_SA_SHIFT             (6U)
/*! SA - Secure attribute
 *  0b00..Force the bus attribute for this master to secure.
 *  0b01..Force the bus attribute for this master to nonsecure.
 *  0b10..Use the bus master's secure/nonsecure attribute directly.
 *  0b11..Use the bus master's secure/nonsecure attribute directly.
 */
#define XRDC_MDA_W0_5_DFMT1_SA(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_5_DFMT1_SA_SHIFT)) & XRDC_MDA_W0_5_DFMT1_SA_MASK)

#define XRDC_MDA_W0_5_DFMT1_DIDB_MASK            (0x100U)
#define XRDC_MDA_W0_5_DFMT1_DIDB_SHIFT           (8U)
/*! DIDB - DID Bypass
 *  0b0..Use MDAn[3:0] as the domain identifier.
 *  0b1..Use the DID input as the domain identifier.
 */
#define XRDC_MDA_W0_5_DFMT1_DIDB(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_5_DFMT1_DIDB_SHIFT)) & XRDC_MDA_W0_5_DFMT1_DIDB_MASK)

#define XRDC_MDA_W0_5_DFMT1_DFMT_MASK            (0x20000000U)
#define XRDC_MDA_W0_5_DFMT1_DFMT_SHIFT           (29U)
/*! DFMT - Domain format
 *  0b0..Processor-core domain assignment
 *  0b1..Non-processor domain assignment
 */
#define XRDC_MDA_W0_5_DFMT1_DFMT(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_5_DFMT1_DFMT_SHIFT)) & XRDC_MDA_W0_5_DFMT1_DFMT_MASK)

#define XRDC_MDA_W0_5_DFMT1_LK1_MASK             (0x40000000U)
#define XRDC_MDA_W0_5_DFMT1_LK1_SHIFT            (30U)
/*! LK1 - 1-bit Lock
 *  0b0..Register can be written by any secure privileged write.
 *  0b1..Register is locked (read-only) until the next reset.
 */
#define XRDC_MDA_W0_5_DFMT1_LK1(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_5_DFMT1_LK1_SHIFT)) & XRDC_MDA_W0_5_DFMT1_LK1_MASK)

#define XRDC_MDA_W0_5_DFMT1_VLD_MASK             (0x80000000U)
#define XRDC_MDA_W0_5_DFMT1_VLD_SHIFT            (31U)
/*! VLD - Valid
 *  0b0..The Wr domain assignment is invalid.
 *  0b1..The Wr domain assignment is valid.
 */
#define XRDC_MDA_W0_5_DFMT1_VLD(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_5_DFMT1_VLD_SHIFT)) & XRDC_MDA_W0_5_DFMT1_VLD_MASK)
/*! @} */

/*! @name MDA_W0_6_DFMT1 - Master Domain Assignment */
/*! @{ */

#define XRDC_MDA_W0_6_DFMT1_DID_MASK             (0xFU)
#define XRDC_MDA_W0_6_DFMT1_DID_SHIFT            (0U)
/*! DID - Domain identifier */
#define XRDC_MDA_W0_6_DFMT1_DID(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_6_DFMT1_DID_SHIFT)) & XRDC_MDA_W0_6_DFMT1_DID_MASK)

#define XRDC_MDA_W0_6_DFMT1_PA_MASK              (0x30U)
#define XRDC_MDA_W0_6_DFMT1_PA_SHIFT             (4U)
/*! PA - Privileged attribute
 *  0b00..Force the bus attribute for this master to user.
 *  0b01..Force the bus attribute for this master to privileged.
 *  0b10..Use the bus master's privileged/user attribute directly.
 *  0b11..Use the bus master's privileged/user attribute directly.
 */
#define XRDC_MDA_W0_6_DFMT1_PA(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_6_DFMT1_PA_SHIFT)) & XRDC_MDA_W0_6_DFMT1_PA_MASK)

#define XRDC_MDA_W0_6_DFMT1_SA_MASK              (0xC0U)
#define XRDC_MDA_W0_6_DFMT1_SA_SHIFT             (6U)
/*! SA - Secure attribute
 *  0b00..Force the bus attribute for this master to secure.
 *  0b01..Force the bus attribute for this master to nonsecure.
 *  0b10..Use the bus master's secure/nonsecure attribute directly.
 *  0b11..Use the bus master's secure/nonsecure attribute directly.
 */
#define XRDC_MDA_W0_6_DFMT1_SA(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_6_DFMT1_SA_SHIFT)) & XRDC_MDA_W0_6_DFMT1_SA_MASK)

#define XRDC_MDA_W0_6_DFMT1_DIDB_MASK            (0x100U)
#define XRDC_MDA_W0_6_DFMT1_DIDB_SHIFT           (8U)
/*! DIDB - DID Bypass
 *  0b0..Use MDAn[3:0] as the domain identifier.
 *  0b1..Use the DID input as the domain identifier.
 */
#define XRDC_MDA_W0_6_DFMT1_DIDB(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_6_DFMT1_DIDB_SHIFT)) & XRDC_MDA_W0_6_DFMT1_DIDB_MASK)

#define XRDC_MDA_W0_6_DFMT1_DFMT_MASK            (0x20000000U)
#define XRDC_MDA_W0_6_DFMT1_DFMT_SHIFT           (29U)
/*! DFMT - Domain format
 *  0b0..Processor-core domain assignment
 *  0b1..Non-processor domain assignment
 */
#define XRDC_MDA_W0_6_DFMT1_DFMT(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_6_DFMT1_DFMT_SHIFT)) & XRDC_MDA_W0_6_DFMT1_DFMT_MASK)

#define XRDC_MDA_W0_6_DFMT1_LK1_MASK             (0x40000000U)
#define XRDC_MDA_W0_6_DFMT1_LK1_SHIFT            (30U)
/*! LK1 - 1-bit Lock
 *  0b0..Register can be written by any secure privileged write.
 *  0b1..Register is locked (read-only) until the next reset.
 */
#define XRDC_MDA_W0_6_DFMT1_LK1(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_6_DFMT1_LK1_SHIFT)) & XRDC_MDA_W0_6_DFMT1_LK1_MASK)

#define XRDC_MDA_W0_6_DFMT1_VLD_MASK             (0x80000000U)
#define XRDC_MDA_W0_6_DFMT1_VLD_SHIFT            (31U)
/*! VLD - Valid
 *  0b0..The Wr domain assignment is invalid.
 *  0b1..The Wr domain assignment is valid.
 */
#define XRDC_MDA_W0_6_DFMT1_VLD(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_6_DFMT1_VLD_SHIFT)) & XRDC_MDA_W0_6_DFMT1_VLD_MASK)
/*! @} */

/*! @name MDA_W0_7_DFMT1 - Master Domain Assignment */
/*! @{ */

#define XRDC_MDA_W0_7_DFMT1_DID_MASK             (0xFU)
#define XRDC_MDA_W0_7_DFMT1_DID_SHIFT            (0U)
/*! DID - Domain identifier */
#define XRDC_MDA_W0_7_DFMT1_DID(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_7_DFMT1_DID_SHIFT)) & XRDC_MDA_W0_7_DFMT1_DID_MASK)

#define XRDC_MDA_W0_7_DFMT1_PA_MASK              (0x30U)
#define XRDC_MDA_W0_7_DFMT1_PA_SHIFT             (4U)
/*! PA - Privileged attribute
 *  0b00..Force the bus attribute for this master to user.
 *  0b01..Force the bus attribute for this master to privileged.
 *  0b10..Use the bus master's privileged/user attribute directly.
 *  0b11..Use the bus master's privileged/user attribute directly.
 */
#define XRDC_MDA_W0_7_DFMT1_PA(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_7_DFMT1_PA_SHIFT)) & XRDC_MDA_W0_7_DFMT1_PA_MASK)

#define XRDC_MDA_W0_7_DFMT1_SA_MASK              (0xC0U)
#define XRDC_MDA_W0_7_DFMT1_SA_SHIFT             (6U)
/*! SA - Secure attribute
 *  0b00..Force the bus attribute for this master to secure.
 *  0b01..Force the bus attribute for this master to nonsecure.
 *  0b10..Use the bus master's secure/nonsecure attribute directly.
 *  0b11..Use the bus master's secure/nonsecure attribute directly.
 */
#define XRDC_MDA_W0_7_DFMT1_SA(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_7_DFMT1_SA_SHIFT)) & XRDC_MDA_W0_7_DFMT1_SA_MASK)

#define XRDC_MDA_W0_7_DFMT1_DIDB_MASK            (0x100U)
#define XRDC_MDA_W0_7_DFMT1_DIDB_SHIFT           (8U)
/*! DIDB - DID Bypass
 *  0b0..Use MDAn[3:0] as the domain identifier.
 *  0b1..Use the DID input as the domain identifier.
 */
#define XRDC_MDA_W0_7_DFMT1_DIDB(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_7_DFMT1_DIDB_SHIFT)) & XRDC_MDA_W0_7_DFMT1_DIDB_MASK)

#define XRDC_MDA_W0_7_DFMT1_DFMT_MASK            (0x20000000U)
#define XRDC_MDA_W0_7_DFMT1_DFMT_SHIFT           (29U)
/*! DFMT - Domain format
 *  0b0..Processor-core domain assignment
 *  0b1..Non-processor domain assignment
 */
#define XRDC_MDA_W0_7_DFMT1_DFMT(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_7_DFMT1_DFMT_SHIFT)) & XRDC_MDA_W0_7_DFMT1_DFMT_MASK)

#define XRDC_MDA_W0_7_DFMT1_LK1_MASK             (0x40000000U)
#define XRDC_MDA_W0_7_DFMT1_LK1_SHIFT            (30U)
/*! LK1 - 1-bit Lock
 *  0b0..Register can be written by any secure privileged write.
 *  0b1..Register is locked (read-only) until the next reset.
 */
#define XRDC_MDA_W0_7_DFMT1_LK1(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_7_DFMT1_LK1_SHIFT)) & XRDC_MDA_W0_7_DFMT1_LK1_MASK)

#define XRDC_MDA_W0_7_DFMT1_VLD_MASK             (0x80000000U)
#define XRDC_MDA_W0_7_DFMT1_VLD_SHIFT            (31U)
/*! VLD - Valid
 *  0b0..The Wr domain assignment is invalid.
 *  0b1..The Wr domain assignment is valid.
 */
#define XRDC_MDA_W0_7_DFMT1_VLD(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_7_DFMT1_VLD_SHIFT)) & XRDC_MDA_W0_7_DFMT1_VLD_MASK)
/*! @} */

/*! @name MDA_W0_8_DFMT1 - Master Domain Assignment */
/*! @{ */

#define XRDC_MDA_W0_8_DFMT1_DID_MASK             (0xFU)
#define XRDC_MDA_W0_8_DFMT1_DID_SHIFT            (0U)
/*! DID - Domain identifier */
#define XRDC_MDA_W0_8_DFMT1_DID(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_8_DFMT1_DID_SHIFT)) & XRDC_MDA_W0_8_DFMT1_DID_MASK)

#define XRDC_MDA_W0_8_DFMT1_PA_MASK              (0x30U)
#define XRDC_MDA_W0_8_DFMT1_PA_SHIFT             (4U)
/*! PA - Privileged attribute
 *  0b00..Force the bus attribute for this master to user.
 *  0b01..Force the bus attribute for this master to privileged.
 *  0b10..Use the bus master's privileged/user attribute directly.
 *  0b11..Use the bus master's privileged/user attribute directly.
 */
#define XRDC_MDA_W0_8_DFMT1_PA(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_8_DFMT1_PA_SHIFT)) & XRDC_MDA_W0_8_DFMT1_PA_MASK)

#define XRDC_MDA_W0_8_DFMT1_SA_MASK              (0xC0U)
#define XRDC_MDA_W0_8_DFMT1_SA_SHIFT             (6U)
/*! SA - Secure attribute
 *  0b00..Force the bus attribute for this master to secure.
 *  0b01..Force the bus attribute for this master to nonsecure.
 *  0b10..Use the bus master's secure/nonsecure attribute directly.
 *  0b11..Use the bus master's secure/nonsecure attribute directly.
 */
#define XRDC_MDA_W0_8_DFMT1_SA(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_8_DFMT1_SA_SHIFT)) & XRDC_MDA_W0_8_DFMT1_SA_MASK)

#define XRDC_MDA_W0_8_DFMT1_DIDB_MASK            (0x100U)
#define XRDC_MDA_W0_8_DFMT1_DIDB_SHIFT           (8U)
/*! DIDB - DID Bypass
 *  0b0..Use MDAn[3:0] as the domain identifier.
 *  0b1..Use the DID input as the domain identifier.
 */
#define XRDC_MDA_W0_8_DFMT1_DIDB(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_8_DFMT1_DIDB_SHIFT)) & XRDC_MDA_W0_8_DFMT1_DIDB_MASK)

#define XRDC_MDA_W0_8_DFMT1_DFMT_MASK            (0x20000000U)
#define XRDC_MDA_W0_8_DFMT1_DFMT_SHIFT           (29U)
/*! DFMT - Domain format
 *  0b0..Processor-core domain assignment
 *  0b1..Non-processor domain assignment
 */
#define XRDC_MDA_W0_8_DFMT1_DFMT(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_8_DFMT1_DFMT_SHIFT)) & XRDC_MDA_W0_8_DFMT1_DFMT_MASK)

#define XRDC_MDA_W0_8_DFMT1_LK1_MASK             (0x40000000U)
#define XRDC_MDA_W0_8_DFMT1_LK1_SHIFT            (30U)
/*! LK1 - 1-bit Lock
 *  0b0..Register can be written by any secure privileged write.
 *  0b1..Register is locked (read-only) until the next reset.
 */
#define XRDC_MDA_W0_8_DFMT1_LK1(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_8_DFMT1_LK1_SHIFT)) & XRDC_MDA_W0_8_DFMT1_LK1_MASK)

#define XRDC_MDA_W0_8_DFMT1_VLD_MASK             (0x80000000U)
#define XRDC_MDA_W0_8_DFMT1_VLD_SHIFT            (31U)
/*! VLD - Valid
 *  0b0..The Wr domain assignment is invalid.
 *  0b1..The Wr domain assignment is valid.
 */
#define XRDC_MDA_W0_8_DFMT1_VLD(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_8_DFMT1_VLD_SHIFT)) & XRDC_MDA_W0_8_DFMT1_VLD_MASK)
/*! @} */

/*! @name MDA_W0_9_DFMT1 - Master Domain Assignment */
/*! @{ */

#define XRDC_MDA_W0_9_DFMT1_DID_MASK             (0xFU)
#define XRDC_MDA_W0_9_DFMT1_DID_SHIFT            (0U)
/*! DID - Domain identifier */
#define XRDC_MDA_W0_9_DFMT1_DID(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_9_DFMT1_DID_SHIFT)) & XRDC_MDA_W0_9_DFMT1_DID_MASK)

#define XRDC_MDA_W0_9_DFMT1_PA_MASK              (0x30U)
#define XRDC_MDA_W0_9_DFMT1_PA_SHIFT             (4U)
/*! PA - Privileged attribute
 *  0b00..Force the bus attribute for this master to user.
 *  0b01..Force the bus attribute for this master to privileged.
 *  0b10..Use the bus master's privileged/user attribute directly.
 *  0b11..Use the bus master's privileged/user attribute directly.
 */
#define XRDC_MDA_W0_9_DFMT1_PA(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_9_DFMT1_PA_SHIFT)) & XRDC_MDA_W0_9_DFMT1_PA_MASK)

#define XRDC_MDA_W0_9_DFMT1_SA_MASK              (0xC0U)
#define XRDC_MDA_W0_9_DFMT1_SA_SHIFT             (6U)
/*! SA - Secure attribute
 *  0b00..Force the bus attribute for this master to secure.
 *  0b01..Force the bus attribute for this master to nonsecure.
 *  0b10..Use the bus master's secure/nonsecure attribute directly.
 *  0b11..Use the bus master's secure/nonsecure attribute directly.
 */
#define XRDC_MDA_W0_9_DFMT1_SA(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_9_DFMT1_SA_SHIFT)) & XRDC_MDA_W0_9_DFMT1_SA_MASK)

#define XRDC_MDA_W0_9_DFMT1_DIDB_MASK            (0x100U)
#define XRDC_MDA_W0_9_DFMT1_DIDB_SHIFT           (8U)
/*! DIDB - DID Bypass
 *  0b0..Use MDAn[3:0] as the domain identifier.
 *  0b1..Use the DID input as the domain identifier.
 */
#define XRDC_MDA_W0_9_DFMT1_DIDB(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_9_DFMT1_DIDB_SHIFT)) & XRDC_MDA_W0_9_DFMT1_DIDB_MASK)

#define XRDC_MDA_W0_9_DFMT1_DFMT_MASK            (0x20000000U)
#define XRDC_MDA_W0_9_DFMT1_DFMT_SHIFT           (29U)
/*! DFMT - Domain format
 *  0b0..Processor-core domain assignment
 *  0b1..Non-processor domain assignment
 */
#define XRDC_MDA_W0_9_DFMT1_DFMT(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_9_DFMT1_DFMT_SHIFT)) & XRDC_MDA_W0_9_DFMT1_DFMT_MASK)

#define XRDC_MDA_W0_9_DFMT1_LK1_MASK             (0x40000000U)
#define XRDC_MDA_W0_9_DFMT1_LK1_SHIFT            (30U)
/*! LK1 - 1-bit Lock
 *  0b0..Register can be written by any secure privileged write.
 *  0b1..Register is locked (read-only) until the next reset.
 */
#define XRDC_MDA_W0_9_DFMT1_LK1(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_9_DFMT1_LK1_SHIFT)) & XRDC_MDA_W0_9_DFMT1_LK1_MASK)

#define XRDC_MDA_W0_9_DFMT1_VLD_MASK             (0x80000000U)
#define XRDC_MDA_W0_9_DFMT1_VLD_SHIFT            (31U)
/*! VLD - Valid
 *  0b0..The Wr domain assignment is invalid.
 *  0b1..The Wr domain assignment is valid.
 */
#define XRDC_MDA_W0_9_DFMT1_VLD(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_9_DFMT1_VLD_SHIFT)) & XRDC_MDA_W0_9_DFMT1_VLD_MASK)
/*! @} */

/*! @name MDA_W0_10_DFMT1 - Master Domain Assignment */
/*! @{ */

#define XRDC_MDA_W0_10_DFMT1_DID_MASK            (0xFU)
#define XRDC_MDA_W0_10_DFMT1_DID_SHIFT           (0U)
/*! DID - Domain identifier */
#define XRDC_MDA_W0_10_DFMT1_DID(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_10_DFMT1_DID_SHIFT)) & XRDC_MDA_W0_10_DFMT1_DID_MASK)

#define XRDC_MDA_W0_10_DFMT1_PA_MASK             (0x30U)
#define XRDC_MDA_W0_10_DFMT1_PA_SHIFT            (4U)
/*! PA - Privileged attribute
 *  0b00..Force the bus attribute for this master to user.
 *  0b01..Force the bus attribute for this master to privileged.
 *  0b10..Use the bus master's privileged/user attribute directly.
 *  0b11..Use the bus master's privileged/user attribute directly.
 */
#define XRDC_MDA_W0_10_DFMT1_PA(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_10_DFMT1_PA_SHIFT)) & XRDC_MDA_W0_10_DFMT1_PA_MASK)

#define XRDC_MDA_W0_10_DFMT1_SA_MASK             (0xC0U)
#define XRDC_MDA_W0_10_DFMT1_SA_SHIFT            (6U)
/*! SA - Secure attribute
 *  0b00..Force the bus attribute for this master to secure.
 *  0b01..Force the bus attribute for this master to nonsecure.
 *  0b10..Use the bus master's secure/nonsecure attribute directly.
 *  0b11..Use the bus master's secure/nonsecure attribute directly.
 */
#define XRDC_MDA_W0_10_DFMT1_SA(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_10_DFMT1_SA_SHIFT)) & XRDC_MDA_W0_10_DFMT1_SA_MASK)

#define XRDC_MDA_W0_10_DFMT1_DIDB_MASK           (0x100U)
#define XRDC_MDA_W0_10_DFMT1_DIDB_SHIFT          (8U)
/*! DIDB - DID Bypass
 *  0b0..Use MDAn[3:0] as the domain identifier.
 *  0b1..Use the DID input as the domain identifier.
 */
#define XRDC_MDA_W0_10_DFMT1_DIDB(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_10_DFMT1_DIDB_SHIFT)) & XRDC_MDA_W0_10_DFMT1_DIDB_MASK)

#define XRDC_MDA_W0_10_DFMT1_DFMT_MASK           (0x20000000U)
#define XRDC_MDA_W0_10_DFMT1_DFMT_SHIFT          (29U)
/*! DFMT - Domain format
 *  0b0..Processor-core domain assignment
 *  0b1..Non-processor domain assignment
 */
#define XRDC_MDA_W0_10_DFMT1_DFMT(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_10_DFMT1_DFMT_SHIFT)) & XRDC_MDA_W0_10_DFMT1_DFMT_MASK)

#define XRDC_MDA_W0_10_DFMT1_LK1_MASK            (0x40000000U)
#define XRDC_MDA_W0_10_DFMT1_LK1_SHIFT           (30U)
/*! LK1 - 1-bit Lock
 *  0b0..Register can be written by any secure privileged write.
 *  0b1..Register is locked (read-only) until the next reset.
 */
#define XRDC_MDA_W0_10_DFMT1_LK1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_10_DFMT1_LK1_SHIFT)) & XRDC_MDA_W0_10_DFMT1_LK1_MASK)

#define XRDC_MDA_W0_10_DFMT1_VLD_MASK            (0x80000000U)
#define XRDC_MDA_W0_10_DFMT1_VLD_SHIFT           (31U)
/*! VLD - Valid
 *  0b0..The Wr domain assignment is invalid.
 *  0b1..The Wr domain assignment is valid.
 */
#define XRDC_MDA_W0_10_DFMT1_VLD(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_10_DFMT1_VLD_SHIFT)) & XRDC_MDA_W0_10_DFMT1_VLD_MASK)
/*! @} */

/*! @name MDA_W0_11_DFMT1 - Master Domain Assignment */
/*! @{ */

#define XRDC_MDA_W0_11_DFMT1_DID_MASK            (0xFU)
#define XRDC_MDA_W0_11_DFMT1_DID_SHIFT           (0U)
/*! DID - Domain identifier */
#define XRDC_MDA_W0_11_DFMT1_DID(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_11_DFMT1_DID_SHIFT)) & XRDC_MDA_W0_11_DFMT1_DID_MASK)

#define XRDC_MDA_W0_11_DFMT1_PA_MASK             (0x30U)
#define XRDC_MDA_W0_11_DFMT1_PA_SHIFT            (4U)
/*! PA - Privileged attribute
 *  0b00..Force the bus attribute for this master to user.
 *  0b01..Force the bus attribute for this master to privileged.
 *  0b10..Use the bus master's privileged/user attribute directly.
 *  0b11..Use the bus master's privileged/user attribute directly.
 */
#define XRDC_MDA_W0_11_DFMT1_PA(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_11_DFMT1_PA_SHIFT)) & XRDC_MDA_W0_11_DFMT1_PA_MASK)

#define XRDC_MDA_W0_11_DFMT1_SA_MASK             (0xC0U)
#define XRDC_MDA_W0_11_DFMT1_SA_SHIFT            (6U)
/*! SA - Secure attribute
 *  0b00..Force the bus attribute for this master to secure.
 *  0b01..Force the bus attribute for this master to nonsecure.
 *  0b10..Use the bus master's secure/nonsecure attribute directly.
 *  0b11..Use the bus master's secure/nonsecure attribute directly.
 */
#define XRDC_MDA_W0_11_DFMT1_SA(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_11_DFMT1_SA_SHIFT)) & XRDC_MDA_W0_11_DFMT1_SA_MASK)

#define XRDC_MDA_W0_11_DFMT1_DIDB_MASK           (0x100U)
#define XRDC_MDA_W0_11_DFMT1_DIDB_SHIFT          (8U)
/*! DIDB - DID Bypass
 *  0b0..Use MDAn[3:0] as the domain identifier.
 *  0b1..Use the DID input as the domain identifier.
 */
#define XRDC_MDA_W0_11_DFMT1_DIDB(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_11_DFMT1_DIDB_SHIFT)) & XRDC_MDA_W0_11_DFMT1_DIDB_MASK)

#define XRDC_MDA_W0_11_DFMT1_DFMT_MASK           (0x20000000U)
#define XRDC_MDA_W0_11_DFMT1_DFMT_SHIFT          (29U)
/*! DFMT - Domain format
 *  0b0..Processor-core domain assignment
 *  0b1..Non-processor domain assignment
 */
#define XRDC_MDA_W0_11_DFMT1_DFMT(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_11_DFMT1_DFMT_SHIFT)) & XRDC_MDA_W0_11_DFMT1_DFMT_MASK)

#define XRDC_MDA_W0_11_DFMT1_LK1_MASK            (0x40000000U)
#define XRDC_MDA_W0_11_DFMT1_LK1_SHIFT           (30U)
/*! LK1 - 1-bit Lock
 *  0b0..Register can be written by any secure privileged write.
 *  0b1..Register is locked (read-only) until the next reset.
 */
#define XRDC_MDA_W0_11_DFMT1_LK1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_11_DFMT1_LK1_SHIFT)) & XRDC_MDA_W0_11_DFMT1_LK1_MASK)

#define XRDC_MDA_W0_11_DFMT1_VLD_MASK            (0x80000000U)
#define XRDC_MDA_W0_11_DFMT1_VLD_SHIFT           (31U)
/*! VLD - Valid
 *  0b0..The Wr domain assignment is invalid.
 *  0b1..The Wr domain assignment is valid.
 */
#define XRDC_MDA_W0_11_DFMT1_VLD(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_11_DFMT1_VLD_SHIFT)) & XRDC_MDA_W0_11_DFMT1_VLD_MASK)
/*! @} */

/*! @name MDA_W0_12_DFMT1 - Master Domain Assignment */
/*! @{ */

#define XRDC_MDA_W0_12_DFMT1_DID_MASK            (0xFU)
#define XRDC_MDA_W0_12_DFMT1_DID_SHIFT           (0U)
/*! DID - Domain identifier */
#define XRDC_MDA_W0_12_DFMT1_DID(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_12_DFMT1_DID_SHIFT)) & XRDC_MDA_W0_12_DFMT1_DID_MASK)

#define XRDC_MDA_W0_12_DFMT1_PA_MASK             (0x30U)
#define XRDC_MDA_W0_12_DFMT1_PA_SHIFT            (4U)
/*! PA - Privileged attribute
 *  0b00..Force the bus attribute for this master to user.
 *  0b01..Force the bus attribute for this master to privileged.
 *  0b10..Use the bus master's privileged/user attribute directly.
 *  0b11..Use the bus master's privileged/user attribute directly.
 */
#define XRDC_MDA_W0_12_DFMT1_PA(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_12_DFMT1_PA_SHIFT)) & XRDC_MDA_W0_12_DFMT1_PA_MASK)

#define XRDC_MDA_W0_12_DFMT1_SA_MASK             (0xC0U)
#define XRDC_MDA_W0_12_DFMT1_SA_SHIFT            (6U)
/*! SA - Secure attribute
 *  0b00..Force the bus attribute for this master to secure.
 *  0b01..Force the bus attribute for this master to nonsecure.
 *  0b10..Use the bus master's secure/nonsecure attribute directly.
 *  0b11..Use the bus master's secure/nonsecure attribute directly.
 */
#define XRDC_MDA_W0_12_DFMT1_SA(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_12_DFMT1_SA_SHIFT)) & XRDC_MDA_W0_12_DFMT1_SA_MASK)

#define XRDC_MDA_W0_12_DFMT1_DIDB_MASK           (0x100U)
#define XRDC_MDA_W0_12_DFMT1_DIDB_SHIFT          (8U)
/*! DIDB - DID Bypass
 *  0b0..Use MDAn[3:0] as the domain identifier.
 *  0b1..Use the DID input as the domain identifier.
 */
#define XRDC_MDA_W0_12_DFMT1_DIDB(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_12_DFMT1_DIDB_SHIFT)) & XRDC_MDA_W0_12_DFMT1_DIDB_MASK)

#define XRDC_MDA_W0_12_DFMT1_DFMT_MASK           (0x20000000U)
#define XRDC_MDA_W0_12_DFMT1_DFMT_SHIFT          (29U)
/*! DFMT - Domain format
 *  0b0..Processor-core domain assignment
 *  0b1..Non-processor domain assignment
 */
#define XRDC_MDA_W0_12_DFMT1_DFMT(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_12_DFMT1_DFMT_SHIFT)) & XRDC_MDA_W0_12_DFMT1_DFMT_MASK)

#define XRDC_MDA_W0_12_DFMT1_LK1_MASK            (0x40000000U)
#define XRDC_MDA_W0_12_DFMT1_LK1_SHIFT           (30U)
/*! LK1 - 1-bit Lock
 *  0b0..Register can be written by any secure privileged write.
 *  0b1..Register is locked (read-only) until the next reset.
 */
#define XRDC_MDA_W0_12_DFMT1_LK1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_12_DFMT1_LK1_SHIFT)) & XRDC_MDA_W0_12_DFMT1_LK1_MASK)

#define XRDC_MDA_W0_12_DFMT1_VLD_MASK            (0x80000000U)
#define XRDC_MDA_W0_12_DFMT1_VLD_SHIFT           (31U)
/*! VLD - Valid
 *  0b0..The Wr domain assignment is invalid.
 *  0b1..The Wr domain assignment is valid.
 */
#define XRDC_MDA_W0_12_DFMT1_VLD(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_12_DFMT1_VLD_SHIFT)) & XRDC_MDA_W0_12_DFMT1_VLD_MASK)
/*! @} */

/*! @name MDA_W0_13_DFMT1 - Master Domain Assignment */
/*! @{ */

#define XRDC_MDA_W0_13_DFMT1_DID_MASK            (0xFU)
#define XRDC_MDA_W0_13_DFMT1_DID_SHIFT           (0U)
/*! DID - Domain identifier */
#define XRDC_MDA_W0_13_DFMT1_DID(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_13_DFMT1_DID_SHIFT)) & XRDC_MDA_W0_13_DFMT1_DID_MASK)

#define XRDC_MDA_W0_13_DFMT1_PA_MASK             (0x30U)
#define XRDC_MDA_W0_13_DFMT1_PA_SHIFT            (4U)
/*! PA - Privileged attribute
 *  0b00..Force the bus attribute for this master to user.
 *  0b01..Force the bus attribute for this master to privileged.
 *  0b10..Use the bus master's privileged/user attribute directly.
 *  0b11..Use the bus master's privileged/user attribute directly.
 */
#define XRDC_MDA_W0_13_DFMT1_PA(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_13_DFMT1_PA_SHIFT)) & XRDC_MDA_W0_13_DFMT1_PA_MASK)

#define XRDC_MDA_W0_13_DFMT1_SA_MASK             (0xC0U)
#define XRDC_MDA_W0_13_DFMT1_SA_SHIFT            (6U)
/*! SA - Secure attribute
 *  0b00..Force the bus attribute for this master to secure.
 *  0b01..Force the bus attribute for this master to nonsecure.
 *  0b10..Use the bus master's secure/nonsecure attribute directly.
 *  0b11..Use the bus master's secure/nonsecure attribute directly.
 */
#define XRDC_MDA_W0_13_DFMT1_SA(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_13_DFMT1_SA_SHIFT)) & XRDC_MDA_W0_13_DFMT1_SA_MASK)

#define XRDC_MDA_W0_13_DFMT1_DIDB_MASK           (0x100U)
#define XRDC_MDA_W0_13_DFMT1_DIDB_SHIFT          (8U)
/*! DIDB - DID Bypass
 *  0b0..Use MDAn[3:0] as the domain identifier.
 *  0b1..Use the DID input as the domain identifier.
 */
#define XRDC_MDA_W0_13_DFMT1_DIDB(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_13_DFMT1_DIDB_SHIFT)) & XRDC_MDA_W0_13_DFMT1_DIDB_MASK)

#define XRDC_MDA_W0_13_DFMT1_DFMT_MASK           (0x20000000U)
#define XRDC_MDA_W0_13_DFMT1_DFMT_SHIFT          (29U)
/*! DFMT - Domain format
 *  0b0..Processor-core domain assignment
 *  0b1..Non-processor domain assignment
 */
#define XRDC_MDA_W0_13_DFMT1_DFMT(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_13_DFMT1_DFMT_SHIFT)) & XRDC_MDA_W0_13_DFMT1_DFMT_MASK)

#define XRDC_MDA_W0_13_DFMT1_LK1_MASK            (0x40000000U)
#define XRDC_MDA_W0_13_DFMT1_LK1_SHIFT           (30U)
/*! LK1 - 1-bit Lock
 *  0b0..Register can be written by any secure privileged write.
 *  0b1..Register is locked (read-only) until the next reset.
 */
#define XRDC_MDA_W0_13_DFMT1_LK1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_13_DFMT1_LK1_SHIFT)) & XRDC_MDA_W0_13_DFMT1_LK1_MASK)

#define XRDC_MDA_W0_13_DFMT1_VLD_MASK            (0x80000000U)
#define XRDC_MDA_W0_13_DFMT1_VLD_SHIFT           (31U)
/*! VLD - Valid
 *  0b0..The Wr domain assignment is invalid.
 *  0b1..The Wr domain assignment is valid.
 */
#define XRDC_MDA_W0_13_DFMT1_VLD(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_13_DFMT1_VLD_SHIFT)) & XRDC_MDA_W0_13_DFMT1_VLD_MASK)
/*! @} */

/*! @name MDA_W0_14_DFMT1 - Master Domain Assignment */
/*! @{ */

#define XRDC_MDA_W0_14_DFMT1_DID_MASK            (0xFU)
#define XRDC_MDA_W0_14_DFMT1_DID_SHIFT           (0U)
/*! DID - Domain identifier */
#define XRDC_MDA_W0_14_DFMT1_DID(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_14_DFMT1_DID_SHIFT)) & XRDC_MDA_W0_14_DFMT1_DID_MASK)

#define XRDC_MDA_W0_14_DFMT1_PA_MASK             (0x30U)
#define XRDC_MDA_W0_14_DFMT1_PA_SHIFT            (4U)
/*! PA - Privileged attribute
 *  0b00..Force the bus attribute for this master to user.
 *  0b01..Force the bus attribute for this master to privileged.
 *  0b10..Use the bus master's privileged/user attribute directly.
 *  0b11..Use the bus master's privileged/user attribute directly.
 */
#define XRDC_MDA_W0_14_DFMT1_PA(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_14_DFMT1_PA_SHIFT)) & XRDC_MDA_W0_14_DFMT1_PA_MASK)

#define XRDC_MDA_W0_14_DFMT1_SA_MASK             (0xC0U)
#define XRDC_MDA_W0_14_DFMT1_SA_SHIFT            (6U)
/*! SA - Secure attribute
 *  0b00..Force the bus attribute for this master to secure.
 *  0b01..Force the bus attribute for this master to nonsecure.
 *  0b10..Use the bus master's secure/nonsecure attribute directly.
 *  0b11..Use the bus master's secure/nonsecure attribute directly.
 */
#define XRDC_MDA_W0_14_DFMT1_SA(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_14_DFMT1_SA_SHIFT)) & XRDC_MDA_W0_14_DFMT1_SA_MASK)

#define XRDC_MDA_W0_14_DFMT1_DIDB_MASK           (0x100U)
#define XRDC_MDA_W0_14_DFMT1_DIDB_SHIFT          (8U)
/*! DIDB - DID Bypass
 *  0b0..Use MDAn[3:0] as the domain identifier.
 *  0b1..Use the DID input as the domain identifier.
 */
#define XRDC_MDA_W0_14_DFMT1_DIDB(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_14_DFMT1_DIDB_SHIFT)) & XRDC_MDA_W0_14_DFMT1_DIDB_MASK)

#define XRDC_MDA_W0_14_DFMT1_DFMT_MASK           (0x20000000U)
#define XRDC_MDA_W0_14_DFMT1_DFMT_SHIFT          (29U)
/*! DFMT - Domain format
 *  0b0..Processor-core domain assignment
 *  0b1..Non-processor domain assignment
 */
#define XRDC_MDA_W0_14_DFMT1_DFMT(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_14_DFMT1_DFMT_SHIFT)) & XRDC_MDA_W0_14_DFMT1_DFMT_MASK)

#define XRDC_MDA_W0_14_DFMT1_LK1_MASK            (0x40000000U)
#define XRDC_MDA_W0_14_DFMT1_LK1_SHIFT           (30U)
/*! LK1 - 1-bit Lock
 *  0b0..Register can be written by any secure privileged write.
 *  0b1..Register is locked (read-only) until the next reset.
 */
#define XRDC_MDA_W0_14_DFMT1_LK1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_14_DFMT1_LK1_SHIFT)) & XRDC_MDA_W0_14_DFMT1_LK1_MASK)

#define XRDC_MDA_W0_14_DFMT1_VLD_MASK            (0x80000000U)
#define XRDC_MDA_W0_14_DFMT1_VLD_SHIFT           (31U)
/*! VLD - Valid
 *  0b0..The Wr domain assignment is invalid.
 *  0b1..The Wr domain assignment is valid.
 */
#define XRDC_MDA_W0_14_DFMT1_VLD(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_14_DFMT1_VLD_SHIFT)) & XRDC_MDA_W0_14_DFMT1_VLD_MASK)
/*! @} */

/*! @name MDA_W0_15_DFMT1 - Master Domain Assignment */
/*! @{ */

#define XRDC_MDA_W0_15_DFMT1_DID_MASK            (0xFU)
#define XRDC_MDA_W0_15_DFMT1_DID_SHIFT           (0U)
/*! DID - Domain identifier */
#define XRDC_MDA_W0_15_DFMT1_DID(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_15_DFMT1_DID_SHIFT)) & XRDC_MDA_W0_15_DFMT1_DID_MASK)

#define XRDC_MDA_W0_15_DFMT1_PA_MASK             (0x30U)
#define XRDC_MDA_W0_15_DFMT1_PA_SHIFT            (4U)
/*! PA - Privileged attribute
 *  0b00..Force the bus attribute for this master to user.
 *  0b01..Force the bus attribute for this master to privileged.
 *  0b10..Use the bus master's privileged/user attribute directly.
 *  0b11..Use the bus master's privileged/user attribute directly.
 */
#define XRDC_MDA_W0_15_DFMT1_PA(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_15_DFMT1_PA_SHIFT)) & XRDC_MDA_W0_15_DFMT1_PA_MASK)

#define XRDC_MDA_W0_15_DFMT1_SA_MASK             (0xC0U)
#define XRDC_MDA_W0_15_DFMT1_SA_SHIFT            (6U)
/*! SA - Secure attribute
 *  0b00..Force the bus attribute for this master to secure.
 *  0b01..Force the bus attribute for this master to nonsecure.
 *  0b10..Use the bus master's secure/nonsecure attribute directly.
 *  0b11..Use the bus master's secure/nonsecure attribute directly.
 */
#define XRDC_MDA_W0_15_DFMT1_SA(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_15_DFMT1_SA_SHIFT)) & XRDC_MDA_W0_15_DFMT1_SA_MASK)

#define XRDC_MDA_W0_15_DFMT1_DIDB_MASK           (0x100U)
#define XRDC_MDA_W0_15_DFMT1_DIDB_SHIFT          (8U)
/*! DIDB - DID Bypass
 *  0b0..Use MDAn[3:0] as the domain identifier.
 *  0b1..Use the DID input as the domain identifier.
 */
#define XRDC_MDA_W0_15_DFMT1_DIDB(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_15_DFMT1_DIDB_SHIFT)) & XRDC_MDA_W0_15_DFMT1_DIDB_MASK)

#define XRDC_MDA_W0_15_DFMT1_DFMT_MASK           (0x20000000U)
#define XRDC_MDA_W0_15_DFMT1_DFMT_SHIFT          (29U)
/*! DFMT - Domain format
 *  0b0..Processor-core domain assignment
 *  0b1..Non-processor domain assignment
 */
#define XRDC_MDA_W0_15_DFMT1_DFMT(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_15_DFMT1_DFMT_SHIFT)) & XRDC_MDA_W0_15_DFMT1_DFMT_MASK)

#define XRDC_MDA_W0_15_DFMT1_LK1_MASK            (0x40000000U)
#define XRDC_MDA_W0_15_DFMT1_LK1_SHIFT           (30U)
/*! LK1 - 1-bit Lock
 *  0b0..Register can be written by any secure privileged write.
 *  0b1..Register is locked (read-only) until the next reset.
 */
#define XRDC_MDA_W0_15_DFMT1_LK1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_15_DFMT1_LK1_SHIFT)) & XRDC_MDA_W0_15_DFMT1_LK1_MASK)

#define XRDC_MDA_W0_15_DFMT1_VLD_MASK            (0x80000000U)
#define XRDC_MDA_W0_15_DFMT1_VLD_SHIFT           (31U)
/*! VLD - Valid
 *  0b0..The Wr domain assignment is invalid.
 *  0b1..The Wr domain assignment is valid.
 */
#define XRDC_MDA_W0_15_DFMT1_VLD(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_15_DFMT1_VLD_SHIFT)) & XRDC_MDA_W0_15_DFMT1_VLD_MASK)
/*! @} */

/*! @name MDA_W0_16_DFMT1 - Master Domain Assignment */
/*! @{ */

#define XRDC_MDA_W0_16_DFMT1_DID_MASK            (0xFU)
#define XRDC_MDA_W0_16_DFMT1_DID_SHIFT           (0U)
/*! DID - Domain identifier */
#define XRDC_MDA_W0_16_DFMT1_DID(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_16_DFMT1_DID_SHIFT)) & XRDC_MDA_W0_16_DFMT1_DID_MASK)

#define XRDC_MDA_W0_16_DFMT1_PA_MASK             (0x30U)
#define XRDC_MDA_W0_16_DFMT1_PA_SHIFT            (4U)
/*! PA - Privileged attribute
 *  0b00..Force the bus attribute for this master to user.
 *  0b01..Force the bus attribute for this master to privileged.
 *  0b10..Use the bus master's privileged/user attribute directly.
 *  0b11..Use the bus master's privileged/user attribute directly.
 */
#define XRDC_MDA_W0_16_DFMT1_PA(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_16_DFMT1_PA_SHIFT)) & XRDC_MDA_W0_16_DFMT1_PA_MASK)

#define XRDC_MDA_W0_16_DFMT1_SA_MASK             (0xC0U)
#define XRDC_MDA_W0_16_DFMT1_SA_SHIFT            (6U)
/*! SA - Secure attribute
 *  0b00..Force the bus attribute for this master to secure.
 *  0b01..Force the bus attribute for this master to nonsecure.
 *  0b10..Use the bus master's secure/nonsecure attribute directly.
 *  0b11..Use the bus master's secure/nonsecure attribute directly.
 */
#define XRDC_MDA_W0_16_DFMT1_SA(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_16_DFMT1_SA_SHIFT)) & XRDC_MDA_W0_16_DFMT1_SA_MASK)

#define XRDC_MDA_W0_16_DFMT1_DIDB_MASK           (0x100U)
#define XRDC_MDA_W0_16_DFMT1_DIDB_SHIFT          (8U)
/*! DIDB - DID Bypass
 *  0b0..Use MDAn[3:0] as the domain identifier.
 *  0b1..Use the DID input as the domain identifier.
 */
#define XRDC_MDA_W0_16_DFMT1_DIDB(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_16_DFMT1_DIDB_SHIFT)) & XRDC_MDA_W0_16_DFMT1_DIDB_MASK)

#define XRDC_MDA_W0_16_DFMT1_DFMT_MASK           (0x20000000U)
#define XRDC_MDA_W0_16_DFMT1_DFMT_SHIFT          (29U)
/*! DFMT - Domain format
 *  0b0..Processor-core domain assignment
 *  0b1..Non-processor domain assignment
 */
#define XRDC_MDA_W0_16_DFMT1_DFMT(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_16_DFMT1_DFMT_SHIFT)) & XRDC_MDA_W0_16_DFMT1_DFMT_MASK)

#define XRDC_MDA_W0_16_DFMT1_LK1_MASK            (0x40000000U)
#define XRDC_MDA_W0_16_DFMT1_LK1_SHIFT           (30U)
/*! LK1 - 1-bit Lock
 *  0b0..Register can be written by any secure privileged write.
 *  0b1..Register is locked (read-only) until the next reset.
 */
#define XRDC_MDA_W0_16_DFMT1_LK1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_16_DFMT1_LK1_SHIFT)) & XRDC_MDA_W0_16_DFMT1_LK1_MASK)

#define XRDC_MDA_W0_16_DFMT1_VLD_MASK            (0x80000000U)
#define XRDC_MDA_W0_16_DFMT1_VLD_SHIFT           (31U)
/*! VLD - Valid
 *  0b0..The Wr domain assignment is invalid.
 *  0b1..The Wr domain assignment is valid.
 */
#define XRDC_MDA_W0_16_DFMT1_VLD(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MDA_W0_16_DFMT1_VLD_SHIFT)) & XRDC_MDA_W0_16_DFMT1_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_0 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_0_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_0_0_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_0_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_0_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_0_D0ACP_MASK)

#define XRDC_PDAC_W0_0_0_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_0_0_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_0_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_0_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_0_D1ACP_MASK)

#define XRDC_PDAC_W0_0_0_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_0_0_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_0_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_0_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_0_D2ACP_MASK)

#define XRDC_PDAC_W0_0_0_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_0_0_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_0_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_0_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_0_D3ACP_MASK)

#define XRDC_PDAC_W0_0_0_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_0_0_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_0_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_0_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_0_D4ACP_MASK)

#define XRDC_PDAC_W0_0_0_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_0_0_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_0_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_0_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_0_D5ACP_MASK)

#define XRDC_PDAC_W0_0_0_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_0_0_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_0_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_0_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_0_D6ACP_MASK)

#define XRDC_PDAC_W0_0_0_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_0_0_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_0_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_0_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_0_D7ACP_MASK)

#define XRDC_PDAC_W0_0_0_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_0_0_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_0_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_0_EALO_SHIFT)) & XRDC_PDAC_W0_0_0_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_0 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_0_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_0_0_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_0_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_0_EAL_SHIFT)) & XRDC_PDAC_W1_0_0_EAL_MASK)

#define XRDC_PDAC_W1_0_0_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_0_0_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_0_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_0_LK2_SHIFT)) & XRDC_PDAC_W1_0_0_LK2_MASK)

#define XRDC_PDAC_W1_0_0_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_0_0_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_0_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_0_VLD_SHIFT)) & XRDC_PDAC_W1_0_0_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_1 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_1_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_0_1_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_1_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_1_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_1_D0ACP_MASK)

#define XRDC_PDAC_W0_0_1_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_0_1_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_1_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_1_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_1_D1ACP_MASK)

#define XRDC_PDAC_W0_0_1_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_0_1_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_1_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_1_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_1_D2ACP_MASK)

#define XRDC_PDAC_W0_0_1_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_0_1_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_1_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_1_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_1_D3ACP_MASK)

#define XRDC_PDAC_W0_0_1_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_0_1_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_1_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_1_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_1_D4ACP_MASK)

#define XRDC_PDAC_W0_0_1_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_0_1_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_1_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_1_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_1_D5ACP_MASK)

#define XRDC_PDAC_W0_0_1_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_0_1_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_1_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_1_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_1_D6ACP_MASK)

#define XRDC_PDAC_W0_0_1_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_0_1_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_1_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_1_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_1_D7ACP_MASK)

#define XRDC_PDAC_W0_0_1_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_0_1_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_1_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_1_EALO_SHIFT)) & XRDC_PDAC_W0_0_1_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_1 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_1_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_0_1_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_1_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_1_EAL_SHIFT)) & XRDC_PDAC_W1_0_1_EAL_MASK)

#define XRDC_PDAC_W1_0_1_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_0_1_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_1_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_1_LK2_SHIFT)) & XRDC_PDAC_W1_0_1_LK2_MASK)

#define XRDC_PDAC_W1_0_1_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_0_1_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_1_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_1_VLD_SHIFT)) & XRDC_PDAC_W1_0_1_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_2 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_2_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_0_2_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_2_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_2_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_2_D0ACP_MASK)

#define XRDC_PDAC_W0_0_2_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_0_2_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_2_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_2_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_2_D1ACP_MASK)

#define XRDC_PDAC_W0_0_2_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_0_2_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_2_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_2_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_2_D2ACP_MASK)

#define XRDC_PDAC_W0_0_2_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_0_2_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_2_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_2_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_2_D3ACP_MASK)

#define XRDC_PDAC_W0_0_2_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_0_2_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_2_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_2_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_2_D4ACP_MASK)

#define XRDC_PDAC_W0_0_2_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_0_2_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_2_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_2_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_2_D5ACP_MASK)

#define XRDC_PDAC_W0_0_2_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_0_2_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_2_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_2_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_2_D6ACP_MASK)

#define XRDC_PDAC_W0_0_2_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_0_2_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_2_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_2_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_2_D7ACP_MASK)

#define XRDC_PDAC_W0_0_2_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_0_2_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_2_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_2_EALO_SHIFT)) & XRDC_PDAC_W0_0_2_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_2 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_2_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_0_2_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_2_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_2_EAL_SHIFT)) & XRDC_PDAC_W1_0_2_EAL_MASK)

#define XRDC_PDAC_W1_0_2_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_0_2_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_2_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_2_LK2_SHIFT)) & XRDC_PDAC_W1_0_2_LK2_MASK)

#define XRDC_PDAC_W1_0_2_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_0_2_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_2_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_2_VLD_SHIFT)) & XRDC_PDAC_W1_0_2_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_3 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_3_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_0_3_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_3_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_3_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_3_D0ACP_MASK)

#define XRDC_PDAC_W0_0_3_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_0_3_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_3_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_3_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_3_D1ACP_MASK)

#define XRDC_PDAC_W0_0_3_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_0_3_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_3_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_3_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_3_D2ACP_MASK)

#define XRDC_PDAC_W0_0_3_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_0_3_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_3_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_3_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_3_D3ACP_MASK)

#define XRDC_PDAC_W0_0_3_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_0_3_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_3_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_3_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_3_D4ACP_MASK)

#define XRDC_PDAC_W0_0_3_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_0_3_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_3_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_3_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_3_D5ACP_MASK)

#define XRDC_PDAC_W0_0_3_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_0_3_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_3_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_3_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_3_D6ACP_MASK)

#define XRDC_PDAC_W0_0_3_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_0_3_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_3_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_3_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_3_D7ACP_MASK)

#define XRDC_PDAC_W0_0_3_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_0_3_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_3_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_3_EALO_SHIFT)) & XRDC_PDAC_W0_0_3_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_3 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_3_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_0_3_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_3_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_3_EAL_SHIFT)) & XRDC_PDAC_W1_0_3_EAL_MASK)

#define XRDC_PDAC_W1_0_3_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_0_3_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_3_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_3_LK2_SHIFT)) & XRDC_PDAC_W1_0_3_LK2_MASK)

#define XRDC_PDAC_W1_0_3_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_0_3_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_3_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_3_VLD_SHIFT)) & XRDC_PDAC_W1_0_3_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_4 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_4_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_0_4_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_4_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_4_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_4_D0ACP_MASK)

#define XRDC_PDAC_W0_0_4_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_0_4_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_4_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_4_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_4_D1ACP_MASK)

#define XRDC_PDAC_W0_0_4_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_0_4_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_4_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_4_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_4_D2ACP_MASK)

#define XRDC_PDAC_W0_0_4_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_0_4_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_4_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_4_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_4_D3ACP_MASK)

#define XRDC_PDAC_W0_0_4_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_0_4_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_4_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_4_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_4_D4ACP_MASK)

#define XRDC_PDAC_W0_0_4_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_0_4_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_4_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_4_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_4_D5ACP_MASK)

#define XRDC_PDAC_W0_0_4_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_0_4_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_4_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_4_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_4_D6ACP_MASK)

#define XRDC_PDAC_W0_0_4_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_0_4_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_4_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_4_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_4_D7ACP_MASK)

#define XRDC_PDAC_W0_0_4_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_0_4_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_4_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_4_EALO_SHIFT)) & XRDC_PDAC_W0_0_4_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_4 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_4_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_0_4_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_4_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_4_EAL_SHIFT)) & XRDC_PDAC_W1_0_4_EAL_MASK)

#define XRDC_PDAC_W1_0_4_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_0_4_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_4_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_4_LK2_SHIFT)) & XRDC_PDAC_W1_0_4_LK2_MASK)

#define XRDC_PDAC_W1_0_4_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_0_4_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_4_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_4_VLD_SHIFT)) & XRDC_PDAC_W1_0_4_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_5 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_5_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_0_5_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_5_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_5_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_5_D0ACP_MASK)

#define XRDC_PDAC_W0_0_5_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_0_5_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_5_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_5_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_5_D1ACP_MASK)

#define XRDC_PDAC_W0_0_5_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_0_5_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_5_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_5_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_5_D2ACP_MASK)

#define XRDC_PDAC_W0_0_5_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_0_5_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_5_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_5_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_5_D3ACP_MASK)

#define XRDC_PDAC_W0_0_5_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_0_5_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_5_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_5_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_5_D4ACP_MASK)

#define XRDC_PDAC_W0_0_5_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_0_5_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_5_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_5_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_5_D5ACP_MASK)

#define XRDC_PDAC_W0_0_5_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_0_5_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_5_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_5_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_5_D6ACP_MASK)

#define XRDC_PDAC_W0_0_5_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_0_5_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_5_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_5_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_5_D7ACP_MASK)

#define XRDC_PDAC_W0_0_5_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_0_5_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_5_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_5_EALO_SHIFT)) & XRDC_PDAC_W0_0_5_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_5 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_5_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_0_5_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_5_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_5_EAL_SHIFT)) & XRDC_PDAC_W1_0_5_EAL_MASK)

#define XRDC_PDAC_W1_0_5_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_0_5_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_5_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_5_LK2_SHIFT)) & XRDC_PDAC_W1_0_5_LK2_MASK)

#define XRDC_PDAC_W1_0_5_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_0_5_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_5_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_5_VLD_SHIFT)) & XRDC_PDAC_W1_0_5_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_6 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_6_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_0_6_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_6_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_6_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_6_D0ACP_MASK)

#define XRDC_PDAC_W0_0_6_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_0_6_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_6_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_6_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_6_D1ACP_MASK)

#define XRDC_PDAC_W0_0_6_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_0_6_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_6_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_6_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_6_D2ACP_MASK)

#define XRDC_PDAC_W0_0_6_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_0_6_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_6_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_6_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_6_D3ACP_MASK)

#define XRDC_PDAC_W0_0_6_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_0_6_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_6_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_6_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_6_D4ACP_MASK)

#define XRDC_PDAC_W0_0_6_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_0_6_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_6_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_6_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_6_D5ACP_MASK)

#define XRDC_PDAC_W0_0_6_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_0_6_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_6_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_6_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_6_D6ACP_MASK)

#define XRDC_PDAC_W0_0_6_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_0_6_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_6_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_6_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_6_D7ACP_MASK)

#define XRDC_PDAC_W0_0_6_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_0_6_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_6_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_6_EALO_SHIFT)) & XRDC_PDAC_W0_0_6_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_6 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_6_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_0_6_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_6_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_6_EAL_SHIFT)) & XRDC_PDAC_W1_0_6_EAL_MASK)

#define XRDC_PDAC_W1_0_6_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_0_6_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_6_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_6_LK2_SHIFT)) & XRDC_PDAC_W1_0_6_LK2_MASK)

#define XRDC_PDAC_W1_0_6_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_0_6_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_6_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_6_VLD_SHIFT)) & XRDC_PDAC_W1_0_6_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_7 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_7_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_0_7_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_7_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_7_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_7_D0ACP_MASK)

#define XRDC_PDAC_W0_0_7_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_0_7_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_7_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_7_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_7_D1ACP_MASK)

#define XRDC_PDAC_W0_0_7_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_0_7_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_7_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_7_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_7_D2ACP_MASK)

#define XRDC_PDAC_W0_0_7_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_0_7_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_7_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_7_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_7_D3ACP_MASK)

#define XRDC_PDAC_W0_0_7_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_0_7_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_7_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_7_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_7_D4ACP_MASK)

#define XRDC_PDAC_W0_0_7_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_0_7_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_7_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_7_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_7_D5ACP_MASK)

#define XRDC_PDAC_W0_0_7_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_0_7_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_7_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_7_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_7_D6ACP_MASK)

#define XRDC_PDAC_W0_0_7_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_0_7_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_7_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_7_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_7_D7ACP_MASK)

#define XRDC_PDAC_W0_0_7_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_0_7_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_7_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_7_EALO_SHIFT)) & XRDC_PDAC_W0_0_7_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_7 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_7_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_0_7_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_7_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_7_EAL_SHIFT)) & XRDC_PDAC_W1_0_7_EAL_MASK)

#define XRDC_PDAC_W1_0_7_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_0_7_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_7_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_7_LK2_SHIFT)) & XRDC_PDAC_W1_0_7_LK2_MASK)

#define XRDC_PDAC_W1_0_7_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_0_7_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_7_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_7_VLD_SHIFT)) & XRDC_PDAC_W1_0_7_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_8 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_8_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_0_8_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_8_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_8_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_8_D0ACP_MASK)

#define XRDC_PDAC_W0_0_8_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_0_8_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_8_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_8_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_8_D1ACP_MASK)

#define XRDC_PDAC_W0_0_8_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_0_8_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_8_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_8_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_8_D2ACP_MASK)

#define XRDC_PDAC_W0_0_8_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_0_8_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_8_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_8_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_8_D3ACP_MASK)

#define XRDC_PDAC_W0_0_8_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_0_8_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_8_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_8_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_8_D4ACP_MASK)

#define XRDC_PDAC_W0_0_8_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_0_8_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_8_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_8_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_8_D5ACP_MASK)

#define XRDC_PDAC_W0_0_8_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_0_8_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_8_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_8_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_8_D6ACP_MASK)

#define XRDC_PDAC_W0_0_8_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_0_8_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_8_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_8_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_8_D7ACP_MASK)

#define XRDC_PDAC_W0_0_8_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_0_8_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_8_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_8_EALO_SHIFT)) & XRDC_PDAC_W0_0_8_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_8 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_8_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_0_8_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_8_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_8_EAL_SHIFT)) & XRDC_PDAC_W1_0_8_EAL_MASK)

#define XRDC_PDAC_W1_0_8_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_0_8_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_8_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_8_LK2_SHIFT)) & XRDC_PDAC_W1_0_8_LK2_MASK)

#define XRDC_PDAC_W1_0_8_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_0_8_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_8_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_8_VLD_SHIFT)) & XRDC_PDAC_W1_0_8_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_9 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_9_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_0_9_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_9_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_9_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_9_D0ACP_MASK)

#define XRDC_PDAC_W0_0_9_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_0_9_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_9_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_9_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_9_D1ACP_MASK)

#define XRDC_PDAC_W0_0_9_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_0_9_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_9_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_9_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_9_D2ACP_MASK)

#define XRDC_PDAC_W0_0_9_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_0_9_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_9_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_9_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_9_D3ACP_MASK)

#define XRDC_PDAC_W0_0_9_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_0_9_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_9_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_9_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_9_D4ACP_MASK)

#define XRDC_PDAC_W0_0_9_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_0_9_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_9_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_9_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_9_D5ACP_MASK)

#define XRDC_PDAC_W0_0_9_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_0_9_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_9_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_9_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_9_D6ACP_MASK)

#define XRDC_PDAC_W0_0_9_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_0_9_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_9_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_9_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_9_D7ACP_MASK)

#define XRDC_PDAC_W0_0_9_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_0_9_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_9_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_9_EALO_SHIFT)) & XRDC_PDAC_W0_0_9_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_9 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_9_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_0_9_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_9_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_9_EAL_SHIFT)) & XRDC_PDAC_W1_0_9_EAL_MASK)

#define XRDC_PDAC_W1_0_9_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_0_9_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_9_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_9_LK2_SHIFT)) & XRDC_PDAC_W1_0_9_LK2_MASK)

#define XRDC_PDAC_W1_0_9_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_0_9_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_9_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_9_VLD_SHIFT)) & XRDC_PDAC_W1_0_9_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_10 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_10_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_10_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_10_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_10_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_10_D0ACP_MASK)

#define XRDC_PDAC_W0_0_10_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_10_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_10_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_10_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_10_D1ACP_MASK)

#define XRDC_PDAC_W0_0_10_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_10_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_10_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_10_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_10_D2ACP_MASK)

#define XRDC_PDAC_W0_0_10_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_10_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_10_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_10_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_10_D3ACP_MASK)

#define XRDC_PDAC_W0_0_10_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_10_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_10_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_10_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_10_D4ACP_MASK)

#define XRDC_PDAC_W0_0_10_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_10_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_10_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_10_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_10_D5ACP_MASK)

#define XRDC_PDAC_W0_0_10_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_10_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_10_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_10_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_10_D6ACP_MASK)

#define XRDC_PDAC_W0_0_10_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_10_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_10_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_10_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_10_D7ACP_MASK)

#define XRDC_PDAC_W0_0_10_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_10_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_10_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_10_EALO_SHIFT)) & XRDC_PDAC_W0_0_10_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_10 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_10_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_10_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_10_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_10_EAL_SHIFT)) & XRDC_PDAC_W1_0_10_EAL_MASK)

#define XRDC_PDAC_W1_0_10_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_10_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_10_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_10_LK2_SHIFT)) & XRDC_PDAC_W1_0_10_LK2_MASK)

#define XRDC_PDAC_W1_0_10_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_10_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_10_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_10_VLD_SHIFT)) & XRDC_PDAC_W1_0_10_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_11 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_11_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_11_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_11_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_11_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_11_D0ACP_MASK)

#define XRDC_PDAC_W0_0_11_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_11_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_11_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_11_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_11_D1ACP_MASK)

#define XRDC_PDAC_W0_0_11_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_11_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_11_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_11_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_11_D2ACP_MASK)

#define XRDC_PDAC_W0_0_11_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_11_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_11_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_11_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_11_D3ACP_MASK)

#define XRDC_PDAC_W0_0_11_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_11_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_11_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_11_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_11_D4ACP_MASK)

#define XRDC_PDAC_W0_0_11_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_11_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_11_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_11_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_11_D5ACP_MASK)

#define XRDC_PDAC_W0_0_11_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_11_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_11_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_11_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_11_D6ACP_MASK)

#define XRDC_PDAC_W0_0_11_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_11_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_11_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_11_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_11_D7ACP_MASK)

#define XRDC_PDAC_W0_0_11_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_11_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_11_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_11_EALO_SHIFT)) & XRDC_PDAC_W0_0_11_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_11 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_11_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_11_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_11_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_11_EAL_SHIFT)) & XRDC_PDAC_W1_0_11_EAL_MASK)

#define XRDC_PDAC_W1_0_11_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_11_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_11_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_11_LK2_SHIFT)) & XRDC_PDAC_W1_0_11_LK2_MASK)

#define XRDC_PDAC_W1_0_11_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_11_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_11_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_11_VLD_SHIFT)) & XRDC_PDAC_W1_0_11_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_12 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_12_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_12_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_12_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_12_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_12_D0ACP_MASK)

#define XRDC_PDAC_W0_0_12_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_12_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_12_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_12_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_12_D1ACP_MASK)

#define XRDC_PDAC_W0_0_12_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_12_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_12_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_12_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_12_D2ACP_MASK)

#define XRDC_PDAC_W0_0_12_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_12_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_12_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_12_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_12_D3ACP_MASK)

#define XRDC_PDAC_W0_0_12_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_12_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_12_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_12_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_12_D4ACP_MASK)

#define XRDC_PDAC_W0_0_12_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_12_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_12_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_12_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_12_D5ACP_MASK)

#define XRDC_PDAC_W0_0_12_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_12_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_12_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_12_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_12_D6ACP_MASK)

#define XRDC_PDAC_W0_0_12_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_12_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_12_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_12_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_12_D7ACP_MASK)

#define XRDC_PDAC_W0_0_12_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_12_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_12_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_12_EALO_SHIFT)) & XRDC_PDAC_W0_0_12_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_12 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_12_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_12_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_12_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_12_EAL_SHIFT)) & XRDC_PDAC_W1_0_12_EAL_MASK)

#define XRDC_PDAC_W1_0_12_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_12_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_12_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_12_LK2_SHIFT)) & XRDC_PDAC_W1_0_12_LK2_MASK)

#define XRDC_PDAC_W1_0_12_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_12_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_12_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_12_VLD_SHIFT)) & XRDC_PDAC_W1_0_12_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_13 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_13_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_13_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_13_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_13_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_13_D0ACP_MASK)

#define XRDC_PDAC_W0_0_13_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_13_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_13_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_13_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_13_D1ACP_MASK)

#define XRDC_PDAC_W0_0_13_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_13_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_13_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_13_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_13_D2ACP_MASK)

#define XRDC_PDAC_W0_0_13_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_13_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_13_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_13_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_13_D3ACP_MASK)

#define XRDC_PDAC_W0_0_13_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_13_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_13_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_13_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_13_D4ACP_MASK)

#define XRDC_PDAC_W0_0_13_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_13_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_13_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_13_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_13_D5ACP_MASK)

#define XRDC_PDAC_W0_0_13_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_13_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_13_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_13_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_13_D6ACP_MASK)

#define XRDC_PDAC_W0_0_13_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_13_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_13_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_13_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_13_D7ACP_MASK)

#define XRDC_PDAC_W0_0_13_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_13_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_13_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_13_EALO_SHIFT)) & XRDC_PDAC_W0_0_13_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_13 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_13_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_13_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_13_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_13_EAL_SHIFT)) & XRDC_PDAC_W1_0_13_EAL_MASK)

#define XRDC_PDAC_W1_0_13_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_13_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_13_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_13_LK2_SHIFT)) & XRDC_PDAC_W1_0_13_LK2_MASK)

#define XRDC_PDAC_W1_0_13_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_13_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_13_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_13_VLD_SHIFT)) & XRDC_PDAC_W1_0_13_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_14 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_14_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_14_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_14_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_14_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_14_D0ACP_MASK)

#define XRDC_PDAC_W0_0_14_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_14_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_14_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_14_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_14_D1ACP_MASK)

#define XRDC_PDAC_W0_0_14_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_14_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_14_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_14_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_14_D2ACP_MASK)

#define XRDC_PDAC_W0_0_14_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_14_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_14_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_14_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_14_D3ACP_MASK)

#define XRDC_PDAC_W0_0_14_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_14_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_14_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_14_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_14_D4ACP_MASK)

#define XRDC_PDAC_W0_0_14_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_14_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_14_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_14_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_14_D5ACP_MASK)

#define XRDC_PDAC_W0_0_14_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_14_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_14_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_14_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_14_D6ACP_MASK)

#define XRDC_PDAC_W0_0_14_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_14_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_14_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_14_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_14_D7ACP_MASK)

#define XRDC_PDAC_W0_0_14_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_14_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_14_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_14_EALO_SHIFT)) & XRDC_PDAC_W0_0_14_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_14 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_14_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_14_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_14_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_14_EAL_SHIFT)) & XRDC_PDAC_W1_0_14_EAL_MASK)

#define XRDC_PDAC_W1_0_14_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_14_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_14_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_14_LK2_SHIFT)) & XRDC_PDAC_W1_0_14_LK2_MASK)

#define XRDC_PDAC_W1_0_14_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_14_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_14_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_14_VLD_SHIFT)) & XRDC_PDAC_W1_0_14_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_15 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_15_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_15_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_15_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_15_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_15_D0ACP_MASK)

#define XRDC_PDAC_W0_0_15_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_15_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_15_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_15_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_15_D1ACP_MASK)

#define XRDC_PDAC_W0_0_15_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_15_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_15_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_15_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_15_D2ACP_MASK)

#define XRDC_PDAC_W0_0_15_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_15_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_15_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_15_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_15_D3ACP_MASK)

#define XRDC_PDAC_W0_0_15_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_15_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_15_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_15_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_15_D4ACP_MASK)

#define XRDC_PDAC_W0_0_15_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_15_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_15_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_15_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_15_D5ACP_MASK)

#define XRDC_PDAC_W0_0_15_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_15_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_15_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_15_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_15_D6ACP_MASK)

#define XRDC_PDAC_W0_0_15_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_15_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_15_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_15_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_15_D7ACP_MASK)

#define XRDC_PDAC_W0_0_15_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_15_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_15_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_15_EALO_SHIFT)) & XRDC_PDAC_W0_0_15_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_15 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_15_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_15_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_15_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_15_EAL_SHIFT)) & XRDC_PDAC_W1_0_15_EAL_MASK)

#define XRDC_PDAC_W1_0_15_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_15_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_15_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_15_LK2_SHIFT)) & XRDC_PDAC_W1_0_15_LK2_MASK)

#define XRDC_PDAC_W1_0_15_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_15_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_15_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_15_VLD_SHIFT)) & XRDC_PDAC_W1_0_15_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_16 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_16_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_16_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_16_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_16_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_16_D0ACP_MASK)

#define XRDC_PDAC_W0_0_16_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_16_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_16_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_16_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_16_D1ACP_MASK)

#define XRDC_PDAC_W0_0_16_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_16_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_16_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_16_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_16_D2ACP_MASK)

#define XRDC_PDAC_W0_0_16_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_16_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_16_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_16_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_16_D3ACP_MASK)

#define XRDC_PDAC_W0_0_16_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_16_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_16_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_16_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_16_D4ACP_MASK)

#define XRDC_PDAC_W0_0_16_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_16_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_16_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_16_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_16_D5ACP_MASK)

#define XRDC_PDAC_W0_0_16_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_16_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_16_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_16_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_16_D6ACP_MASK)

#define XRDC_PDAC_W0_0_16_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_16_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_16_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_16_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_16_D7ACP_MASK)

#define XRDC_PDAC_W0_0_16_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_16_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_16_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_16_EALO_SHIFT)) & XRDC_PDAC_W0_0_16_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_16 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_16_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_16_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_16_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_16_EAL_SHIFT)) & XRDC_PDAC_W1_0_16_EAL_MASK)

#define XRDC_PDAC_W1_0_16_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_16_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_16_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_16_LK2_SHIFT)) & XRDC_PDAC_W1_0_16_LK2_MASK)

#define XRDC_PDAC_W1_0_16_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_16_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_16_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_16_VLD_SHIFT)) & XRDC_PDAC_W1_0_16_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_17 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_17_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_17_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_17_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_17_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_17_D0ACP_MASK)

#define XRDC_PDAC_W0_0_17_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_17_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_17_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_17_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_17_D1ACP_MASK)

#define XRDC_PDAC_W0_0_17_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_17_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_17_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_17_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_17_D2ACP_MASK)

#define XRDC_PDAC_W0_0_17_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_17_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_17_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_17_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_17_D3ACP_MASK)

#define XRDC_PDAC_W0_0_17_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_17_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_17_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_17_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_17_D4ACP_MASK)

#define XRDC_PDAC_W0_0_17_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_17_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_17_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_17_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_17_D5ACP_MASK)

#define XRDC_PDAC_W0_0_17_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_17_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_17_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_17_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_17_D6ACP_MASK)

#define XRDC_PDAC_W0_0_17_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_17_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_17_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_17_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_17_D7ACP_MASK)

#define XRDC_PDAC_W0_0_17_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_17_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_17_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_17_EALO_SHIFT)) & XRDC_PDAC_W0_0_17_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_17 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_17_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_17_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_17_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_17_EAL_SHIFT)) & XRDC_PDAC_W1_0_17_EAL_MASK)

#define XRDC_PDAC_W1_0_17_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_17_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_17_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_17_LK2_SHIFT)) & XRDC_PDAC_W1_0_17_LK2_MASK)

#define XRDC_PDAC_W1_0_17_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_17_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_17_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_17_VLD_SHIFT)) & XRDC_PDAC_W1_0_17_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_18 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_18_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_18_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_18_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_18_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_18_D0ACP_MASK)

#define XRDC_PDAC_W0_0_18_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_18_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_18_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_18_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_18_D1ACP_MASK)

#define XRDC_PDAC_W0_0_18_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_18_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_18_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_18_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_18_D2ACP_MASK)

#define XRDC_PDAC_W0_0_18_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_18_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_18_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_18_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_18_D3ACP_MASK)

#define XRDC_PDAC_W0_0_18_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_18_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_18_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_18_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_18_D4ACP_MASK)

#define XRDC_PDAC_W0_0_18_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_18_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_18_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_18_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_18_D5ACP_MASK)

#define XRDC_PDAC_W0_0_18_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_18_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_18_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_18_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_18_D6ACP_MASK)

#define XRDC_PDAC_W0_0_18_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_18_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_18_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_18_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_18_D7ACP_MASK)

#define XRDC_PDAC_W0_0_18_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_18_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_18_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_18_EALO_SHIFT)) & XRDC_PDAC_W0_0_18_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_18 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_18_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_18_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_18_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_18_EAL_SHIFT)) & XRDC_PDAC_W1_0_18_EAL_MASK)

#define XRDC_PDAC_W1_0_18_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_18_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_18_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_18_LK2_SHIFT)) & XRDC_PDAC_W1_0_18_LK2_MASK)

#define XRDC_PDAC_W1_0_18_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_18_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_18_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_18_VLD_SHIFT)) & XRDC_PDAC_W1_0_18_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_19 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_19_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_19_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_19_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_19_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_19_D0ACP_MASK)

#define XRDC_PDAC_W0_0_19_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_19_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_19_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_19_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_19_D1ACP_MASK)

#define XRDC_PDAC_W0_0_19_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_19_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_19_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_19_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_19_D2ACP_MASK)

#define XRDC_PDAC_W0_0_19_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_19_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_19_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_19_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_19_D3ACP_MASK)

#define XRDC_PDAC_W0_0_19_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_19_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_19_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_19_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_19_D4ACP_MASK)

#define XRDC_PDAC_W0_0_19_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_19_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_19_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_19_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_19_D5ACP_MASK)

#define XRDC_PDAC_W0_0_19_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_19_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_19_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_19_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_19_D6ACP_MASK)

#define XRDC_PDAC_W0_0_19_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_19_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_19_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_19_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_19_D7ACP_MASK)

#define XRDC_PDAC_W0_0_19_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_19_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_19_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_19_EALO_SHIFT)) & XRDC_PDAC_W0_0_19_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_19 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_19_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_19_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_19_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_19_EAL_SHIFT)) & XRDC_PDAC_W1_0_19_EAL_MASK)

#define XRDC_PDAC_W1_0_19_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_19_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_19_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_19_LK2_SHIFT)) & XRDC_PDAC_W1_0_19_LK2_MASK)

#define XRDC_PDAC_W1_0_19_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_19_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_19_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_19_VLD_SHIFT)) & XRDC_PDAC_W1_0_19_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_20 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_20_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_20_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_20_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_20_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_20_D0ACP_MASK)

#define XRDC_PDAC_W0_0_20_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_20_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_20_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_20_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_20_D1ACP_MASK)

#define XRDC_PDAC_W0_0_20_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_20_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_20_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_20_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_20_D2ACP_MASK)

#define XRDC_PDAC_W0_0_20_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_20_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_20_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_20_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_20_D3ACP_MASK)

#define XRDC_PDAC_W0_0_20_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_20_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_20_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_20_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_20_D4ACP_MASK)

#define XRDC_PDAC_W0_0_20_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_20_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_20_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_20_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_20_D5ACP_MASK)

#define XRDC_PDAC_W0_0_20_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_20_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_20_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_20_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_20_D6ACP_MASK)

#define XRDC_PDAC_W0_0_20_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_20_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_20_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_20_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_20_D7ACP_MASK)

#define XRDC_PDAC_W0_0_20_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_20_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_20_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_20_EALO_SHIFT)) & XRDC_PDAC_W0_0_20_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_20 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_20_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_20_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_20_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_20_EAL_SHIFT)) & XRDC_PDAC_W1_0_20_EAL_MASK)

#define XRDC_PDAC_W1_0_20_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_20_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_20_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_20_LK2_SHIFT)) & XRDC_PDAC_W1_0_20_LK2_MASK)

#define XRDC_PDAC_W1_0_20_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_20_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_20_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_20_VLD_SHIFT)) & XRDC_PDAC_W1_0_20_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_21 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_21_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_21_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_21_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_21_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_21_D0ACP_MASK)

#define XRDC_PDAC_W0_0_21_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_21_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_21_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_21_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_21_D1ACP_MASK)

#define XRDC_PDAC_W0_0_21_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_21_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_21_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_21_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_21_D2ACP_MASK)

#define XRDC_PDAC_W0_0_21_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_21_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_21_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_21_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_21_D3ACP_MASK)

#define XRDC_PDAC_W0_0_21_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_21_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_21_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_21_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_21_D4ACP_MASK)

#define XRDC_PDAC_W0_0_21_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_21_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_21_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_21_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_21_D5ACP_MASK)

#define XRDC_PDAC_W0_0_21_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_21_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_21_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_21_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_21_D6ACP_MASK)

#define XRDC_PDAC_W0_0_21_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_21_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_21_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_21_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_21_D7ACP_MASK)

#define XRDC_PDAC_W0_0_21_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_21_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_21_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_21_EALO_SHIFT)) & XRDC_PDAC_W0_0_21_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_21 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_21_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_21_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_21_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_21_EAL_SHIFT)) & XRDC_PDAC_W1_0_21_EAL_MASK)

#define XRDC_PDAC_W1_0_21_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_21_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_21_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_21_LK2_SHIFT)) & XRDC_PDAC_W1_0_21_LK2_MASK)

#define XRDC_PDAC_W1_0_21_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_21_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_21_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_21_VLD_SHIFT)) & XRDC_PDAC_W1_0_21_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_22 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_22_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_22_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_22_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_22_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_22_D0ACP_MASK)

#define XRDC_PDAC_W0_0_22_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_22_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_22_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_22_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_22_D1ACP_MASK)

#define XRDC_PDAC_W0_0_22_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_22_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_22_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_22_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_22_D2ACP_MASK)

#define XRDC_PDAC_W0_0_22_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_22_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_22_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_22_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_22_D3ACP_MASK)

#define XRDC_PDAC_W0_0_22_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_22_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_22_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_22_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_22_D4ACP_MASK)

#define XRDC_PDAC_W0_0_22_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_22_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_22_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_22_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_22_D5ACP_MASK)

#define XRDC_PDAC_W0_0_22_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_22_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_22_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_22_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_22_D6ACP_MASK)

#define XRDC_PDAC_W0_0_22_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_22_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_22_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_22_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_22_D7ACP_MASK)

#define XRDC_PDAC_W0_0_22_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_22_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_22_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_22_EALO_SHIFT)) & XRDC_PDAC_W0_0_22_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_22 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_22_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_22_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_22_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_22_EAL_SHIFT)) & XRDC_PDAC_W1_0_22_EAL_MASK)

#define XRDC_PDAC_W1_0_22_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_22_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_22_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_22_LK2_SHIFT)) & XRDC_PDAC_W1_0_22_LK2_MASK)

#define XRDC_PDAC_W1_0_22_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_22_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_22_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_22_VLD_SHIFT)) & XRDC_PDAC_W1_0_22_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_23 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_23_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_23_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_23_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_23_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_23_D0ACP_MASK)

#define XRDC_PDAC_W0_0_23_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_23_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_23_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_23_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_23_D1ACP_MASK)

#define XRDC_PDAC_W0_0_23_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_23_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_23_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_23_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_23_D2ACP_MASK)

#define XRDC_PDAC_W0_0_23_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_23_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_23_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_23_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_23_D3ACP_MASK)

#define XRDC_PDAC_W0_0_23_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_23_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_23_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_23_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_23_D4ACP_MASK)

#define XRDC_PDAC_W0_0_23_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_23_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_23_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_23_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_23_D5ACP_MASK)

#define XRDC_PDAC_W0_0_23_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_23_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_23_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_23_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_23_D6ACP_MASK)

#define XRDC_PDAC_W0_0_23_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_23_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_23_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_23_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_23_D7ACP_MASK)

#define XRDC_PDAC_W0_0_23_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_23_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_23_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_23_EALO_SHIFT)) & XRDC_PDAC_W0_0_23_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_23 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_23_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_23_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_23_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_23_EAL_SHIFT)) & XRDC_PDAC_W1_0_23_EAL_MASK)

#define XRDC_PDAC_W1_0_23_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_23_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_23_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_23_LK2_SHIFT)) & XRDC_PDAC_W1_0_23_LK2_MASK)

#define XRDC_PDAC_W1_0_23_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_23_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_23_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_23_VLD_SHIFT)) & XRDC_PDAC_W1_0_23_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_24 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_24_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_24_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_24_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_24_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_24_D0ACP_MASK)

#define XRDC_PDAC_W0_0_24_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_24_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_24_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_24_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_24_D1ACP_MASK)

#define XRDC_PDAC_W0_0_24_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_24_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_24_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_24_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_24_D2ACP_MASK)

#define XRDC_PDAC_W0_0_24_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_24_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_24_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_24_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_24_D3ACP_MASK)

#define XRDC_PDAC_W0_0_24_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_24_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_24_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_24_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_24_D4ACP_MASK)

#define XRDC_PDAC_W0_0_24_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_24_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_24_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_24_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_24_D5ACP_MASK)

#define XRDC_PDAC_W0_0_24_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_24_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_24_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_24_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_24_D6ACP_MASK)

#define XRDC_PDAC_W0_0_24_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_24_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_24_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_24_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_24_D7ACP_MASK)

#define XRDC_PDAC_W0_0_24_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_24_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_24_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_24_EALO_SHIFT)) & XRDC_PDAC_W0_0_24_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_24 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_24_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_24_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_24_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_24_EAL_SHIFT)) & XRDC_PDAC_W1_0_24_EAL_MASK)

#define XRDC_PDAC_W1_0_24_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_24_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_24_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_24_LK2_SHIFT)) & XRDC_PDAC_W1_0_24_LK2_MASK)

#define XRDC_PDAC_W1_0_24_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_24_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_24_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_24_VLD_SHIFT)) & XRDC_PDAC_W1_0_24_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_25 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_25_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_25_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_25_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_25_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_25_D0ACP_MASK)

#define XRDC_PDAC_W0_0_25_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_25_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_25_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_25_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_25_D1ACP_MASK)

#define XRDC_PDAC_W0_0_25_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_25_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_25_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_25_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_25_D2ACP_MASK)

#define XRDC_PDAC_W0_0_25_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_25_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_25_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_25_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_25_D3ACP_MASK)

#define XRDC_PDAC_W0_0_25_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_25_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_25_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_25_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_25_D4ACP_MASK)

#define XRDC_PDAC_W0_0_25_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_25_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_25_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_25_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_25_D5ACP_MASK)

#define XRDC_PDAC_W0_0_25_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_25_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_25_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_25_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_25_D6ACP_MASK)

#define XRDC_PDAC_W0_0_25_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_25_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_25_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_25_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_25_D7ACP_MASK)

#define XRDC_PDAC_W0_0_25_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_25_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_25_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_25_EALO_SHIFT)) & XRDC_PDAC_W0_0_25_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_25 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_25_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_25_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_25_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_25_EAL_SHIFT)) & XRDC_PDAC_W1_0_25_EAL_MASK)

#define XRDC_PDAC_W1_0_25_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_25_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_25_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_25_LK2_SHIFT)) & XRDC_PDAC_W1_0_25_LK2_MASK)

#define XRDC_PDAC_W1_0_25_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_25_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_25_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_25_VLD_SHIFT)) & XRDC_PDAC_W1_0_25_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_26 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_26_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_26_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_26_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_26_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_26_D0ACP_MASK)

#define XRDC_PDAC_W0_0_26_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_26_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_26_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_26_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_26_D1ACP_MASK)

#define XRDC_PDAC_W0_0_26_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_26_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_26_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_26_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_26_D2ACP_MASK)

#define XRDC_PDAC_W0_0_26_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_26_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_26_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_26_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_26_D3ACP_MASK)

#define XRDC_PDAC_W0_0_26_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_26_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_26_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_26_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_26_D4ACP_MASK)

#define XRDC_PDAC_W0_0_26_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_26_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_26_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_26_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_26_D5ACP_MASK)

#define XRDC_PDAC_W0_0_26_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_26_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_26_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_26_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_26_D6ACP_MASK)

#define XRDC_PDAC_W0_0_26_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_26_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_26_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_26_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_26_D7ACP_MASK)

#define XRDC_PDAC_W0_0_26_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_26_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_26_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_26_EALO_SHIFT)) & XRDC_PDAC_W0_0_26_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_26 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_26_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_26_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_26_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_26_EAL_SHIFT)) & XRDC_PDAC_W1_0_26_EAL_MASK)

#define XRDC_PDAC_W1_0_26_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_26_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_26_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_26_LK2_SHIFT)) & XRDC_PDAC_W1_0_26_LK2_MASK)

#define XRDC_PDAC_W1_0_26_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_26_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_26_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_26_VLD_SHIFT)) & XRDC_PDAC_W1_0_26_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_27 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_27_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_27_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_27_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_27_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_27_D0ACP_MASK)

#define XRDC_PDAC_W0_0_27_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_27_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_27_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_27_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_27_D1ACP_MASK)

#define XRDC_PDAC_W0_0_27_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_27_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_27_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_27_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_27_D2ACP_MASK)

#define XRDC_PDAC_W0_0_27_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_27_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_27_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_27_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_27_D3ACP_MASK)

#define XRDC_PDAC_W0_0_27_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_27_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_27_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_27_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_27_D4ACP_MASK)

#define XRDC_PDAC_W0_0_27_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_27_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_27_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_27_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_27_D5ACP_MASK)

#define XRDC_PDAC_W0_0_27_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_27_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_27_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_27_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_27_D6ACP_MASK)

#define XRDC_PDAC_W0_0_27_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_27_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_27_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_27_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_27_D7ACP_MASK)

#define XRDC_PDAC_W0_0_27_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_27_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_27_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_27_EALO_SHIFT)) & XRDC_PDAC_W0_0_27_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_27 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_27_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_27_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_27_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_27_EAL_SHIFT)) & XRDC_PDAC_W1_0_27_EAL_MASK)

#define XRDC_PDAC_W1_0_27_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_27_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_27_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_27_LK2_SHIFT)) & XRDC_PDAC_W1_0_27_LK2_MASK)

#define XRDC_PDAC_W1_0_27_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_27_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_27_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_27_VLD_SHIFT)) & XRDC_PDAC_W1_0_27_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_28 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_28_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_28_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_28_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_28_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_28_D0ACP_MASK)

#define XRDC_PDAC_W0_0_28_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_28_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_28_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_28_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_28_D1ACP_MASK)

#define XRDC_PDAC_W0_0_28_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_28_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_28_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_28_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_28_D2ACP_MASK)

#define XRDC_PDAC_W0_0_28_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_28_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_28_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_28_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_28_D3ACP_MASK)

#define XRDC_PDAC_W0_0_28_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_28_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_28_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_28_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_28_D4ACP_MASK)

#define XRDC_PDAC_W0_0_28_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_28_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_28_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_28_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_28_D5ACP_MASK)

#define XRDC_PDAC_W0_0_28_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_28_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_28_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_28_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_28_D6ACP_MASK)

#define XRDC_PDAC_W0_0_28_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_28_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_28_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_28_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_28_D7ACP_MASK)

#define XRDC_PDAC_W0_0_28_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_28_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_28_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_28_EALO_SHIFT)) & XRDC_PDAC_W0_0_28_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_28 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_28_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_28_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_28_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_28_EAL_SHIFT)) & XRDC_PDAC_W1_0_28_EAL_MASK)

#define XRDC_PDAC_W1_0_28_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_28_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_28_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_28_LK2_SHIFT)) & XRDC_PDAC_W1_0_28_LK2_MASK)

#define XRDC_PDAC_W1_0_28_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_28_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_28_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_28_VLD_SHIFT)) & XRDC_PDAC_W1_0_28_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_29 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_29_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_29_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_29_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_29_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_29_D0ACP_MASK)

#define XRDC_PDAC_W0_0_29_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_29_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_29_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_29_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_29_D1ACP_MASK)

#define XRDC_PDAC_W0_0_29_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_29_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_29_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_29_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_29_D2ACP_MASK)

#define XRDC_PDAC_W0_0_29_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_29_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_29_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_29_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_29_D3ACP_MASK)

#define XRDC_PDAC_W0_0_29_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_29_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_29_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_29_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_29_D4ACP_MASK)

#define XRDC_PDAC_W0_0_29_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_29_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_29_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_29_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_29_D5ACP_MASK)

#define XRDC_PDAC_W0_0_29_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_29_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_29_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_29_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_29_D6ACP_MASK)

#define XRDC_PDAC_W0_0_29_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_29_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_29_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_29_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_29_D7ACP_MASK)

#define XRDC_PDAC_W0_0_29_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_29_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_29_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_29_EALO_SHIFT)) & XRDC_PDAC_W0_0_29_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_29 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_29_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_29_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_29_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_29_EAL_SHIFT)) & XRDC_PDAC_W1_0_29_EAL_MASK)

#define XRDC_PDAC_W1_0_29_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_29_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_29_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_29_LK2_SHIFT)) & XRDC_PDAC_W1_0_29_LK2_MASK)

#define XRDC_PDAC_W1_0_29_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_29_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_29_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_29_VLD_SHIFT)) & XRDC_PDAC_W1_0_29_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_30 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_30_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_30_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_30_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_30_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_30_D0ACP_MASK)

#define XRDC_PDAC_W0_0_30_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_30_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_30_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_30_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_30_D1ACP_MASK)

#define XRDC_PDAC_W0_0_30_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_30_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_30_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_30_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_30_D2ACP_MASK)

#define XRDC_PDAC_W0_0_30_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_30_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_30_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_30_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_30_D3ACP_MASK)

#define XRDC_PDAC_W0_0_30_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_30_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_30_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_30_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_30_D4ACP_MASK)

#define XRDC_PDAC_W0_0_30_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_30_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_30_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_30_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_30_D5ACP_MASK)

#define XRDC_PDAC_W0_0_30_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_30_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_30_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_30_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_30_D6ACP_MASK)

#define XRDC_PDAC_W0_0_30_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_30_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_30_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_30_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_30_D7ACP_MASK)

#define XRDC_PDAC_W0_0_30_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_30_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_30_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_30_EALO_SHIFT)) & XRDC_PDAC_W0_0_30_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_30 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_30_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_30_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_30_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_30_EAL_SHIFT)) & XRDC_PDAC_W1_0_30_EAL_MASK)

#define XRDC_PDAC_W1_0_30_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_30_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_30_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_30_LK2_SHIFT)) & XRDC_PDAC_W1_0_30_LK2_MASK)

#define XRDC_PDAC_W1_0_30_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_30_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_30_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_30_VLD_SHIFT)) & XRDC_PDAC_W1_0_30_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_31 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_31_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_31_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_31_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_31_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_31_D0ACP_MASK)

#define XRDC_PDAC_W0_0_31_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_31_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_31_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_31_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_31_D1ACP_MASK)

#define XRDC_PDAC_W0_0_31_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_31_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_31_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_31_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_31_D2ACP_MASK)

#define XRDC_PDAC_W0_0_31_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_31_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_31_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_31_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_31_D3ACP_MASK)

#define XRDC_PDAC_W0_0_31_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_31_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_31_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_31_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_31_D4ACP_MASK)

#define XRDC_PDAC_W0_0_31_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_31_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_31_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_31_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_31_D5ACP_MASK)

#define XRDC_PDAC_W0_0_31_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_31_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_31_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_31_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_31_D6ACP_MASK)

#define XRDC_PDAC_W0_0_31_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_31_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_31_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_31_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_31_D7ACP_MASK)

#define XRDC_PDAC_W0_0_31_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_31_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_31_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_31_EALO_SHIFT)) & XRDC_PDAC_W0_0_31_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_31 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_31_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_31_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_31_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_31_EAL_SHIFT)) & XRDC_PDAC_W1_0_31_EAL_MASK)

#define XRDC_PDAC_W1_0_31_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_31_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_31_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_31_LK2_SHIFT)) & XRDC_PDAC_W1_0_31_LK2_MASK)

#define XRDC_PDAC_W1_0_31_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_31_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_31_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_31_VLD_SHIFT)) & XRDC_PDAC_W1_0_31_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_32 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_32_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_32_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_32_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_32_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_32_D0ACP_MASK)

#define XRDC_PDAC_W0_0_32_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_32_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_32_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_32_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_32_D1ACP_MASK)

#define XRDC_PDAC_W0_0_32_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_32_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_32_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_32_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_32_D2ACP_MASK)

#define XRDC_PDAC_W0_0_32_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_32_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_32_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_32_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_32_D3ACP_MASK)

#define XRDC_PDAC_W0_0_32_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_32_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_32_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_32_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_32_D4ACP_MASK)

#define XRDC_PDAC_W0_0_32_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_32_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_32_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_32_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_32_D5ACP_MASK)

#define XRDC_PDAC_W0_0_32_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_32_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_32_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_32_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_32_D6ACP_MASK)

#define XRDC_PDAC_W0_0_32_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_32_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_32_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_32_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_32_D7ACP_MASK)

#define XRDC_PDAC_W0_0_32_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_32_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_32_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_32_EALO_SHIFT)) & XRDC_PDAC_W0_0_32_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_32 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_32_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_32_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_32_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_32_EAL_SHIFT)) & XRDC_PDAC_W1_0_32_EAL_MASK)

#define XRDC_PDAC_W1_0_32_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_32_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_32_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_32_LK2_SHIFT)) & XRDC_PDAC_W1_0_32_LK2_MASK)

#define XRDC_PDAC_W1_0_32_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_32_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_32_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_32_VLD_SHIFT)) & XRDC_PDAC_W1_0_32_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_33 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_33_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_33_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_33_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_33_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_33_D0ACP_MASK)

#define XRDC_PDAC_W0_0_33_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_33_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_33_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_33_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_33_D1ACP_MASK)

#define XRDC_PDAC_W0_0_33_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_33_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_33_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_33_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_33_D2ACP_MASK)

#define XRDC_PDAC_W0_0_33_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_33_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_33_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_33_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_33_D3ACP_MASK)

#define XRDC_PDAC_W0_0_33_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_33_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_33_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_33_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_33_D4ACP_MASK)

#define XRDC_PDAC_W0_0_33_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_33_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_33_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_33_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_33_D5ACP_MASK)

#define XRDC_PDAC_W0_0_33_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_33_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_33_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_33_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_33_D6ACP_MASK)

#define XRDC_PDAC_W0_0_33_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_33_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_33_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_33_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_33_D7ACP_MASK)

#define XRDC_PDAC_W0_0_33_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_33_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_33_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_33_EALO_SHIFT)) & XRDC_PDAC_W0_0_33_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_33 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_33_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_33_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_33_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_33_EAL_SHIFT)) & XRDC_PDAC_W1_0_33_EAL_MASK)

#define XRDC_PDAC_W1_0_33_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_33_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_33_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_33_LK2_SHIFT)) & XRDC_PDAC_W1_0_33_LK2_MASK)

#define XRDC_PDAC_W1_0_33_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_33_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_33_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_33_VLD_SHIFT)) & XRDC_PDAC_W1_0_33_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_34 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_34_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_34_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_34_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_34_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_34_D0ACP_MASK)

#define XRDC_PDAC_W0_0_34_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_34_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_34_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_34_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_34_D1ACP_MASK)

#define XRDC_PDAC_W0_0_34_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_34_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_34_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_34_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_34_D2ACP_MASK)

#define XRDC_PDAC_W0_0_34_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_34_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_34_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_34_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_34_D3ACP_MASK)

#define XRDC_PDAC_W0_0_34_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_34_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_34_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_34_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_34_D4ACP_MASK)

#define XRDC_PDAC_W0_0_34_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_34_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_34_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_34_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_34_D5ACP_MASK)

#define XRDC_PDAC_W0_0_34_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_34_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_34_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_34_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_34_D6ACP_MASK)

#define XRDC_PDAC_W0_0_34_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_34_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_34_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_34_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_34_D7ACP_MASK)

#define XRDC_PDAC_W0_0_34_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_34_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_34_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_34_EALO_SHIFT)) & XRDC_PDAC_W0_0_34_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_34 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_34_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_34_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_34_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_34_EAL_SHIFT)) & XRDC_PDAC_W1_0_34_EAL_MASK)

#define XRDC_PDAC_W1_0_34_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_34_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_34_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_34_LK2_SHIFT)) & XRDC_PDAC_W1_0_34_LK2_MASK)

#define XRDC_PDAC_W1_0_34_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_34_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_34_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_34_VLD_SHIFT)) & XRDC_PDAC_W1_0_34_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_35 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_35_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_35_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_35_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_35_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_35_D0ACP_MASK)

#define XRDC_PDAC_W0_0_35_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_35_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_35_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_35_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_35_D1ACP_MASK)

#define XRDC_PDAC_W0_0_35_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_35_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_35_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_35_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_35_D2ACP_MASK)

#define XRDC_PDAC_W0_0_35_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_35_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_35_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_35_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_35_D3ACP_MASK)

#define XRDC_PDAC_W0_0_35_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_35_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_35_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_35_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_35_D4ACP_MASK)

#define XRDC_PDAC_W0_0_35_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_35_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_35_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_35_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_35_D5ACP_MASK)

#define XRDC_PDAC_W0_0_35_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_35_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_35_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_35_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_35_D6ACP_MASK)

#define XRDC_PDAC_W0_0_35_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_35_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_35_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_35_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_35_D7ACP_MASK)

#define XRDC_PDAC_W0_0_35_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_35_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_35_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_35_EALO_SHIFT)) & XRDC_PDAC_W0_0_35_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_35 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_35_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_35_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_35_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_35_EAL_SHIFT)) & XRDC_PDAC_W1_0_35_EAL_MASK)

#define XRDC_PDAC_W1_0_35_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_35_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_35_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_35_LK2_SHIFT)) & XRDC_PDAC_W1_0_35_LK2_MASK)

#define XRDC_PDAC_W1_0_35_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_35_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_35_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_35_VLD_SHIFT)) & XRDC_PDAC_W1_0_35_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_36 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_36_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_36_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_36_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_36_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_36_D0ACP_MASK)

#define XRDC_PDAC_W0_0_36_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_36_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_36_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_36_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_36_D1ACP_MASK)

#define XRDC_PDAC_W0_0_36_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_36_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_36_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_36_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_36_D2ACP_MASK)

#define XRDC_PDAC_W0_0_36_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_36_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_36_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_36_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_36_D3ACP_MASK)

#define XRDC_PDAC_W0_0_36_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_36_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_36_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_36_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_36_D4ACP_MASK)

#define XRDC_PDAC_W0_0_36_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_36_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_36_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_36_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_36_D5ACP_MASK)

#define XRDC_PDAC_W0_0_36_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_36_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_36_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_36_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_36_D6ACP_MASK)

#define XRDC_PDAC_W0_0_36_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_36_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_36_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_36_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_36_D7ACP_MASK)

#define XRDC_PDAC_W0_0_36_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_36_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_36_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_36_EALO_SHIFT)) & XRDC_PDAC_W0_0_36_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_36 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_36_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_36_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_36_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_36_EAL_SHIFT)) & XRDC_PDAC_W1_0_36_EAL_MASK)

#define XRDC_PDAC_W1_0_36_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_36_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_36_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_36_LK2_SHIFT)) & XRDC_PDAC_W1_0_36_LK2_MASK)

#define XRDC_PDAC_W1_0_36_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_36_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_36_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_36_VLD_SHIFT)) & XRDC_PDAC_W1_0_36_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_37 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_37_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_37_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_37_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_37_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_37_D0ACP_MASK)

#define XRDC_PDAC_W0_0_37_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_37_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_37_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_37_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_37_D1ACP_MASK)

#define XRDC_PDAC_W0_0_37_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_37_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_37_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_37_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_37_D2ACP_MASK)

#define XRDC_PDAC_W0_0_37_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_37_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_37_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_37_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_37_D3ACP_MASK)

#define XRDC_PDAC_W0_0_37_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_37_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_37_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_37_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_37_D4ACP_MASK)

#define XRDC_PDAC_W0_0_37_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_37_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_37_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_37_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_37_D5ACP_MASK)

#define XRDC_PDAC_W0_0_37_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_37_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_37_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_37_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_37_D6ACP_MASK)

#define XRDC_PDAC_W0_0_37_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_37_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_37_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_37_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_37_D7ACP_MASK)

#define XRDC_PDAC_W0_0_37_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_37_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_37_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_37_EALO_SHIFT)) & XRDC_PDAC_W0_0_37_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_37 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_37_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_37_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_37_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_37_EAL_SHIFT)) & XRDC_PDAC_W1_0_37_EAL_MASK)

#define XRDC_PDAC_W1_0_37_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_37_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_37_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_37_LK2_SHIFT)) & XRDC_PDAC_W1_0_37_LK2_MASK)

#define XRDC_PDAC_W1_0_37_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_37_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_37_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_37_VLD_SHIFT)) & XRDC_PDAC_W1_0_37_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_38 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_38_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_38_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_38_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_38_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_38_D0ACP_MASK)

#define XRDC_PDAC_W0_0_38_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_38_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_38_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_38_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_38_D1ACP_MASK)

#define XRDC_PDAC_W0_0_38_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_38_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_38_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_38_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_38_D2ACP_MASK)

#define XRDC_PDAC_W0_0_38_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_38_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_38_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_38_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_38_D3ACP_MASK)

#define XRDC_PDAC_W0_0_38_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_38_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_38_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_38_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_38_D4ACP_MASK)

#define XRDC_PDAC_W0_0_38_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_38_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_38_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_38_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_38_D5ACP_MASK)

#define XRDC_PDAC_W0_0_38_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_38_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_38_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_38_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_38_D6ACP_MASK)

#define XRDC_PDAC_W0_0_38_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_38_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_38_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_38_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_38_D7ACP_MASK)

#define XRDC_PDAC_W0_0_38_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_38_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_38_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_38_EALO_SHIFT)) & XRDC_PDAC_W0_0_38_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_38 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_38_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_38_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_38_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_38_EAL_SHIFT)) & XRDC_PDAC_W1_0_38_EAL_MASK)

#define XRDC_PDAC_W1_0_38_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_38_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_38_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_38_LK2_SHIFT)) & XRDC_PDAC_W1_0_38_LK2_MASK)

#define XRDC_PDAC_W1_0_38_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_38_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_38_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_38_VLD_SHIFT)) & XRDC_PDAC_W1_0_38_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_39 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_39_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_39_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_39_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_39_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_39_D0ACP_MASK)

#define XRDC_PDAC_W0_0_39_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_39_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_39_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_39_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_39_D1ACP_MASK)

#define XRDC_PDAC_W0_0_39_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_39_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_39_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_39_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_39_D2ACP_MASK)

#define XRDC_PDAC_W0_0_39_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_39_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_39_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_39_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_39_D3ACP_MASK)

#define XRDC_PDAC_W0_0_39_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_39_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_39_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_39_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_39_D4ACP_MASK)

#define XRDC_PDAC_W0_0_39_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_39_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_39_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_39_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_39_D5ACP_MASK)

#define XRDC_PDAC_W0_0_39_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_39_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_39_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_39_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_39_D6ACP_MASK)

#define XRDC_PDAC_W0_0_39_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_39_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_39_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_39_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_39_D7ACP_MASK)

#define XRDC_PDAC_W0_0_39_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_39_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_39_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_39_EALO_SHIFT)) & XRDC_PDAC_W0_0_39_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_39 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_39_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_39_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_39_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_39_EAL_SHIFT)) & XRDC_PDAC_W1_0_39_EAL_MASK)

#define XRDC_PDAC_W1_0_39_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_39_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_39_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_39_LK2_SHIFT)) & XRDC_PDAC_W1_0_39_LK2_MASK)

#define XRDC_PDAC_W1_0_39_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_39_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_39_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_39_VLD_SHIFT)) & XRDC_PDAC_W1_0_39_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_40 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_40_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_40_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_40_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_40_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_40_D0ACP_MASK)

#define XRDC_PDAC_W0_0_40_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_40_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_40_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_40_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_40_D1ACP_MASK)

#define XRDC_PDAC_W0_0_40_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_40_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_40_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_40_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_40_D2ACP_MASK)

#define XRDC_PDAC_W0_0_40_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_40_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_40_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_40_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_40_D3ACP_MASK)

#define XRDC_PDAC_W0_0_40_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_40_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_40_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_40_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_40_D4ACP_MASK)

#define XRDC_PDAC_W0_0_40_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_40_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_40_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_40_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_40_D5ACP_MASK)

#define XRDC_PDAC_W0_0_40_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_40_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_40_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_40_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_40_D6ACP_MASK)

#define XRDC_PDAC_W0_0_40_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_40_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_40_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_40_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_40_D7ACP_MASK)

#define XRDC_PDAC_W0_0_40_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_40_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_40_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_40_EALO_SHIFT)) & XRDC_PDAC_W0_0_40_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_40 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_40_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_40_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_40_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_40_EAL_SHIFT)) & XRDC_PDAC_W1_0_40_EAL_MASK)

#define XRDC_PDAC_W1_0_40_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_40_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_40_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_40_LK2_SHIFT)) & XRDC_PDAC_W1_0_40_LK2_MASK)

#define XRDC_PDAC_W1_0_40_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_40_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_40_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_40_VLD_SHIFT)) & XRDC_PDAC_W1_0_40_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_41 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_41_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_41_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_41_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_41_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_41_D0ACP_MASK)

#define XRDC_PDAC_W0_0_41_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_41_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_41_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_41_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_41_D1ACP_MASK)

#define XRDC_PDAC_W0_0_41_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_41_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_41_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_41_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_41_D2ACP_MASK)

#define XRDC_PDAC_W0_0_41_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_41_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_41_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_41_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_41_D3ACP_MASK)

#define XRDC_PDAC_W0_0_41_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_41_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_41_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_41_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_41_D4ACP_MASK)

#define XRDC_PDAC_W0_0_41_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_41_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_41_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_41_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_41_D5ACP_MASK)

#define XRDC_PDAC_W0_0_41_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_41_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_41_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_41_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_41_D6ACP_MASK)

#define XRDC_PDAC_W0_0_41_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_41_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_41_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_41_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_41_D7ACP_MASK)

#define XRDC_PDAC_W0_0_41_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_41_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_41_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_41_EALO_SHIFT)) & XRDC_PDAC_W0_0_41_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_41 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_41_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_41_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_41_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_41_EAL_SHIFT)) & XRDC_PDAC_W1_0_41_EAL_MASK)

#define XRDC_PDAC_W1_0_41_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_41_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_41_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_41_LK2_SHIFT)) & XRDC_PDAC_W1_0_41_LK2_MASK)

#define XRDC_PDAC_W1_0_41_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_41_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_41_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_41_VLD_SHIFT)) & XRDC_PDAC_W1_0_41_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_42 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_42_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_42_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_42_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_42_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_42_D0ACP_MASK)

#define XRDC_PDAC_W0_0_42_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_42_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_42_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_42_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_42_D1ACP_MASK)

#define XRDC_PDAC_W0_0_42_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_42_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_42_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_42_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_42_D2ACP_MASK)

#define XRDC_PDAC_W0_0_42_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_42_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_42_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_42_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_42_D3ACP_MASK)

#define XRDC_PDAC_W0_0_42_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_42_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_42_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_42_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_42_D4ACP_MASK)

#define XRDC_PDAC_W0_0_42_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_42_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_42_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_42_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_42_D5ACP_MASK)

#define XRDC_PDAC_W0_0_42_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_42_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_42_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_42_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_42_D6ACP_MASK)

#define XRDC_PDAC_W0_0_42_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_42_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_42_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_42_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_42_D7ACP_MASK)

#define XRDC_PDAC_W0_0_42_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_42_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_42_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_42_EALO_SHIFT)) & XRDC_PDAC_W0_0_42_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_42 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_42_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_42_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_42_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_42_EAL_SHIFT)) & XRDC_PDAC_W1_0_42_EAL_MASK)

#define XRDC_PDAC_W1_0_42_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_42_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_42_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_42_LK2_SHIFT)) & XRDC_PDAC_W1_0_42_LK2_MASK)

#define XRDC_PDAC_W1_0_42_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_42_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_42_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_42_VLD_SHIFT)) & XRDC_PDAC_W1_0_42_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_43 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_43_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_43_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_43_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_43_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_43_D0ACP_MASK)

#define XRDC_PDAC_W0_0_43_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_43_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_43_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_43_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_43_D1ACP_MASK)

#define XRDC_PDAC_W0_0_43_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_43_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_43_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_43_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_43_D2ACP_MASK)

#define XRDC_PDAC_W0_0_43_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_43_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_43_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_43_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_43_D3ACP_MASK)

#define XRDC_PDAC_W0_0_43_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_43_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_43_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_43_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_43_D4ACP_MASK)

#define XRDC_PDAC_W0_0_43_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_43_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_43_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_43_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_43_D5ACP_MASK)

#define XRDC_PDAC_W0_0_43_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_43_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_43_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_43_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_43_D6ACP_MASK)

#define XRDC_PDAC_W0_0_43_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_43_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_43_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_43_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_43_D7ACP_MASK)

#define XRDC_PDAC_W0_0_43_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_43_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_43_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_43_EALO_SHIFT)) & XRDC_PDAC_W0_0_43_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_43 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_43_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_43_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_43_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_43_EAL_SHIFT)) & XRDC_PDAC_W1_0_43_EAL_MASK)

#define XRDC_PDAC_W1_0_43_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_43_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_43_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_43_LK2_SHIFT)) & XRDC_PDAC_W1_0_43_LK2_MASK)

#define XRDC_PDAC_W1_0_43_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_43_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_43_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_43_VLD_SHIFT)) & XRDC_PDAC_W1_0_43_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_44 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_44_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_44_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_44_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_44_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_44_D0ACP_MASK)

#define XRDC_PDAC_W0_0_44_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_44_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_44_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_44_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_44_D1ACP_MASK)

#define XRDC_PDAC_W0_0_44_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_44_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_44_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_44_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_44_D2ACP_MASK)

#define XRDC_PDAC_W0_0_44_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_44_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_44_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_44_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_44_D3ACP_MASK)

#define XRDC_PDAC_W0_0_44_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_44_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_44_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_44_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_44_D4ACP_MASK)

#define XRDC_PDAC_W0_0_44_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_44_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_44_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_44_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_44_D5ACP_MASK)

#define XRDC_PDAC_W0_0_44_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_44_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_44_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_44_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_44_D6ACP_MASK)

#define XRDC_PDAC_W0_0_44_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_44_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_44_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_44_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_44_D7ACP_MASK)

#define XRDC_PDAC_W0_0_44_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_44_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_44_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_44_EALO_SHIFT)) & XRDC_PDAC_W0_0_44_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_44 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_44_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_44_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_44_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_44_EAL_SHIFT)) & XRDC_PDAC_W1_0_44_EAL_MASK)

#define XRDC_PDAC_W1_0_44_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_44_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_44_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_44_LK2_SHIFT)) & XRDC_PDAC_W1_0_44_LK2_MASK)

#define XRDC_PDAC_W1_0_44_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_44_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_44_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_44_VLD_SHIFT)) & XRDC_PDAC_W1_0_44_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_45 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_45_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_45_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_45_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_45_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_45_D0ACP_MASK)

#define XRDC_PDAC_W0_0_45_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_45_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_45_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_45_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_45_D1ACP_MASK)

#define XRDC_PDAC_W0_0_45_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_45_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_45_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_45_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_45_D2ACP_MASK)

#define XRDC_PDAC_W0_0_45_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_45_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_45_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_45_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_45_D3ACP_MASK)

#define XRDC_PDAC_W0_0_45_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_45_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_45_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_45_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_45_D4ACP_MASK)

#define XRDC_PDAC_W0_0_45_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_45_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_45_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_45_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_45_D5ACP_MASK)

#define XRDC_PDAC_W0_0_45_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_45_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_45_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_45_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_45_D6ACP_MASK)

#define XRDC_PDAC_W0_0_45_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_45_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_45_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_45_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_45_D7ACP_MASK)

#define XRDC_PDAC_W0_0_45_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_45_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_45_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_45_EALO_SHIFT)) & XRDC_PDAC_W0_0_45_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_45 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_45_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_45_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_45_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_45_EAL_SHIFT)) & XRDC_PDAC_W1_0_45_EAL_MASK)

#define XRDC_PDAC_W1_0_45_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_45_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_45_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_45_LK2_SHIFT)) & XRDC_PDAC_W1_0_45_LK2_MASK)

#define XRDC_PDAC_W1_0_45_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_45_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_45_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_45_VLD_SHIFT)) & XRDC_PDAC_W1_0_45_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_46 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_46_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_46_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_46_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_46_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_46_D0ACP_MASK)

#define XRDC_PDAC_W0_0_46_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_46_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_46_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_46_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_46_D1ACP_MASK)

#define XRDC_PDAC_W0_0_46_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_46_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_46_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_46_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_46_D2ACP_MASK)

#define XRDC_PDAC_W0_0_46_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_46_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_46_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_46_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_46_D3ACP_MASK)

#define XRDC_PDAC_W0_0_46_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_46_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_46_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_46_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_46_D4ACP_MASK)

#define XRDC_PDAC_W0_0_46_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_46_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_46_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_46_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_46_D5ACP_MASK)

#define XRDC_PDAC_W0_0_46_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_46_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_46_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_46_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_46_D6ACP_MASK)

#define XRDC_PDAC_W0_0_46_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_46_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_46_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_46_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_46_D7ACP_MASK)

#define XRDC_PDAC_W0_0_46_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_46_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_46_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_46_EALO_SHIFT)) & XRDC_PDAC_W0_0_46_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_46 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_46_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_46_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_46_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_46_EAL_SHIFT)) & XRDC_PDAC_W1_0_46_EAL_MASK)

#define XRDC_PDAC_W1_0_46_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_46_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_46_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_46_LK2_SHIFT)) & XRDC_PDAC_W1_0_46_LK2_MASK)

#define XRDC_PDAC_W1_0_46_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_46_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_46_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_46_VLD_SHIFT)) & XRDC_PDAC_W1_0_46_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_47 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_47_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_47_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_47_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_47_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_47_D0ACP_MASK)

#define XRDC_PDAC_W0_0_47_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_47_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_47_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_47_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_47_D1ACP_MASK)

#define XRDC_PDAC_W0_0_47_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_47_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_47_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_47_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_47_D2ACP_MASK)

#define XRDC_PDAC_W0_0_47_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_47_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_47_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_47_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_47_D3ACP_MASK)

#define XRDC_PDAC_W0_0_47_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_47_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_47_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_47_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_47_D4ACP_MASK)

#define XRDC_PDAC_W0_0_47_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_47_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_47_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_47_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_47_D5ACP_MASK)

#define XRDC_PDAC_W0_0_47_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_47_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_47_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_47_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_47_D6ACP_MASK)

#define XRDC_PDAC_W0_0_47_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_47_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_47_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_47_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_47_D7ACP_MASK)

#define XRDC_PDAC_W0_0_47_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_47_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_47_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_47_EALO_SHIFT)) & XRDC_PDAC_W0_0_47_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_47 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_47_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_47_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_47_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_47_EAL_SHIFT)) & XRDC_PDAC_W1_0_47_EAL_MASK)

#define XRDC_PDAC_W1_0_47_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_47_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_47_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_47_LK2_SHIFT)) & XRDC_PDAC_W1_0_47_LK2_MASK)

#define XRDC_PDAC_W1_0_47_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_47_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_47_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_47_VLD_SHIFT)) & XRDC_PDAC_W1_0_47_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_48 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_48_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_48_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_48_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_48_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_48_D0ACP_MASK)

#define XRDC_PDAC_W0_0_48_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_48_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_48_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_48_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_48_D1ACP_MASK)

#define XRDC_PDAC_W0_0_48_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_48_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_48_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_48_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_48_D2ACP_MASK)

#define XRDC_PDAC_W0_0_48_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_48_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_48_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_48_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_48_D3ACP_MASK)

#define XRDC_PDAC_W0_0_48_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_48_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_48_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_48_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_48_D4ACP_MASK)

#define XRDC_PDAC_W0_0_48_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_48_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_48_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_48_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_48_D5ACP_MASK)

#define XRDC_PDAC_W0_0_48_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_48_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_48_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_48_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_48_D6ACP_MASK)

#define XRDC_PDAC_W0_0_48_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_48_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_48_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_48_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_48_D7ACP_MASK)

#define XRDC_PDAC_W0_0_48_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_48_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_48_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_48_EALO_SHIFT)) & XRDC_PDAC_W0_0_48_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_48 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_48_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_48_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_48_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_48_EAL_SHIFT)) & XRDC_PDAC_W1_0_48_EAL_MASK)

#define XRDC_PDAC_W1_0_48_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_48_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_48_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_48_LK2_SHIFT)) & XRDC_PDAC_W1_0_48_LK2_MASK)

#define XRDC_PDAC_W1_0_48_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_48_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_48_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_48_VLD_SHIFT)) & XRDC_PDAC_W1_0_48_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_49 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_49_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_49_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_49_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_49_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_49_D0ACP_MASK)

#define XRDC_PDAC_W0_0_49_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_49_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_49_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_49_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_49_D1ACP_MASK)

#define XRDC_PDAC_W0_0_49_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_49_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_49_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_49_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_49_D2ACP_MASK)

#define XRDC_PDAC_W0_0_49_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_49_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_49_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_49_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_49_D3ACP_MASK)

#define XRDC_PDAC_W0_0_49_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_49_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_49_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_49_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_49_D4ACP_MASK)

#define XRDC_PDAC_W0_0_49_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_49_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_49_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_49_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_49_D5ACP_MASK)

#define XRDC_PDAC_W0_0_49_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_49_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_49_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_49_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_49_D6ACP_MASK)

#define XRDC_PDAC_W0_0_49_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_49_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_49_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_49_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_49_D7ACP_MASK)

#define XRDC_PDAC_W0_0_49_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_49_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_49_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_49_EALO_SHIFT)) & XRDC_PDAC_W0_0_49_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_49 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_49_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_49_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_49_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_49_EAL_SHIFT)) & XRDC_PDAC_W1_0_49_EAL_MASK)

#define XRDC_PDAC_W1_0_49_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_49_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_49_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_49_LK2_SHIFT)) & XRDC_PDAC_W1_0_49_LK2_MASK)

#define XRDC_PDAC_W1_0_49_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_49_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_49_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_49_VLD_SHIFT)) & XRDC_PDAC_W1_0_49_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_50 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_50_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_50_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_50_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_50_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_50_D0ACP_MASK)

#define XRDC_PDAC_W0_0_50_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_50_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_50_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_50_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_50_D1ACP_MASK)

#define XRDC_PDAC_W0_0_50_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_50_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_50_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_50_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_50_D2ACP_MASK)

#define XRDC_PDAC_W0_0_50_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_50_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_50_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_50_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_50_D3ACP_MASK)

#define XRDC_PDAC_W0_0_50_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_50_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_50_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_50_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_50_D4ACP_MASK)

#define XRDC_PDAC_W0_0_50_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_50_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_50_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_50_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_50_D5ACP_MASK)

#define XRDC_PDAC_W0_0_50_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_50_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_50_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_50_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_50_D6ACP_MASK)

#define XRDC_PDAC_W0_0_50_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_50_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_50_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_50_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_50_D7ACP_MASK)

#define XRDC_PDAC_W0_0_50_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_50_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_50_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_50_EALO_SHIFT)) & XRDC_PDAC_W0_0_50_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_50 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_50_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_50_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_50_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_50_EAL_SHIFT)) & XRDC_PDAC_W1_0_50_EAL_MASK)

#define XRDC_PDAC_W1_0_50_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_50_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_50_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_50_LK2_SHIFT)) & XRDC_PDAC_W1_0_50_LK2_MASK)

#define XRDC_PDAC_W1_0_50_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_50_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_50_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_50_VLD_SHIFT)) & XRDC_PDAC_W1_0_50_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_51 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_51_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_51_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_51_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_51_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_51_D0ACP_MASK)

#define XRDC_PDAC_W0_0_51_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_51_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_51_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_51_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_51_D1ACP_MASK)

#define XRDC_PDAC_W0_0_51_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_51_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_51_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_51_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_51_D2ACP_MASK)

#define XRDC_PDAC_W0_0_51_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_51_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_51_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_51_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_51_D3ACP_MASK)

#define XRDC_PDAC_W0_0_51_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_51_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_51_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_51_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_51_D4ACP_MASK)

#define XRDC_PDAC_W0_0_51_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_51_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_51_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_51_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_51_D5ACP_MASK)

#define XRDC_PDAC_W0_0_51_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_51_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_51_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_51_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_51_D6ACP_MASK)

#define XRDC_PDAC_W0_0_51_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_51_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_51_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_51_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_51_D7ACP_MASK)

#define XRDC_PDAC_W0_0_51_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_51_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_51_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_51_EALO_SHIFT)) & XRDC_PDAC_W0_0_51_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_51 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_51_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_51_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_51_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_51_EAL_SHIFT)) & XRDC_PDAC_W1_0_51_EAL_MASK)

#define XRDC_PDAC_W1_0_51_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_51_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_51_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_51_LK2_SHIFT)) & XRDC_PDAC_W1_0_51_LK2_MASK)

#define XRDC_PDAC_W1_0_51_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_51_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_51_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_51_VLD_SHIFT)) & XRDC_PDAC_W1_0_51_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_52 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_52_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_52_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_52_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_52_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_52_D0ACP_MASK)

#define XRDC_PDAC_W0_0_52_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_52_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_52_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_52_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_52_D1ACP_MASK)

#define XRDC_PDAC_W0_0_52_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_52_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_52_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_52_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_52_D2ACP_MASK)

#define XRDC_PDAC_W0_0_52_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_52_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_52_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_52_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_52_D3ACP_MASK)

#define XRDC_PDAC_W0_0_52_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_52_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_52_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_52_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_52_D4ACP_MASK)

#define XRDC_PDAC_W0_0_52_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_52_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_52_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_52_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_52_D5ACP_MASK)

#define XRDC_PDAC_W0_0_52_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_52_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_52_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_52_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_52_D6ACP_MASK)

#define XRDC_PDAC_W0_0_52_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_52_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_52_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_52_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_52_D7ACP_MASK)

#define XRDC_PDAC_W0_0_52_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_52_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_52_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_52_EALO_SHIFT)) & XRDC_PDAC_W0_0_52_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_52 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_52_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_52_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_52_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_52_EAL_SHIFT)) & XRDC_PDAC_W1_0_52_EAL_MASK)

#define XRDC_PDAC_W1_0_52_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_52_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_52_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_52_LK2_SHIFT)) & XRDC_PDAC_W1_0_52_LK2_MASK)

#define XRDC_PDAC_W1_0_52_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_52_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_52_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_52_VLD_SHIFT)) & XRDC_PDAC_W1_0_52_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_53 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_53_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_53_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_53_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_53_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_53_D0ACP_MASK)

#define XRDC_PDAC_W0_0_53_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_53_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_53_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_53_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_53_D1ACP_MASK)

#define XRDC_PDAC_W0_0_53_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_53_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_53_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_53_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_53_D2ACP_MASK)

#define XRDC_PDAC_W0_0_53_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_53_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_53_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_53_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_53_D3ACP_MASK)

#define XRDC_PDAC_W0_0_53_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_53_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_53_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_53_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_53_D4ACP_MASK)

#define XRDC_PDAC_W0_0_53_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_53_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_53_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_53_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_53_D5ACP_MASK)

#define XRDC_PDAC_W0_0_53_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_53_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_53_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_53_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_53_D6ACP_MASK)

#define XRDC_PDAC_W0_0_53_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_53_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_53_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_53_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_53_D7ACP_MASK)

#define XRDC_PDAC_W0_0_53_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_53_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_53_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_53_EALO_SHIFT)) & XRDC_PDAC_W0_0_53_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_53 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_53_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_53_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_53_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_53_EAL_SHIFT)) & XRDC_PDAC_W1_0_53_EAL_MASK)

#define XRDC_PDAC_W1_0_53_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_53_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_53_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_53_LK2_SHIFT)) & XRDC_PDAC_W1_0_53_LK2_MASK)

#define XRDC_PDAC_W1_0_53_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_53_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_53_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_53_VLD_SHIFT)) & XRDC_PDAC_W1_0_53_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_54 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_54_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_54_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_54_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_54_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_54_D0ACP_MASK)

#define XRDC_PDAC_W0_0_54_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_54_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_54_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_54_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_54_D1ACP_MASK)

#define XRDC_PDAC_W0_0_54_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_54_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_54_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_54_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_54_D2ACP_MASK)

#define XRDC_PDAC_W0_0_54_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_54_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_54_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_54_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_54_D3ACP_MASK)

#define XRDC_PDAC_W0_0_54_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_54_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_54_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_54_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_54_D4ACP_MASK)

#define XRDC_PDAC_W0_0_54_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_54_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_54_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_54_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_54_D5ACP_MASK)

#define XRDC_PDAC_W0_0_54_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_54_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_54_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_54_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_54_D6ACP_MASK)

#define XRDC_PDAC_W0_0_54_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_54_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_54_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_54_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_54_D7ACP_MASK)

#define XRDC_PDAC_W0_0_54_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_54_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_54_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_54_EALO_SHIFT)) & XRDC_PDAC_W0_0_54_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_54 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_54_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_54_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_54_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_54_EAL_SHIFT)) & XRDC_PDAC_W1_0_54_EAL_MASK)

#define XRDC_PDAC_W1_0_54_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_54_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_54_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_54_LK2_SHIFT)) & XRDC_PDAC_W1_0_54_LK2_MASK)

#define XRDC_PDAC_W1_0_54_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_54_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_54_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_54_VLD_SHIFT)) & XRDC_PDAC_W1_0_54_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_55 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_55_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_55_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_55_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_55_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_55_D0ACP_MASK)

#define XRDC_PDAC_W0_0_55_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_55_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_55_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_55_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_55_D1ACP_MASK)

#define XRDC_PDAC_W0_0_55_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_55_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_55_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_55_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_55_D2ACP_MASK)

#define XRDC_PDAC_W0_0_55_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_55_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_55_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_55_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_55_D3ACP_MASK)

#define XRDC_PDAC_W0_0_55_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_55_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_55_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_55_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_55_D4ACP_MASK)

#define XRDC_PDAC_W0_0_55_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_55_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_55_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_55_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_55_D5ACP_MASK)

#define XRDC_PDAC_W0_0_55_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_55_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_55_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_55_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_55_D6ACP_MASK)

#define XRDC_PDAC_W0_0_55_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_55_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_55_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_55_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_55_D7ACP_MASK)

#define XRDC_PDAC_W0_0_55_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_55_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_55_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_55_EALO_SHIFT)) & XRDC_PDAC_W0_0_55_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_55 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_55_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_55_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_55_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_55_EAL_SHIFT)) & XRDC_PDAC_W1_0_55_EAL_MASK)

#define XRDC_PDAC_W1_0_55_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_55_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_55_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_55_LK2_SHIFT)) & XRDC_PDAC_W1_0_55_LK2_MASK)

#define XRDC_PDAC_W1_0_55_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_55_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_55_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_55_VLD_SHIFT)) & XRDC_PDAC_W1_0_55_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_56 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_56_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_56_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_56_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_56_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_56_D0ACP_MASK)

#define XRDC_PDAC_W0_0_56_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_56_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_56_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_56_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_56_D1ACP_MASK)

#define XRDC_PDAC_W0_0_56_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_56_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_56_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_56_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_56_D2ACP_MASK)

#define XRDC_PDAC_W0_0_56_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_56_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_56_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_56_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_56_D3ACP_MASK)

#define XRDC_PDAC_W0_0_56_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_56_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_56_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_56_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_56_D4ACP_MASK)

#define XRDC_PDAC_W0_0_56_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_56_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_56_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_56_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_56_D5ACP_MASK)

#define XRDC_PDAC_W0_0_56_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_56_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_56_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_56_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_56_D6ACP_MASK)

#define XRDC_PDAC_W0_0_56_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_56_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_56_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_56_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_56_D7ACP_MASK)

#define XRDC_PDAC_W0_0_56_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_56_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_56_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_56_EALO_SHIFT)) & XRDC_PDAC_W0_0_56_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_56 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_56_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_56_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_56_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_56_EAL_SHIFT)) & XRDC_PDAC_W1_0_56_EAL_MASK)

#define XRDC_PDAC_W1_0_56_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_56_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_56_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_56_LK2_SHIFT)) & XRDC_PDAC_W1_0_56_LK2_MASK)

#define XRDC_PDAC_W1_0_56_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_56_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_56_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_56_VLD_SHIFT)) & XRDC_PDAC_W1_0_56_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_57 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_57_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_57_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_57_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_57_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_57_D0ACP_MASK)

#define XRDC_PDAC_W0_0_57_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_57_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_57_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_57_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_57_D1ACP_MASK)

#define XRDC_PDAC_W0_0_57_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_57_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_57_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_57_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_57_D2ACP_MASK)

#define XRDC_PDAC_W0_0_57_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_57_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_57_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_57_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_57_D3ACP_MASK)

#define XRDC_PDAC_W0_0_57_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_57_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_57_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_57_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_57_D4ACP_MASK)

#define XRDC_PDAC_W0_0_57_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_57_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_57_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_57_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_57_D5ACP_MASK)

#define XRDC_PDAC_W0_0_57_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_57_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_57_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_57_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_57_D6ACP_MASK)

#define XRDC_PDAC_W0_0_57_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_57_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_57_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_57_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_57_D7ACP_MASK)

#define XRDC_PDAC_W0_0_57_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_57_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_57_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_57_EALO_SHIFT)) & XRDC_PDAC_W0_0_57_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_57 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_57_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_57_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_57_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_57_EAL_SHIFT)) & XRDC_PDAC_W1_0_57_EAL_MASK)

#define XRDC_PDAC_W1_0_57_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_57_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_57_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_57_LK2_SHIFT)) & XRDC_PDAC_W1_0_57_LK2_MASK)

#define XRDC_PDAC_W1_0_57_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_57_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_57_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_57_VLD_SHIFT)) & XRDC_PDAC_W1_0_57_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_58 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_58_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_58_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_58_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_58_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_58_D0ACP_MASK)

#define XRDC_PDAC_W0_0_58_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_58_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_58_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_58_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_58_D1ACP_MASK)

#define XRDC_PDAC_W0_0_58_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_58_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_58_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_58_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_58_D2ACP_MASK)

#define XRDC_PDAC_W0_0_58_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_58_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_58_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_58_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_58_D3ACP_MASK)

#define XRDC_PDAC_W0_0_58_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_58_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_58_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_58_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_58_D4ACP_MASK)

#define XRDC_PDAC_W0_0_58_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_58_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_58_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_58_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_58_D5ACP_MASK)

#define XRDC_PDAC_W0_0_58_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_58_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_58_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_58_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_58_D6ACP_MASK)

#define XRDC_PDAC_W0_0_58_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_58_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_58_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_58_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_58_D7ACP_MASK)

#define XRDC_PDAC_W0_0_58_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_58_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_58_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_58_EALO_SHIFT)) & XRDC_PDAC_W0_0_58_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_58 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_58_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_58_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_58_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_58_EAL_SHIFT)) & XRDC_PDAC_W1_0_58_EAL_MASK)

#define XRDC_PDAC_W1_0_58_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_58_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_58_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_58_LK2_SHIFT)) & XRDC_PDAC_W1_0_58_LK2_MASK)

#define XRDC_PDAC_W1_0_58_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_58_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_58_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_58_VLD_SHIFT)) & XRDC_PDAC_W1_0_58_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_59 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_59_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_59_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_59_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_59_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_59_D0ACP_MASK)

#define XRDC_PDAC_W0_0_59_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_59_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_59_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_59_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_59_D1ACP_MASK)

#define XRDC_PDAC_W0_0_59_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_59_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_59_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_59_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_59_D2ACP_MASK)

#define XRDC_PDAC_W0_0_59_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_59_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_59_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_59_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_59_D3ACP_MASK)

#define XRDC_PDAC_W0_0_59_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_59_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_59_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_59_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_59_D4ACP_MASK)

#define XRDC_PDAC_W0_0_59_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_59_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_59_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_59_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_59_D5ACP_MASK)

#define XRDC_PDAC_W0_0_59_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_59_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_59_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_59_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_59_D6ACP_MASK)

#define XRDC_PDAC_W0_0_59_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_59_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_59_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_59_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_59_D7ACP_MASK)

#define XRDC_PDAC_W0_0_59_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_59_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_59_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_59_EALO_SHIFT)) & XRDC_PDAC_W0_0_59_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_59 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_59_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_59_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_59_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_59_EAL_SHIFT)) & XRDC_PDAC_W1_0_59_EAL_MASK)

#define XRDC_PDAC_W1_0_59_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_59_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_59_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_59_LK2_SHIFT)) & XRDC_PDAC_W1_0_59_LK2_MASK)

#define XRDC_PDAC_W1_0_59_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_59_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_59_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_59_VLD_SHIFT)) & XRDC_PDAC_W1_0_59_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_0_60 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_0_60_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_0_60_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_0_60_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_60_D0ACP_SHIFT)) & XRDC_PDAC_W0_0_60_D0ACP_MASK)

#define XRDC_PDAC_W0_0_60_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_0_60_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_0_60_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_60_D1ACP_SHIFT)) & XRDC_PDAC_W0_0_60_D1ACP_MASK)

#define XRDC_PDAC_W0_0_60_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_0_60_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_0_60_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_60_D2ACP_SHIFT)) & XRDC_PDAC_W0_0_60_D2ACP_MASK)

#define XRDC_PDAC_W0_0_60_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_0_60_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_0_60_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_60_D3ACP_SHIFT)) & XRDC_PDAC_W0_0_60_D3ACP_MASK)

#define XRDC_PDAC_W0_0_60_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_0_60_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_0_60_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_60_D4ACP_SHIFT)) & XRDC_PDAC_W0_0_60_D4ACP_MASK)

#define XRDC_PDAC_W0_0_60_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_0_60_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_0_60_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_60_D5ACP_SHIFT)) & XRDC_PDAC_W0_0_60_D5ACP_MASK)

#define XRDC_PDAC_W0_0_60_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_0_60_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_0_60_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_60_D6ACP_SHIFT)) & XRDC_PDAC_W0_0_60_D6ACP_MASK)

#define XRDC_PDAC_W0_0_60_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_0_60_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_0_60_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_60_D7ACP_SHIFT)) & XRDC_PDAC_W0_0_60_D7ACP_MASK)

#define XRDC_PDAC_W0_0_60_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_0_60_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_0_60_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_0_60_EALO_SHIFT)) & XRDC_PDAC_W0_0_60_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_0_60 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_0_60_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_0_60_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_0_60_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_60_EAL_SHIFT)) & XRDC_PDAC_W1_0_60_EAL_MASK)

#define XRDC_PDAC_W1_0_60_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_0_60_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_0_60_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_60_LK2_SHIFT)) & XRDC_PDAC_W1_0_60_LK2_MASK)

#define XRDC_PDAC_W1_0_60_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_0_60_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_0_60_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_0_60_VLD_SHIFT)) & XRDC_PDAC_W1_0_60_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_1_0 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_1_0_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_1_0_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_1_0_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_0_D0ACP_SHIFT)) & XRDC_PDAC_W0_1_0_D0ACP_MASK)

#define XRDC_PDAC_W0_1_0_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_1_0_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_1_0_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_0_D1ACP_SHIFT)) & XRDC_PDAC_W0_1_0_D1ACP_MASK)

#define XRDC_PDAC_W0_1_0_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_1_0_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_1_0_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_0_D2ACP_SHIFT)) & XRDC_PDAC_W0_1_0_D2ACP_MASK)

#define XRDC_PDAC_W0_1_0_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_1_0_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_1_0_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_0_D3ACP_SHIFT)) & XRDC_PDAC_W0_1_0_D3ACP_MASK)

#define XRDC_PDAC_W0_1_0_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_1_0_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_1_0_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_0_D4ACP_SHIFT)) & XRDC_PDAC_W0_1_0_D4ACP_MASK)

#define XRDC_PDAC_W0_1_0_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_1_0_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_1_0_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_0_D5ACP_SHIFT)) & XRDC_PDAC_W0_1_0_D5ACP_MASK)

#define XRDC_PDAC_W0_1_0_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_1_0_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_1_0_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_0_D6ACP_SHIFT)) & XRDC_PDAC_W0_1_0_D6ACP_MASK)

#define XRDC_PDAC_W0_1_0_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_1_0_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_1_0_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_0_D7ACP_SHIFT)) & XRDC_PDAC_W0_1_0_D7ACP_MASK)

#define XRDC_PDAC_W0_1_0_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_1_0_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_1_0_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_0_EALO_SHIFT)) & XRDC_PDAC_W0_1_0_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_1_0 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_1_0_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_1_0_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_1_0_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_0_EAL_SHIFT)) & XRDC_PDAC_W1_1_0_EAL_MASK)

#define XRDC_PDAC_W1_1_0_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_1_0_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_1_0_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_0_LK2_SHIFT)) & XRDC_PDAC_W1_1_0_LK2_MASK)

#define XRDC_PDAC_W1_1_0_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_1_0_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_1_0_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_0_VLD_SHIFT)) & XRDC_PDAC_W1_1_0_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_1_1 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_1_1_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_1_1_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_1_1_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_1_D0ACP_SHIFT)) & XRDC_PDAC_W0_1_1_D0ACP_MASK)

#define XRDC_PDAC_W0_1_1_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_1_1_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_1_1_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_1_D1ACP_SHIFT)) & XRDC_PDAC_W0_1_1_D1ACP_MASK)

#define XRDC_PDAC_W0_1_1_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_1_1_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_1_1_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_1_D2ACP_SHIFT)) & XRDC_PDAC_W0_1_1_D2ACP_MASK)

#define XRDC_PDAC_W0_1_1_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_1_1_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_1_1_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_1_D3ACP_SHIFT)) & XRDC_PDAC_W0_1_1_D3ACP_MASK)

#define XRDC_PDAC_W0_1_1_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_1_1_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_1_1_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_1_D4ACP_SHIFT)) & XRDC_PDAC_W0_1_1_D4ACP_MASK)

#define XRDC_PDAC_W0_1_1_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_1_1_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_1_1_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_1_D5ACP_SHIFT)) & XRDC_PDAC_W0_1_1_D5ACP_MASK)

#define XRDC_PDAC_W0_1_1_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_1_1_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_1_1_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_1_D6ACP_SHIFT)) & XRDC_PDAC_W0_1_1_D6ACP_MASK)

#define XRDC_PDAC_W0_1_1_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_1_1_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_1_1_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_1_D7ACP_SHIFT)) & XRDC_PDAC_W0_1_1_D7ACP_MASK)

#define XRDC_PDAC_W0_1_1_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_1_1_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_1_1_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_1_EALO_SHIFT)) & XRDC_PDAC_W0_1_1_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_1_1 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_1_1_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_1_1_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_1_1_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_1_EAL_SHIFT)) & XRDC_PDAC_W1_1_1_EAL_MASK)

#define XRDC_PDAC_W1_1_1_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_1_1_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_1_1_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_1_LK2_SHIFT)) & XRDC_PDAC_W1_1_1_LK2_MASK)

#define XRDC_PDAC_W1_1_1_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_1_1_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_1_1_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_1_VLD_SHIFT)) & XRDC_PDAC_W1_1_1_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_1_2 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_1_2_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_1_2_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_1_2_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_2_D0ACP_SHIFT)) & XRDC_PDAC_W0_1_2_D0ACP_MASK)

#define XRDC_PDAC_W0_1_2_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_1_2_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_1_2_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_2_D1ACP_SHIFT)) & XRDC_PDAC_W0_1_2_D1ACP_MASK)

#define XRDC_PDAC_W0_1_2_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_1_2_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_1_2_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_2_D2ACP_SHIFT)) & XRDC_PDAC_W0_1_2_D2ACP_MASK)

#define XRDC_PDAC_W0_1_2_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_1_2_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_1_2_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_2_D3ACP_SHIFT)) & XRDC_PDAC_W0_1_2_D3ACP_MASK)

#define XRDC_PDAC_W0_1_2_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_1_2_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_1_2_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_2_D4ACP_SHIFT)) & XRDC_PDAC_W0_1_2_D4ACP_MASK)

#define XRDC_PDAC_W0_1_2_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_1_2_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_1_2_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_2_D5ACP_SHIFT)) & XRDC_PDAC_W0_1_2_D5ACP_MASK)

#define XRDC_PDAC_W0_1_2_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_1_2_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_1_2_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_2_D6ACP_SHIFT)) & XRDC_PDAC_W0_1_2_D6ACP_MASK)

#define XRDC_PDAC_W0_1_2_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_1_2_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_1_2_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_2_D7ACP_SHIFT)) & XRDC_PDAC_W0_1_2_D7ACP_MASK)

#define XRDC_PDAC_W0_1_2_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_1_2_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_1_2_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_2_EALO_SHIFT)) & XRDC_PDAC_W0_1_2_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_1_2 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_1_2_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_1_2_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_1_2_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_2_EAL_SHIFT)) & XRDC_PDAC_W1_1_2_EAL_MASK)

#define XRDC_PDAC_W1_1_2_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_1_2_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_1_2_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_2_LK2_SHIFT)) & XRDC_PDAC_W1_1_2_LK2_MASK)

#define XRDC_PDAC_W1_1_2_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_1_2_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_1_2_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_2_VLD_SHIFT)) & XRDC_PDAC_W1_1_2_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_1_3 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_1_3_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_1_3_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_1_3_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_3_D0ACP_SHIFT)) & XRDC_PDAC_W0_1_3_D0ACP_MASK)

#define XRDC_PDAC_W0_1_3_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_1_3_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_1_3_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_3_D1ACP_SHIFT)) & XRDC_PDAC_W0_1_3_D1ACP_MASK)

#define XRDC_PDAC_W0_1_3_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_1_3_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_1_3_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_3_D2ACP_SHIFT)) & XRDC_PDAC_W0_1_3_D2ACP_MASK)

#define XRDC_PDAC_W0_1_3_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_1_3_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_1_3_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_3_D3ACP_SHIFT)) & XRDC_PDAC_W0_1_3_D3ACP_MASK)

#define XRDC_PDAC_W0_1_3_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_1_3_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_1_3_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_3_D4ACP_SHIFT)) & XRDC_PDAC_W0_1_3_D4ACP_MASK)

#define XRDC_PDAC_W0_1_3_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_1_3_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_1_3_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_3_D5ACP_SHIFT)) & XRDC_PDAC_W0_1_3_D5ACP_MASK)

#define XRDC_PDAC_W0_1_3_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_1_3_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_1_3_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_3_D6ACP_SHIFT)) & XRDC_PDAC_W0_1_3_D6ACP_MASK)

#define XRDC_PDAC_W0_1_3_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_1_3_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_1_3_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_3_D7ACP_SHIFT)) & XRDC_PDAC_W0_1_3_D7ACP_MASK)

#define XRDC_PDAC_W0_1_3_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_1_3_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_1_3_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_3_EALO_SHIFT)) & XRDC_PDAC_W0_1_3_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_1_3 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_1_3_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_1_3_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_1_3_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_3_EAL_SHIFT)) & XRDC_PDAC_W1_1_3_EAL_MASK)

#define XRDC_PDAC_W1_1_3_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_1_3_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_1_3_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_3_LK2_SHIFT)) & XRDC_PDAC_W1_1_3_LK2_MASK)

#define XRDC_PDAC_W1_1_3_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_1_3_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_1_3_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_3_VLD_SHIFT)) & XRDC_PDAC_W1_1_3_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_1_4 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_1_4_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_1_4_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_1_4_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_4_D0ACP_SHIFT)) & XRDC_PDAC_W0_1_4_D0ACP_MASK)

#define XRDC_PDAC_W0_1_4_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_1_4_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_1_4_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_4_D1ACP_SHIFT)) & XRDC_PDAC_W0_1_4_D1ACP_MASK)

#define XRDC_PDAC_W0_1_4_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_1_4_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_1_4_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_4_D2ACP_SHIFT)) & XRDC_PDAC_W0_1_4_D2ACP_MASK)

#define XRDC_PDAC_W0_1_4_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_1_4_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_1_4_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_4_D3ACP_SHIFT)) & XRDC_PDAC_W0_1_4_D3ACP_MASK)

#define XRDC_PDAC_W0_1_4_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_1_4_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_1_4_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_4_D4ACP_SHIFT)) & XRDC_PDAC_W0_1_4_D4ACP_MASK)

#define XRDC_PDAC_W0_1_4_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_1_4_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_1_4_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_4_D5ACP_SHIFT)) & XRDC_PDAC_W0_1_4_D5ACP_MASK)

#define XRDC_PDAC_W0_1_4_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_1_4_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_1_4_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_4_D6ACP_SHIFT)) & XRDC_PDAC_W0_1_4_D6ACP_MASK)

#define XRDC_PDAC_W0_1_4_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_1_4_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_1_4_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_4_D7ACP_SHIFT)) & XRDC_PDAC_W0_1_4_D7ACP_MASK)

#define XRDC_PDAC_W0_1_4_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_1_4_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_1_4_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_4_EALO_SHIFT)) & XRDC_PDAC_W0_1_4_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_1_4 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_1_4_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_1_4_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_1_4_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_4_EAL_SHIFT)) & XRDC_PDAC_W1_1_4_EAL_MASK)

#define XRDC_PDAC_W1_1_4_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_1_4_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_1_4_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_4_LK2_SHIFT)) & XRDC_PDAC_W1_1_4_LK2_MASK)

#define XRDC_PDAC_W1_1_4_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_1_4_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_1_4_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_4_VLD_SHIFT)) & XRDC_PDAC_W1_1_4_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_1_5 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_1_5_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_1_5_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_1_5_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_5_D0ACP_SHIFT)) & XRDC_PDAC_W0_1_5_D0ACP_MASK)

#define XRDC_PDAC_W0_1_5_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_1_5_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_1_5_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_5_D1ACP_SHIFT)) & XRDC_PDAC_W0_1_5_D1ACP_MASK)

#define XRDC_PDAC_W0_1_5_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_1_5_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_1_5_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_5_D2ACP_SHIFT)) & XRDC_PDAC_W0_1_5_D2ACP_MASK)

#define XRDC_PDAC_W0_1_5_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_1_5_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_1_5_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_5_D3ACP_SHIFT)) & XRDC_PDAC_W0_1_5_D3ACP_MASK)

#define XRDC_PDAC_W0_1_5_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_1_5_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_1_5_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_5_D4ACP_SHIFT)) & XRDC_PDAC_W0_1_5_D4ACP_MASK)

#define XRDC_PDAC_W0_1_5_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_1_5_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_1_5_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_5_D5ACP_SHIFT)) & XRDC_PDAC_W0_1_5_D5ACP_MASK)

#define XRDC_PDAC_W0_1_5_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_1_5_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_1_5_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_5_D6ACP_SHIFT)) & XRDC_PDAC_W0_1_5_D6ACP_MASK)

#define XRDC_PDAC_W0_1_5_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_1_5_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_1_5_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_5_D7ACP_SHIFT)) & XRDC_PDAC_W0_1_5_D7ACP_MASK)

#define XRDC_PDAC_W0_1_5_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_1_5_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_1_5_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_5_EALO_SHIFT)) & XRDC_PDAC_W0_1_5_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_1_5 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_1_5_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_1_5_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_1_5_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_5_EAL_SHIFT)) & XRDC_PDAC_W1_1_5_EAL_MASK)

#define XRDC_PDAC_W1_1_5_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_1_5_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_1_5_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_5_LK2_SHIFT)) & XRDC_PDAC_W1_1_5_LK2_MASK)

#define XRDC_PDAC_W1_1_5_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_1_5_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_1_5_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_5_VLD_SHIFT)) & XRDC_PDAC_W1_1_5_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_1_6 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_1_6_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_1_6_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_1_6_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_6_D0ACP_SHIFT)) & XRDC_PDAC_W0_1_6_D0ACP_MASK)

#define XRDC_PDAC_W0_1_6_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_1_6_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_1_6_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_6_D1ACP_SHIFT)) & XRDC_PDAC_W0_1_6_D1ACP_MASK)

#define XRDC_PDAC_W0_1_6_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_1_6_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_1_6_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_6_D2ACP_SHIFT)) & XRDC_PDAC_W0_1_6_D2ACP_MASK)

#define XRDC_PDAC_W0_1_6_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_1_6_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_1_6_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_6_D3ACP_SHIFT)) & XRDC_PDAC_W0_1_6_D3ACP_MASK)

#define XRDC_PDAC_W0_1_6_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_1_6_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_1_6_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_6_D4ACP_SHIFT)) & XRDC_PDAC_W0_1_6_D4ACP_MASK)

#define XRDC_PDAC_W0_1_6_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_1_6_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_1_6_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_6_D5ACP_SHIFT)) & XRDC_PDAC_W0_1_6_D5ACP_MASK)

#define XRDC_PDAC_W0_1_6_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_1_6_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_1_6_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_6_D6ACP_SHIFT)) & XRDC_PDAC_W0_1_6_D6ACP_MASK)

#define XRDC_PDAC_W0_1_6_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_1_6_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_1_6_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_6_D7ACP_SHIFT)) & XRDC_PDAC_W0_1_6_D7ACP_MASK)

#define XRDC_PDAC_W0_1_6_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_1_6_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_1_6_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_6_EALO_SHIFT)) & XRDC_PDAC_W0_1_6_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_1_6 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_1_6_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_1_6_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_1_6_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_6_EAL_SHIFT)) & XRDC_PDAC_W1_1_6_EAL_MASK)

#define XRDC_PDAC_W1_1_6_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_1_6_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_1_6_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_6_LK2_SHIFT)) & XRDC_PDAC_W1_1_6_LK2_MASK)

#define XRDC_PDAC_W1_1_6_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_1_6_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_1_6_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_6_VLD_SHIFT)) & XRDC_PDAC_W1_1_6_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_1_7 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_1_7_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_1_7_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_1_7_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_7_D0ACP_SHIFT)) & XRDC_PDAC_W0_1_7_D0ACP_MASK)

#define XRDC_PDAC_W0_1_7_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_1_7_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_1_7_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_7_D1ACP_SHIFT)) & XRDC_PDAC_W0_1_7_D1ACP_MASK)

#define XRDC_PDAC_W0_1_7_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_1_7_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_1_7_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_7_D2ACP_SHIFT)) & XRDC_PDAC_W0_1_7_D2ACP_MASK)

#define XRDC_PDAC_W0_1_7_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_1_7_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_1_7_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_7_D3ACP_SHIFT)) & XRDC_PDAC_W0_1_7_D3ACP_MASK)

#define XRDC_PDAC_W0_1_7_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_1_7_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_1_7_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_7_D4ACP_SHIFT)) & XRDC_PDAC_W0_1_7_D4ACP_MASK)

#define XRDC_PDAC_W0_1_7_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_1_7_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_1_7_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_7_D5ACP_SHIFT)) & XRDC_PDAC_W0_1_7_D5ACP_MASK)

#define XRDC_PDAC_W0_1_7_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_1_7_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_1_7_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_7_D6ACP_SHIFT)) & XRDC_PDAC_W0_1_7_D6ACP_MASK)

#define XRDC_PDAC_W0_1_7_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_1_7_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_1_7_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_7_D7ACP_SHIFT)) & XRDC_PDAC_W0_1_7_D7ACP_MASK)

#define XRDC_PDAC_W0_1_7_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_1_7_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_1_7_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_7_EALO_SHIFT)) & XRDC_PDAC_W0_1_7_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_1_7 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_1_7_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_1_7_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_1_7_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_7_EAL_SHIFT)) & XRDC_PDAC_W1_1_7_EAL_MASK)

#define XRDC_PDAC_W1_1_7_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_1_7_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_1_7_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_7_LK2_SHIFT)) & XRDC_PDAC_W1_1_7_LK2_MASK)

#define XRDC_PDAC_W1_1_7_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_1_7_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_1_7_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_7_VLD_SHIFT)) & XRDC_PDAC_W1_1_7_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_1_8 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_1_8_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_1_8_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_1_8_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_8_D0ACP_SHIFT)) & XRDC_PDAC_W0_1_8_D0ACP_MASK)

#define XRDC_PDAC_W0_1_8_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_1_8_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_1_8_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_8_D1ACP_SHIFT)) & XRDC_PDAC_W0_1_8_D1ACP_MASK)

#define XRDC_PDAC_W0_1_8_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_1_8_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_1_8_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_8_D2ACP_SHIFT)) & XRDC_PDAC_W0_1_8_D2ACP_MASK)

#define XRDC_PDAC_W0_1_8_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_1_8_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_1_8_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_8_D3ACP_SHIFT)) & XRDC_PDAC_W0_1_8_D3ACP_MASK)

#define XRDC_PDAC_W0_1_8_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_1_8_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_1_8_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_8_D4ACP_SHIFT)) & XRDC_PDAC_W0_1_8_D4ACP_MASK)

#define XRDC_PDAC_W0_1_8_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_1_8_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_1_8_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_8_D5ACP_SHIFT)) & XRDC_PDAC_W0_1_8_D5ACP_MASK)

#define XRDC_PDAC_W0_1_8_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_1_8_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_1_8_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_8_D6ACP_SHIFT)) & XRDC_PDAC_W0_1_8_D6ACP_MASK)

#define XRDC_PDAC_W0_1_8_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_1_8_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_1_8_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_8_D7ACP_SHIFT)) & XRDC_PDAC_W0_1_8_D7ACP_MASK)

#define XRDC_PDAC_W0_1_8_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_1_8_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_1_8_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_8_EALO_SHIFT)) & XRDC_PDAC_W0_1_8_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_1_8 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_1_8_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_1_8_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_1_8_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_8_EAL_SHIFT)) & XRDC_PDAC_W1_1_8_EAL_MASK)

#define XRDC_PDAC_W1_1_8_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_1_8_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_1_8_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_8_LK2_SHIFT)) & XRDC_PDAC_W1_1_8_LK2_MASK)

#define XRDC_PDAC_W1_1_8_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_1_8_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_1_8_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_8_VLD_SHIFT)) & XRDC_PDAC_W1_1_8_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_1_9 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_1_9_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_1_9_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_1_9_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_9_D0ACP_SHIFT)) & XRDC_PDAC_W0_1_9_D0ACP_MASK)

#define XRDC_PDAC_W0_1_9_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_1_9_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_1_9_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_9_D1ACP_SHIFT)) & XRDC_PDAC_W0_1_9_D1ACP_MASK)

#define XRDC_PDAC_W0_1_9_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_1_9_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_1_9_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_9_D2ACP_SHIFT)) & XRDC_PDAC_W0_1_9_D2ACP_MASK)

#define XRDC_PDAC_W0_1_9_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_1_9_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_1_9_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_9_D3ACP_SHIFT)) & XRDC_PDAC_W0_1_9_D3ACP_MASK)

#define XRDC_PDAC_W0_1_9_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_1_9_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_1_9_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_9_D4ACP_SHIFT)) & XRDC_PDAC_W0_1_9_D4ACP_MASK)

#define XRDC_PDAC_W0_1_9_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_1_9_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_1_9_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_9_D5ACP_SHIFT)) & XRDC_PDAC_W0_1_9_D5ACP_MASK)

#define XRDC_PDAC_W0_1_9_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_1_9_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_1_9_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_9_D6ACP_SHIFT)) & XRDC_PDAC_W0_1_9_D6ACP_MASK)

#define XRDC_PDAC_W0_1_9_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_1_9_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_1_9_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_9_D7ACP_SHIFT)) & XRDC_PDAC_W0_1_9_D7ACP_MASK)

#define XRDC_PDAC_W0_1_9_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_1_9_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_1_9_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_9_EALO_SHIFT)) & XRDC_PDAC_W0_1_9_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_1_9 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_1_9_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_1_9_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_1_9_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_9_EAL_SHIFT)) & XRDC_PDAC_W1_1_9_EAL_MASK)

#define XRDC_PDAC_W1_1_9_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_1_9_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_1_9_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_9_LK2_SHIFT)) & XRDC_PDAC_W1_1_9_LK2_MASK)

#define XRDC_PDAC_W1_1_9_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_1_9_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_1_9_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_9_VLD_SHIFT)) & XRDC_PDAC_W1_1_9_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_1_10 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_1_10_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_1_10_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_1_10_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_10_D0ACP_SHIFT)) & XRDC_PDAC_W0_1_10_D0ACP_MASK)

#define XRDC_PDAC_W0_1_10_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_1_10_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_1_10_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_10_D1ACP_SHIFT)) & XRDC_PDAC_W0_1_10_D1ACP_MASK)

#define XRDC_PDAC_W0_1_10_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_1_10_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_1_10_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_10_D2ACP_SHIFT)) & XRDC_PDAC_W0_1_10_D2ACP_MASK)

#define XRDC_PDAC_W0_1_10_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_1_10_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_1_10_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_10_D3ACP_SHIFT)) & XRDC_PDAC_W0_1_10_D3ACP_MASK)

#define XRDC_PDAC_W0_1_10_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_1_10_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_1_10_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_10_D4ACP_SHIFT)) & XRDC_PDAC_W0_1_10_D4ACP_MASK)

#define XRDC_PDAC_W0_1_10_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_1_10_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_1_10_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_10_D5ACP_SHIFT)) & XRDC_PDAC_W0_1_10_D5ACP_MASK)

#define XRDC_PDAC_W0_1_10_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_1_10_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_1_10_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_10_D6ACP_SHIFT)) & XRDC_PDAC_W0_1_10_D6ACP_MASK)

#define XRDC_PDAC_W0_1_10_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_1_10_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_1_10_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_10_D7ACP_SHIFT)) & XRDC_PDAC_W0_1_10_D7ACP_MASK)

#define XRDC_PDAC_W0_1_10_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_1_10_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_1_10_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_10_EALO_SHIFT)) & XRDC_PDAC_W0_1_10_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_1_10 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_1_10_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_1_10_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_1_10_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_10_EAL_SHIFT)) & XRDC_PDAC_W1_1_10_EAL_MASK)

#define XRDC_PDAC_W1_1_10_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_1_10_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_1_10_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_10_LK2_SHIFT)) & XRDC_PDAC_W1_1_10_LK2_MASK)

#define XRDC_PDAC_W1_1_10_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_1_10_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_1_10_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_10_VLD_SHIFT)) & XRDC_PDAC_W1_1_10_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_1_11 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_1_11_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_1_11_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_1_11_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_11_D0ACP_SHIFT)) & XRDC_PDAC_W0_1_11_D0ACP_MASK)

#define XRDC_PDAC_W0_1_11_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_1_11_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_1_11_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_11_D1ACP_SHIFT)) & XRDC_PDAC_W0_1_11_D1ACP_MASK)

#define XRDC_PDAC_W0_1_11_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_1_11_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_1_11_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_11_D2ACP_SHIFT)) & XRDC_PDAC_W0_1_11_D2ACP_MASK)

#define XRDC_PDAC_W0_1_11_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_1_11_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_1_11_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_11_D3ACP_SHIFT)) & XRDC_PDAC_W0_1_11_D3ACP_MASK)

#define XRDC_PDAC_W0_1_11_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_1_11_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_1_11_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_11_D4ACP_SHIFT)) & XRDC_PDAC_W0_1_11_D4ACP_MASK)

#define XRDC_PDAC_W0_1_11_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_1_11_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_1_11_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_11_D5ACP_SHIFT)) & XRDC_PDAC_W0_1_11_D5ACP_MASK)

#define XRDC_PDAC_W0_1_11_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_1_11_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_1_11_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_11_D6ACP_SHIFT)) & XRDC_PDAC_W0_1_11_D6ACP_MASK)

#define XRDC_PDAC_W0_1_11_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_1_11_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_1_11_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_11_D7ACP_SHIFT)) & XRDC_PDAC_W0_1_11_D7ACP_MASK)

#define XRDC_PDAC_W0_1_11_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_1_11_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_1_11_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_11_EALO_SHIFT)) & XRDC_PDAC_W0_1_11_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_1_11 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_1_11_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_1_11_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_1_11_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_11_EAL_SHIFT)) & XRDC_PDAC_W1_1_11_EAL_MASK)

#define XRDC_PDAC_W1_1_11_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_1_11_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_1_11_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_11_LK2_SHIFT)) & XRDC_PDAC_W1_1_11_LK2_MASK)

#define XRDC_PDAC_W1_1_11_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_1_11_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_1_11_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_11_VLD_SHIFT)) & XRDC_PDAC_W1_1_11_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_1_12 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_1_12_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_1_12_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_1_12_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_12_D0ACP_SHIFT)) & XRDC_PDAC_W0_1_12_D0ACP_MASK)

#define XRDC_PDAC_W0_1_12_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_1_12_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_1_12_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_12_D1ACP_SHIFT)) & XRDC_PDAC_W0_1_12_D1ACP_MASK)

#define XRDC_PDAC_W0_1_12_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_1_12_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_1_12_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_12_D2ACP_SHIFT)) & XRDC_PDAC_W0_1_12_D2ACP_MASK)

#define XRDC_PDAC_W0_1_12_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_1_12_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_1_12_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_12_D3ACP_SHIFT)) & XRDC_PDAC_W0_1_12_D3ACP_MASK)

#define XRDC_PDAC_W0_1_12_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_1_12_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_1_12_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_12_D4ACP_SHIFT)) & XRDC_PDAC_W0_1_12_D4ACP_MASK)

#define XRDC_PDAC_W0_1_12_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_1_12_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_1_12_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_12_D5ACP_SHIFT)) & XRDC_PDAC_W0_1_12_D5ACP_MASK)

#define XRDC_PDAC_W0_1_12_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_1_12_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_1_12_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_12_D6ACP_SHIFT)) & XRDC_PDAC_W0_1_12_D6ACP_MASK)

#define XRDC_PDAC_W0_1_12_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_1_12_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_1_12_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_12_D7ACP_SHIFT)) & XRDC_PDAC_W0_1_12_D7ACP_MASK)

#define XRDC_PDAC_W0_1_12_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_1_12_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_1_12_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_12_EALO_SHIFT)) & XRDC_PDAC_W0_1_12_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_1_12 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_1_12_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_1_12_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_1_12_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_12_EAL_SHIFT)) & XRDC_PDAC_W1_1_12_EAL_MASK)

#define XRDC_PDAC_W1_1_12_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_1_12_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_1_12_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_12_LK2_SHIFT)) & XRDC_PDAC_W1_1_12_LK2_MASK)

#define XRDC_PDAC_W1_1_12_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_1_12_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_1_12_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_12_VLD_SHIFT)) & XRDC_PDAC_W1_1_12_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_1_13 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_1_13_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_1_13_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_1_13_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_13_D0ACP_SHIFT)) & XRDC_PDAC_W0_1_13_D0ACP_MASK)

#define XRDC_PDAC_W0_1_13_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_1_13_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_1_13_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_13_D1ACP_SHIFT)) & XRDC_PDAC_W0_1_13_D1ACP_MASK)

#define XRDC_PDAC_W0_1_13_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_1_13_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_1_13_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_13_D2ACP_SHIFT)) & XRDC_PDAC_W0_1_13_D2ACP_MASK)

#define XRDC_PDAC_W0_1_13_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_1_13_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_1_13_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_13_D3ACP_SHIFT)) & XRDC_PDAC_W0_1_13_D3ACP_MASK)

#define XRDC_PDAC_W0_1_13_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_1_13_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_1_13_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_13_D4ACP_SHIFT)) & XRDC_PDAC_W0_1_13_D4ACP_MASK)

#define XRDC_PDAC_W0_1_13_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_1_13_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_1_13_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_13_D5ACP_SHIFT)) & XRDC_PDAC_W0_1_13_D5ACP_MASK)

#define XRDC_PDAC_W0_1_13_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_1_13_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_1_13_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_13_D6ACP_SHIFT)) & XRDC_PDAC_W0_1_13_D6ACP_MASK)

#define XRDC_PDAC_W0_1_13_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_1_13_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_1_13_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_13_D7ACP_SHIFT)) & XRDC_PDAC_W0_1_13_D7ACP_MASK)

#define XRDC_PDAC_W0_1_13_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_1_13_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_1_13_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_13_EALO_SHIFT)) & XRDC_PDAC_W0_1_13_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_1_13 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_1_13_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_1_13_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_1_13_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_13_EAL_SHIFT)) & XRDC_PDAC_W1_1_13_EAL_MASK)

#define XRDC_PDAC_W1_1_13_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_1_13_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_1_13_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_13_LK2_SHIFT)) & XRDC_PDAC_W1_1_13_LK2_MASK)

#define XRDC_PDAC_W1_1_13_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_1_13_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_1_13_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_13_VLD_SHIFT)) & XRDC_PDAC_W1_1_13_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_1_14 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_1_14_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_1_14_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_1_14_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_14_D0ACP_SHIFT)) & XRDC_PDAC_W0_1_14_D0ACP_MASK)

#define XRDC_PDAC_W0_1_14_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_1_14_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_1_14_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_14_D1ACP_SHIFT)) & XRDC_PDAC_W0_1_14_D1ACP_MASK)

#define XRDC_PDAC_W0_1_14_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_1_14_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_1_14_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_14_D2ACP_SHIFT)) & XRDC_PDAC_W0_1_14_D2ACP_MASK)

#define XRDC_PDAC_W0_1_14_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_1_14_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_1_14_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_14_D3ACP_SHIFT)) & XRDC_PDAC_W0_1_14_D3ACP_MASK)

#define XRDC_PDAC_W0_1_14_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_1_14_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_1_14_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_14_D4ACP_SHIFT)) & XRDC_PDAC_W0_1_14_D4ACP_MASK)

#define XRDC_PDAC_W0_1_14_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_1_14_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_1_14_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_14_D5ACP_SHIFT)) & XRDC_PDAC_W0_1_14_D5ACP_MASK)

#define XRDC_PDAC_W0_1_14_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_1_14_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_1_14_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_14_D6ACP_SHIFT)) & XRDC_PDAC_W0_1_14_D6ACP_MASK)

#define XRDC_PDAC_W0_1_14_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_1_14_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_1_14_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_14_D7ACP_SHIFT)) & XRDC_PDAC_W0_1_14_D7ACP_MASK)

#define XRDC_PDAC_W0_1_14_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_1_14_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_1_14_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_14_EALO_SHIFT)) & XRDC_PDAC_W0_1_14_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_1_14 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_1_14_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_1_14_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_1_14_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_14_EAL_SHIFT)) & XRDC_PDAC_W1_1_14_EAL_MASK)

#define XRDC_PDAC_W1_1_14_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_1_14_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_1_14_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_14_LK2_SHIFT)) & XRDC_PDAC_W1_1_14_LK2_MASK)

#define XRDC_PDAC_W1_1_14_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_1_14_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_1_14_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_14_VLD_SHIFT)) & XRDC_PDAC_W1_1_14_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_1_15 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_1_15_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_1_15_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_1_15_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_15_D0ACP_SHIFT)) & XRDC_PDAC_W0_1_15_D0ACP_MASK)

#define XRDC_PDAC_W0_1_15_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_1_15_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_1_15_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_15_D1ACP_SHIFT)) & XRDC_PDAC_W0_1_15_D1ACP_MASK)

#define XRDC_PDAC_W0_1_15_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_1_15_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_1_15_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_15_D2ACP_SHIFT)) & XRDC_PDAC_W0_1_15_D2ACP_MASK)

#define XRDC_PDAC_W0_1_15_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_1_15_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_1_15_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_15_D3ACP_SHIFT)) & XRDC_PDAC_W0_1_15_D3ACP_MASK)

#define XRDC_PDAC_W0_1_15_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_1_15_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_1_15_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_15_D4ACP_SHIFT)) & XRDC_PDAC_W0_1_15_D4ACP_MASK)

#define XRDC_PDAC_W0_1_15_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_1_15_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_1_15_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_15_D5ACP_SHIFT)) & XRDC_PDAC_W0_1_15_D5ACP_MASK)

#define XRDC_PDAC_W0_1_15_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_1_15_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_1_15_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_15_D6ACP_SHIFT)) & XRDC_PDAC_W0_1_15_D6ACP_MASK)

#define XRDC_PDAC_W0_1_15_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_1_15_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_1_15_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_15_D7ACP_SHIFT)) & XRDC_PDAC_W0_1_15_D7ACP_MASK)

#define XRDC_PDAC_W0_1_15_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_1_15_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_1_15_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_15_EALO_SHIFT)) & XRDC_PDAC_W0_1_15_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_1_15 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_1_15_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_1_15_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_1_15_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_15_EAL_SHIFT)) & XRDC_PDAC_W1_1_15_EAL_MASK)

#define XRDC_PDAC_W1_1_15_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_1_15_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_1_15_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_15_LK2_SHIFT)) & XRDC_PDAC_W1_1_15_LK2_MASK)

#define XRDC_PDAC_W1_1_15_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_1_15_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_1_15_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_15_VLD_SHIFT)) & XRDC_PDAC_W1_1_15_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_1_16 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_1_16_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_1_16_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_1_16_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_16_D0ACP_SHIFT)) & XRDC_PDAC_W0_1_16_D0ACP_MASK)

#define XRDC_PDAC_W0_1_16_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_1_16_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_1_16_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_16_D1ACP_SHIFT)) & XRDC_PDAC_W0_1_16_D1ACP_MASK)

#define XRDC_PDAC_W0_1_16_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_1_16_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_1_16_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_16_D2ACP_SHIFT)) & XRDC_PDAC_W0_1_16_D2ACP_MASK)

#define XRDC_PDAC_W0_1_16_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_1_16_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_1_16_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_16_D3ACP_SHIFT)) & XRDC_PDAC_W0_1_16_D3ACP_MASK)

#define XRDC_PDAC_W0_1_16_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_1_16_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_1_16_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_16_D4ACP_SHIFT)) & XRDC_PDAC_W0_1_16_D4ACP_MASK)

#define XRDC_PDAC_W0_1_16_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_1_16_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_1_16_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_16_D5ACP_SHIFT)) & XRDC_PDAC_W0_1_16_D5ACP_MASK)

#define XRDC_PDAC_W0_1_16_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_1_16_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_1_16_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_16_D6ACP_SHIFT)) & XRDC_PDAC_W0_1_16_D6ACP_MASK)

#define XRDC_PDAC_W0_1_16_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_1_16_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_1_16_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_16_D7ACP_SHIFT)) & XRDC_PDAC_W0_1_16_D7ACP_MASK)

#define XRDC_PDAC_W0_1_16_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_1_16_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_1_16_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_16_EALO_SHIFT)) & XRDC_PDAC_W0_1_16_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_1_16 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_1_16_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_1_16_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_1_16_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_16_EAL_SHIFT)) & XRDC_PDAC_W1_1_16_EAL_MASK)

#define XRDC_PDAC_W1_1_16_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_1_16_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_1_16_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_16_LK2_SHIFT)) & XRDC_PDAC_W1_1_16_LK2_MASK)

#define XRDC_PDAC_W1_1_16_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_1_16_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_1_16_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_16_VLD_SHIFT)) & XRDC_PDAC_W1_1_16_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_1_17 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_1_17_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_1_17_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_1_17_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_17_D0ACP_SHIFT)) & XRDC_PDAC_W0_1_17_D0ACP_MASK)

#define XRDC_PDAC_W0_1_17_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_1_17_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_1_17_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_17_D1ACP_SHIFT)) & XRDC_PDAC_W0_1_17_D1ACP_MASK)

#define XRDC_PDAC_W0_1_17_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_1_17_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_1_17_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_17_D2ACP_SHIFT)) & XRDC_PDAC_W0_1_17_D2ACP_MASK)

#define XRDC_PDAC_W0_1_17_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_1_17_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_1_17_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_17_D3ACP_SHIFT)) & XRDC_PDAC_W0_1_17_D3ACP_MASK)

#define XRDC_PDAC_W0_1_17_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_1_17_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_1_17_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_17_D4ACP_SHIFT)) & XRDC_PDAC_W0_1_17_D4ACP_MASK)

#define XRDC_PDAC_W0_1_17_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_1_17_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_1_17_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_17_D5ACP_SHIFT)) & XRDC_PDAC_W0_1_17_D5ACP_MASK)

#define XRDC_PDAC_W0_1_17_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_1_17_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_1_17_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_17_D6ACP_SHIFT)) & XRDC_PDAC_W0_1_17_D6ACP_MASK)

#define XRDC_PDAC_W0_1_17_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_1_17_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_1_17_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_17_D7ACP_SHIFT)) & XRDC_PDAC_W0_1_17_D7ACP_MASK)

#define XRDC_PDAC_W0_1_17_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_1_17_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_1_17_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_17_EALO_SHIFT)) & XRDC_PDAC_W0_1_17_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_1_17 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_1_17_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_1_17_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_1_17_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_17_EAL_SHIFT)) & XRDC_PDAC_W1_1_17_EAL_MASK)

#define XRDC_PDAC_W1_1_17_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_1_17_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_1_17_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_17_LK2_SHIFT)) & XRDC_PDAC_W1_1_17_LK2_MASK)

#define XRDC_PDAC_W1_1_17_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_1_17_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_1_17_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_17_VLD_SHIFT)) & XRDC_PDAC_W1_1_17_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_1_18 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_1_18_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_1_18_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_1_18_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_18_D0ACP_SHIFT)) & XRDC_PDAC_W0_1_18_D0ACP_MASK)

#define XRDC_PDAC_W0_1_18_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_1_18_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_1_18_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_18_D1ACP_SHIFT)) & XRDC_PDAC_W0_1_18_D1ACP_MASK)

#define XRDC_PDAC_W0_1_18_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_1_18_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_1_18_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_18_D2ACP_SHIFT)) & XRDC_PDAC_W0_1_18_D2ACP_MASK)

#define XRDC_PDAC_W0_1_18_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_1_18_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_1_18_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_18_D3ACP_SHIFT)) & XRDC_PDAC_W0_1_18_D3ACP_MASK)

#define XRDC_PDAC_W0_1_18_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_1_18_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_1_18_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_18_D4ACP_SHIFT)) & XRDC_PDAC_W0_1_18_D4ACP_MASK)

#define XRDC_PDAC_W0_1_18_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_1_18_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_1_18_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_18_D5ACP_SHIFT)) & XRDC_PDAC_W0_1_18_D5ACP_MASK)

#define XRDC_PDAC_W0_1_18_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_1_18_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_1_18_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_18_D6ACP_SHIFT)) & XRDC_PDAC_W0_1_18_D6ACP_MASK)

#define XRDC_PDAC_W0_1_18_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_1_18_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_1_18_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_18_D7ACP_SHIFT)) & XRDC_PDAC_W0_1_18_D7ACP_MASK)

#define XRDC_PDAC_W0_1_18_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_1_18_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_1_18_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_18_EALO_SHIFT)) & XRDC_PDAC_W0_1_18_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_1_18 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_1_18_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_1_18_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_1_18_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_18_EAL_SHIFT)) & XRDC_PDAC_W1_1_18_EAL_MASK)

#define XRDC_PDAC_W1_1_18_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_1_18_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_1_18_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_18_LK2_SHIFT)) & XRDC_PDAC_W1_1_18_LK2_MASK)

#define XRDC_PDAC_W1_1_18_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_1_18_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_1_18_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_18_VLD_SHIFT)) & XRDC_PDAC_W1_1_18_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_1_19 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_1_19_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_1_19_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_1_19_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_19_D0ACP_SHIFT)) & XRDC_PDAC_W0_1_19_D0ACP_MASK)

#define XRDC_PDAC_W0_1_19_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_1_19_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_1_19_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_19_D1ACP_SHIFT)) & XRDC_PDAC_W0_1_19_D1ACP_MASK)

#define XRDC_PDAC_W0_1_19_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_1_19_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_1_19_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_19_D2ACP_SHIFT)) & XRDC_PDAC_W0_1_19_D2ACP_MASK)

#define XRDC_PDAC_W0_1_19_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_1_19_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_1_19_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_19_D3ACP_SHIFT)) & XRDC_PDAC_W0_1_19_D3ACP_MASK)

#define XRDC_PDAC_W0_1_19_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_1_19_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_1_19_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_19_D4ACP_SHIFT)) & XRDC_PDAC_W0_1_19_D4ACP_MASK)

#define XRDC_PDAC_W0_1_19_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_1_19_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_1_19_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_19_D5ACP_SHIFT)) & XRDC_PDAC_W0_1_19_D5ACP_MASK)

#define XRDC_PDAC_W0_1_19_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_1_19_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_1_19_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_19_D6ACP_SHIFT)) & XRDC_PDAC_W0_1_19_D6ACP_MASK)

#define XRDC_PDAC_W0_1_19_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_1_19_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_1_19_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_19_D7ACP_SHIFT)) & XRDC_PDAC_W0_1_19_D7ACP_MASK)

#define XRDC_PDAC_W0_1_19_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_1_19_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_1_19_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_19_EALO_SHIFT)) & XRDC_PDAC_W0_1_19_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_1_19 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_1_19_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_1_19_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_1_19_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_19_EAL_SHIFT)) & XRDC_PDAC_W1_1_19_EAL_MASK)

#define XRDC_PDAC_W1_1_19_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_1_19_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_1_19_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_19_LK2_SHIFT)) & XRDC_PDAC_W1_1_19_LK2_MASK)

#define XRDC_PDAC_W1_1_19_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_1_19_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_1_19_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_19_VLD_SHIFT)) & XRDC_PDAC_W1_1_19_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_1_20 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_1_20_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_1_20_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_1_20_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_20_D0ACP_SHIFT)) & XRDC_PDAC_W0_1_20_D0ACP_MASK)

#define XRDC_PDAC_W0_1_20_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_1_20_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_1_20_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_20_D1ACP_SHIFT)) & XRDC_PDAC_W0_1_20_D1ACP_MASK)

#define XRDC_PDAC_W0_1_20_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_1_20_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_1_20_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_20_D2ACP_SHIFT)) & XRDC_PDAC_W0_1_20_D2ACP_MASK)

#define XRDC_PDAC_W0_1_20_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_1_20_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_1_20_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_20_D3ACP_SHIFT)) & XRDC_PDAC_W0_1_20_D3ACP_MASK)

#define XRDC_PDAC_W0_1_20_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_1_20_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_1_20_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_20_D4ACP_SHIFT)) & XRDC_PDAC_W0_1_20_D4ACP_MASK)

#define XRDC_PDAC_W0_1_20_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_1_20_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_1_20_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_20_D5ACP_SHIFT)) & XRDC_PDAC_W0_1_20_D5ACP_MASK)

#define XRDC_PDAC_W0_1_20_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_1_20_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_1_20_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_20_D6ACP_SHIFT)) & XRDC_PDAC_W0_1_20_D6ACP_MASK)

#define XRDC_PDAC_W0_1_20_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_1_20_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_1_20_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_20_D7ACP_SHIFT)) & XRDC_PDAC_W0_1_20_D7ACP_MASK)

#define XRDC_PDAC_W0_1_20_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_1_20_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_1_20_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_20_EALO_SHIFT)) & XRDC_PDAC_W0_1_20_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_1_20 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_1_20_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_1_20_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_1_20_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_20_EAL_SHIFT)) & XRDC_PDAC_W1_1_20_EAL_MASK)

#define XRDC_PDAC_W1_1_20_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_1_20_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_1_20_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_20_LK2_SHIFT)) & XRDC_PDAC_W1_1_20_LK2_MASK)

#define XRDC_PDAC_W1_1_20_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_1_20_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_1_20_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_20_VLD_SHIFT)) & XRDC_PDAC_W1_1_20_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_1_21 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_1_21_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_1_21_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_1_21_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_21_D0ACP_SHIFT)) & XRDC_PDAC_W0_1_21_D0ACP_MASK)

#define XRDC_PDAC_W0_1_21_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_1_21_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_1_21_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_21_D1ACP_SHIFT)) & XRDC_PDAC_W0_1_21_D1ACP_MASK)

#define XRDC_PDAC_W0_1_21_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_1_21_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_1_21_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_21_D2ACP_SHIFT)) & XRDC_PDAC_W0_1_21_D2ACP_MASK)

#define XRDC_PDAC_W0_1_21_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_1_21_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_1_21_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_21_D3ACP_SHIFT)) & XRDC_PDAC_W0_1_21_D3ACP_MASK)

#define XRDC_PDAC_W0_1_21_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_1_21_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_1_21_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_21_D4ACP_SHIFT)) & XRDC_PDAC_W0_1_21_D4ACP_MASK)

#define XRDC_PDAC_W0_1_21_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_1_21_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_1_21_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_21_D5ACP_SHIFT)) & XRDC_PDAC_W0_1_21_D5ACP_MASK)

#define XRDC_PDAC_W0_1_21_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_1_21_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_1_21_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_21_D6ACP_SHIFT)) & XRDC_PDAC_W0_1_21_D6ACP_MASK)

#define XRDC_PDAC_W0_1_21_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_1_21_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_1_21_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_21_D7ACP_SHIFT)) & XRDC_PDAC_W0_1_21_D7ACP_MASK)

#define XRDC_PDAC_W0_1_21_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_1_21_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_1_21_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_21_EALO_SHIFT)) & XRDC_PDAC_W0_1_21_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_1_21 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_1_21_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_1_21_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_1_21_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_21_EAL_SHIFT)) & XRDC_PDAC_W1_1_21_EAL_MASK)

#define XRDC_PDAC_W1_1_21_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_1_21_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_1_21_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_21_LK2_SHIFT)) & XRDC_PDAC_W1_1_21_LK2_MASK)

#define XRDC_PDAC_W1_1_21_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_1_21_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_1_21_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_21_VLD_SHIFT)) & XRDC_PDAC_W1_1_21_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_1_22 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_1_22_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_1_22_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_1_22_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_22_D0ACP_SHIFT)) & XRDC_PDAC_W0_1_22_D0ACP_MASK)

#define XRDC_PDAC_W0_1_22_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_1_22_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_1_22_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_22_D1ACP_SHIFT)) & XRDC_PDAC_W0_1_22_D1ACP_MASK)

#define XRDC_PDAC_W0_1_22_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_1_22_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_1_22_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_22_D2ACP_SHIFT)) & XRDC_PDAC_W0_1_22_D2ACP_MASK)

#define XRDC_PDAC_W0_1_22_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_1_22_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_1_22_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_22_D3ACP_SHIFT)) & XRDC_PDAC_W0_1_22_D3ACP_MASK)

#define XRDC_PDAC_W0_1_22_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_1_22_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_1_22_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_22_D4ACP_SHIFT)) & XRDC_PDAC_W0_1_22_D4ACP_MASK)

#define XRDC_PDAC_W0_1_22_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_1_22_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_1_22_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_22_D5ACP_SHIFT)) & XRDC_PDAC_W0_1_22_D5ACP_MASK)

#define XRDC_PDAC_W0_1_22_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_1_22_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_1_22_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_22_D6ACP_SHIFT)) & XRDC_PDAC_W0_1_22_D6ACP_MASK)

#define XRDC_PDAC_W0_1_22_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_1_22_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_1_22_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_22_D7ACP_SHIFT)) & XRDC_PDAC_W0_1_22_D7ACP_MASK)

#define XRDC_PDAC_W0_1_22_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_1_22_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_1_22_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_1_22_EALO_SHIFT)) & XRDC_PDAC_W0_1_22_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_1_22 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_1_22_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_1_22_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_1_22_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_22_EAL_SHIFT)) & XRDC_PDAC_W1_1_22_EAL_MASK)

#define XRDC_PDAC_W1_1_22_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_1_22_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_1_22_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_22_LK2_SHIFT)) & XRDC_PDAC_W1_1_22_LK2_MASK)

#define XRDC_PDAC_W1_1_22_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_1_22_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_1_22_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_1_22_VLD_SHIFT)) & XRDC_PDAC_W1_1_22_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_0 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_0_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_2_0_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_0_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_0_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_0_D0ACP_MASK)

#define XRDC_PDAC_W0_2_0_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_2_0_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_0_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_0_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_0_D1ACP_MASK)

#define XRDC_PDAC_W0_2_0_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_2_0_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_0_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_0_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_0_D2ACP_MASK)

#define XRDC_PDAC_W0_2_0_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_2_0_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_0_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_0_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_0_D3ACP_MASK)

#define XRDC_PDAC_W0_2_0_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_2_0_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_0_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_0_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_0_D4ACP_MASK)

#define XRDC_PDAC_W0_2_0_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_2_0_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_0_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_0_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_0_D5ACP_MASK)

#define XRDC_PDAC_W0_2_0_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_2_0_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_0_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_0_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_0_D6ACP_MASK)

#define XRDC_PDAC_W0_2_0_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_2_0_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_0_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_0_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_0_D7ACP_MASK)

#define XRDC_PDAC_W0_2_0_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_2_0_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_0_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_0_EALO_SHIFT)) & XRDC_PDAC_W0_2_0_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_0 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_0_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_2_0_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_0_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_0_EAL_SHIFT)) & XRDC_PDAC_W1_2_0_EAL_MASK)

#define XRDC_PDAC_W1_2_0_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_2_0_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_0_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_0_LK2_SHIFT)) & XRDC_PDAC_W1_2_0_LK2_MASK)

#define XRDC_PDAC_W1_2_0_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_2_0_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_0_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_0_VLD_SHIFT)) & XRDC_PDAC_W1_2_0_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_1 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_1_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_2_1_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_1_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_1_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_1_D0ACP_MASK)

#define XRDC_PDAC_W0_2_1_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_2_1_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_1_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_1_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_1_D1ACP_MASK)

#define XRDC_PDAC_W0_2_1_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_2_1_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_1_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_1_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_1_D2ACP_MASK)

#define XRDC_PDAC_W0_2_1_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_2_1_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_1_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_1_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_1_D3ACP_MASK)

#define XRDC_PDAC_W0_2_1_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_2_1_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_1_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_1_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_1_D4ACP_MASK)

#define XRDC_PDAC_W0_2_1_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_2_1_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_1_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_1_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_1_D5ACP_MASK)

#define XRDC_PDAC_W0_2_1_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_2_1_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_1_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_1_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_1_D6ACP_MASK)

#define XRDC_PDAC_W0_2_1_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_2_1_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_1_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_1_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_1_D7ACP_MASK)

#define XRDC_PDAC_W0_2_1_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_2_1_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_1_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_1_EALO_SHIFT)) & XRDC_PDAC_W0_2_1_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_1 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_1_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_2_1_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_1_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_1_EAL_SHIFT)) & XRDC_PDAC_W1_2_1_EAL_MASK)

#define XRDC_PDAC_W1_2_1_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_2_1_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_1_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_1_LK2_SHIFT)) & XRDC_PDAC_W1_2_1_LK2_MASK)

#define XRDC_PDAC_W1_2_1_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_2_1_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_1_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_1_VLD_SHIFT)) & XRDC_PDAC_W1_2_1_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_2 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_2_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_2_2_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_2_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_2_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_2_D0ACP_MASK)

#define XRDC_PDAC_W0_2_2_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_2_2_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_2_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_2_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_2_D1ACP_MASK)

#define XRDC_PDAC_W0_2_2_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_2_2_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_2_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_2_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_2_D2ACP_MASK)

#define XRDC_PDAC_W0_2_2_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_2_2_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_2_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_2_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_2_D3ACP_MASK)

#define XRDC_PDAC_W0_2_2_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_2_2_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_2_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_2_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_2_D4ACP_MASK)

#define XRDC_PDAC_W0_2_2_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_2_2_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_2_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_2_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_2_D5ACP_MASK)

#define XRDC_PDAC_W0_2_2_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_2_2_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_2_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_2_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_2_D6ACP_MASK)

#define XRDC_PDAC_W0_2_2_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_2_2_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_2_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_2_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_2_D7ACP_MASK)

#define XRDC_PDAC_W0_2_2_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_2_2_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_2_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_2_EALO_SHIFT)) & XRDC_PDAC_W0_2_2_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_2 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_2_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_2_2_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_2_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_2_EAL_SHIFT)) & XRDC_PDAC_W1_2_2_EAL_MASK)

#define XRDC_PDAC_W1_2_2_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_2_2_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_2_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_2_LK2_SHIFT)) & XRDC_PDAC_W1_2_2_LK2_MASK)

#define XRDC_PDAC_W1_2_2_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_2_2_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_2_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_2_VLD_SHIFT)) & XRDC_PDAC_W1_2_2_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_3 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_3_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_2_3_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_3_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_3_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_3_D0ACP_MASK)

#define XRDC_PDAC_W0_2_3_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_2_3_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_3_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_3_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_3_D1ACP_MASK)

#define XRDC_PDAC_W0_2_3_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_2_3_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_3_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_3_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_3_D2ACP_MASK)

#define XRDC_PDAC_W0_2_3_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_2_3_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_3_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_3_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_3_D3ACP_MASK)

#define XRDC_PDAC_W0_2_3_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_2_3_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_3_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_3_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_3_D4ACP_MASK)

#define XRDC_PDAC_W0_2_3_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_2_3_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_3_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_3_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_3_D5ACP_MASK)

#define XRDC_PDAC_W0_2_3_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_2_3_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_3_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_3_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_3_D6ACP_MASK)

#define XRDC_PDAC_W0_2_3_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_2_3_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_3_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_3_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_3_D7ACP_MASK)

#define XRDC_PDAC_W0_2_3_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_2_3_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_3_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_3_EALO_SHIFT)) & XRDC_PDAC_W0_2_3_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_3 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_3_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_2_3_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_3_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_3_EAL_SHIFT)) & XRDC_PDAC_W1_2_3_EAL_MASK)

#define XRDC_PDAC_W1_2_3_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_2_3_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_3_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_3_LK2_SHIFT)) & XRDC_PDAC_W1_2_3_LK2_MASK)

#define XRDC_PDAC_W1_2_3_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_2_3_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_3_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_3_VLD_SHIFT)) & XRDC_PDAC_W1_2_3_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_4 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_4_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_2_4_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_4_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_4_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_4_D0ACP_MASK)

#define XRDC_PDAC_W0_2_4_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_2_4_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_4_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_4_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_4_D1ACP_MASK)

#define XRDC_PDAC_W0_2_4_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_2_4_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_4_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_4_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_4_D2ACP_MASK)

#define XRDC_PDAC_W0_2_4_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_2_4_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_4_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_4_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_4_D3ACP_MASK)

#define XRDC_PDAC_W0_2_4_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_2_4_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_4_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_4_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_4_D4ACP_MASK)

#define XRDC_PDAC_W0_2_4_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_2_4_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_4_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_4_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_4_D5ACP_MASK)

#define XRDC_PDAC_W0_2_4_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_2_4_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_4_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_4_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_4_D6ACP_MASK)

#define XRDC_PDAC_W0_2_4_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_2_4_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_4_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_4_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_4_D7ACP_MASK)

#define XRDC_PDAC_W0_2_4_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_2_4_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_4_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_4_EALO_SHIFT)) & XRDC_PDAC_W0_2_4_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_4 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_4_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_2_4_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_4_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_4_EAL_SHIFT)) & XRDC_PDAC_W1_2_4_EAL_MASK)

#define XRDC_PDAC_W1_2_4_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_2_4_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_4_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_4_LK2_SHIFT)) & XRDC_PDAC_W1_2_4_LK2_MASK)

#define XRDC_PDAC_W1_2_4_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_2_4_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_4_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_4_VLD_SHIFT)) & XRDC_PDAC_W1_2_4_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_5 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_5_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_2_5_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_5_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_5_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_5_D0ACP_MASK)

#define XRDC_PDAC_W0_2_5_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_2_5_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_5_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_5_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_5_D1ACP_MASK)

#define XRDC_PDAC_W0_2_5_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_2_5_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_5_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_5_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_5_D2ACP_MASK)

#define XRDC_PDAC_W0_2_5_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_2_5_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_5_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_5_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_5_D3ACP_MASK)

#define XRDC_PDAC_W0_2_5_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_2_5_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_5_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_5_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_5_D4ACP_MASK)

#define XRDC_PDAC_W0_2_5_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_2_5_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_5_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_5_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_5_D5ACP_MASK)

#define XRDC_PDAC_W0_2_5_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_2_5_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_5_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_5_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_5_D6ACP_MASK)

#define XRDC_PDAC_W0_2_5_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_2_5_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_5_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_5_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_5_D7ACP_MASK)

#define XRDC_PDAC_W0_2_5_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_2_5_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_5_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_5_EALO_SHIFT)) & XRDC_PDAC_W0_2_5_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_5 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_5_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_2_5_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_5_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_5_EAL_SHIFT)) & XRDC_PDAC_W1_2_5_EAL_MASK)

#define XRDC_PDAC_W1_2_5_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_2_5_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_5_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_5_LK2_SHIFT)) & XRDC_PDAC_W1_2_5_LK2_MASK)

#define XRDC_PDAC_W1_2_5_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_2_5_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_5_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_5_VLD_SHIFT)) & XRDC_PDAC_W1_2_5_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_6 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_6_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_2_6_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_6_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_6_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_6_D0ACP_MASK)

#define XRDC_PDAC_W0_2_6_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_2_6_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_6_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_6_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_6_D1ACP_MASK)

#define XRDC_PDAC_W0_2_6_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_2_6_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_6_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_6_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_6_D2ACP_MASK)

#define XRDC_PDAC_W0_2_6_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_2_6_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_6_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_6_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_6_D3ACP_MASK)

#define XRDC_PDAC_W0_2_6_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_2_6_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_6_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_6_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_6_D4ACP_MASK)

#define XRDC_PDAC_W0_2_6_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_2_6_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_6_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_6_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_6_D5ACP_MASK)

#define XRDC_PDAC_W0_2_6_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_2_6_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_6_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_6_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_6_D6ACP_MASK)

#define XRDC_PDAC_W0_2_6_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_2_6_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_6_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_6_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_6_D7ACP_MASK)

#define XRDC_PDAC_W0_2_6_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_2_6_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_6_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_6_EALO_SHIFT)) & XRDC_PDAC_W0_2_6_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_6 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_6_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_2_6_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_6_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_6_EAL_SHIFT)) & XRDC_PDAC_W1_2_6_EAL_MASK)

#define XRDC_PDAC_W1_2_6_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_2_6_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_6_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_6_LK2_SHIFT)) & XRDC_PDAC_W1_2_6_LK2_MASK)

#define XRDC_PDAC_W1_2_6_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_2_6_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_6_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_6_VLD_SHIFT)) & XRDC_PDAC_W1_2_6_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_7 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_7_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_2_7_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_7_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_7_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_7_D0ACP_MASK)

#define XRDC_PDAC_W0_2_7_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_2_7_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_7_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_7_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_7_D1ACP_MASK)

#define XRDC_PDAC_W0_2_7_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_2_7_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_7_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_7_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_7_D2ACP_MASK)

#define XRDC_PDAC_W0_2_7_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_2_7_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_7_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_7_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_7_D3ACP_MASK)

#define XRDC_PDAC_W0_2_7_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_2_7_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_7_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_7_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_7_D4ACP_MASK)

#define XRDC_PDAC_W0_2_7_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_2_7_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_7_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_7_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_7_D5ACP_MASK)

#define XRDC_PDAC_W0_2_7_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_2_7_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_7_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_7_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_7_D6ACP_MASK)

#define XRDC_PDAC_W0_2_7_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_2_7_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_7_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_7_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_7_D7ACP_MASK)

#define XRDC_PDAC_W0_2_7_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_2_7_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_7_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_7_EALO_SHIFT)) & XRDC_PDAC_W0_2_7_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_7 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_7_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_2_7_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_7_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_7_EAL_SHIFT)) & XRDC_PDAC_W1_2_7_EAL_MASK)

#define XRDC_PDAC_W1_2_7_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_2_7_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_7_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_7_LK2_SHIFT)) & XRDC_PDAC_W1_2_7_LK2_MASK)

#define XRDC_PDAC_W1_2_7_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_2_7_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_7_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_7_VLD_SHIFT)) & XRDC_PDAC_W1_2_7_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_8 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_8_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_2_8_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_8_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_8_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_8_D0ACP_MASK)

#define XRDC_PDAC_W0_2_8_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_2_8_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_8_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_8_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_8_D1ACP_MASK)

#define XRDC_PDAC_W0_2_8_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_2_8_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_8_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_8_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_8_D2ACP_MASK)

#define XRDC_PDAC_W0_2_8_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_2_8_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_8_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_8_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_8_D3ACP_MASK)

#define XRDC_PDAC_W0_2_8_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_2_8_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_8_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_8_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_8_D4ACP_MASK)

#define XRDC_PDAC_W0_2_8_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_2_8_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_8_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_8_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_8_D5ACP_MASK)

#define XRDC_PDAC_W0_2_8_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_2_8_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_8_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_8_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_8_D6ACP_MASK)

#define XRDC_PDAC_W0_2_8_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_2_8_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_8_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_8_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_8_D7ACP_MASK)

#define XRDC_PDAC_W0_2_8_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_2_8_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_8_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_8_EALO_SHIFT)) & XRDC_PDAC_W0_2_8_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_8 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_8_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_2_8_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_8_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_8_EAL_SHIFT)) & XRDC_PDAC_W1_2_8_EAL_MASK)

#define XRDC_PDAC_W1_2_8_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_2_8_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_8_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_8_LK2_SHIFT)) & XRDC_PDAC_W1_2_8_LK2_MASK)

#define XRDC_PDAC_W1_2_8_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_2_8_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_8_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_8_VLD_SHIFT)) & XRDC_PDAC_W1_2_8_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_9 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_9_D0ACP_MASK              (0x7U)
#define XRDC_PDAC_W0_2_9_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_9_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_9_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_9_D0ACP_MASK)

#define XRDC_PDAC_W0_2_9_D1ACP_MASK              (0x38U)
#define XRDC_PDAC_W0_2_9_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_9_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_9_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_9_D1ACP_MASK)

#define XRDC_PDAC_W0_2_9_D2ACP_MASK              (0x1C0U)
#define XRDC_PDAC_W0_2_9_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_9_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_9_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_9_D2ACP_MASK)

#define XRDC_PDAC_W0_2_9_D3ACP_MASK              (0xE00U)
#define XRDC_PDAC_W0_2_9_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_9_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_9_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_9_D3ACP_MASK)

#define XRDC_PDAC_W0_2_9_D4ACP_MASK              (0x7000U)
#define XRDC_PDAC_W0_2_9_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_9_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_9_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_9_D4ACP_MASK)

#define XRDC_PDAC_W0_2_9_D5ACP_MASK              (0x38000U)
#define XRDC_PDAC_W0_2_9_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_9_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_9_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_9_D5ACP_MASK)

#define XRDC_PDAC_W0_2_9_D6ACP_MASK              (0x1C0000U)
#define XRDC_PDAC_W0_2_9_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_9_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_9_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_9_D6ACP_MASK)

#define XRDC_PDAC_W0_2_9_D7ACP_MASK              (0xE00000U)
#define XRDC_PDAC_W0_2_9_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_9_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_9_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_9_D7ACP_MASK)

#define XRDC_PDAC_W0_2_9_EALO_MASK               (0xF000000U)
#define XRDC_PDAC_W0_2_9_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_9_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_9_EALO_SHIFT)) & XRDC_PDAC_W0_2_9_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_9 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_9_EAL_MASK                (0x3000000U)
#define XRDC_PDAC_W1_2_9_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_9_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_9_EAL_SHIFT)) & XRDC_PDAC_W1_2_9_EAL_MASK)

#define XRDC_PDAC_W1_2_9_LK2_MASK                (0x60000000U)
#define XRDC_PDAC_W1_2_9_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_9_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_9_LK2_SHIFT)) & XRDC_PDAC_W1_2_9_LK2_MASK)

#define XRDC_PDAC_W1_2_9_VLD_MASK                (0x80000000U)
#define XRDC_PDAC_W1_2_9_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_9_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_9_VLD_SHIFT)) & XRDC_PDAC_W1_2_9_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_10 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_10_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_10_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_10_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_10_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_10_D0ACP_MASK)

#define XRDC_PDAC_W0_2_10_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_10_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_10_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_10_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_10_D1ACP_MASK)

#define XRDC_PDAC_W0_2_10_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_10_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_10_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_10_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_10_D2ACP_MASK)

#define XRDC_PDAC_W0_2_10_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_10_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_10_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_10_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_10_D3ACP_MASK)

#define XRDC_PDAC_W0_2_10_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_10_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_10_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_10_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_10_D4ACP_MASK)

#define XRDC_PDAC_W0_2_10_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_10_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_10_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_10_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_10_D5ACP_MASK)

#define XRDC_PDAC_W0_2_10_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_10_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_10_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_10_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_10_D6ACP_MASK)

#define XRDC_PDAC_W0_2_10_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_10_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_10_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_10_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_10_D7ACP_MASK)

#define XRDC_PDAC_W0_2_10_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_10_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_10_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_10_EALO_SHIFT)) & XRDC_PDAC_W0_2_10_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_10 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_10_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_10_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_10_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_10_EAL_SHIFT)) & XRDC_PDAC_W1_2_10_EAL_MASK)

#define XRDC_PDAC_W1_2_10_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_10_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_10_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_10_LK2_SHIFT)) & XRDC_PDAC_W1_2_10_LK2_MASK)

#define XRDC_PDAC_W1_2_10_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_10_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_10_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_10_VLD_SHIFT)) & XRDC_PDAC_W1_2_10_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_11 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_11_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_11_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_11_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_11_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_11_D0ACP_MASK)

#define XRDC_PDAC_W0_2_11_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_11_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_11_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_11_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_11_D1ACP_MASK)

#define XRDC_PDAC_W0_2_11_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_11_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_11_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_11_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_11_D2ACP_MASK)

#define XRDC_PDAC_W0_2_11_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_11_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_11_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_11_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_11_D3ACP_MASK)

#define XRDC_PDAC_W0_2_11_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_11_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_11_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_11_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_11_D4ACP_MASK)

#define XRDC_PDAC_W0_2_11_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_11_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_11_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_11_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_11_D5ACP_MASK)

#define XRDC_PDAC_W0_2_11_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_11_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_11_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_11_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_11_D6ACP_MASK)

#define XRDC_PDAC_W0_2_11_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_11_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_11_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_11_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_11_D7ACP_MASK)

#define XRDC_PDAC_W0_2_11_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_11_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_11_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_11_EALO_SHIFT)) & XRDC_PDAC_W0_2_11_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_11 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_11_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_11_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_11_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_11_EAL_SHIFT)) & XRDC_PDAC_W1_2_11_EAL_MASK)

#define XRDC_PDAC_W1_2_11_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_11_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_11_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_11_LK2_SHIFT)) & XRDC_PDAC_W1_2_11_LK2_MASK)

#define XRDC_PDAC_W1_2_11_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_11_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_11_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_11_VLD_SHIFT)) & XRDC_PDAC_W1_2_11_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_12 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_12_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_12_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_12_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_12_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_12_D0ACP_MASK)

#define XRDC_PDAC_W0_2_12_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_12_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_12_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_12_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_12_D1ACP_MASK)

#define XRDC_PDAC_W0_2_12_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_12_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_12_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_12_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_12_D2ACP_MASK)

#define XRDC_PDAC_W0_2_12_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_12_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_12_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_12_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_12_D3ACP_MASK)

#define XRDC_PDAC_W0_2_12_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_12_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_12_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_12_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_12_D4ACP_MASK)

#define XRDC_PDAC_W0_2_12_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_12_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_12_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_12_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_12_D5ACP_MASK)

#define XRDC_PDAC_W0_2_12_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_12_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_12_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_12_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_12_D6ACP_MASK)

#define XRDC_PDAC_W0_2_12_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_12_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_12_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_12_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_12_D7ACP_MASK)

#define XRDC_PDAC_W0_2_12_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_12_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_12_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_12_EALO_SHIFT)) & XRDC_PDAC_W0_2_12_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_12 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_12_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_12_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_12_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_12_EAL_SHIFT)) & XRDC_PDAC_W1_2_12_EAL_MASK)

#define XRDC_PDAC_W1_2_12_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_12_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_12_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_12_LK2_SHIFT)) & XRDC_PDAC_W1_2_12_LK2_MASK)

#define XRDC_PDAC_W1_2_12_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_12_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_12_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_12_VLD_SHIFT)) & XRDC_PDAC_W1_2_12_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_13 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_13_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_13_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_13_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_13_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_13_D0ACP_MASK)

#define XRDC_PDAC_W0_2_13_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_13_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_13_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_13_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_13_D1ACP_MASK)

#define XRDC_PDAC_W0_2_13_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_13_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_13_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_13_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_13_D2ACP_MASK)

#define XRDC_PDAC_W0_2_13_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_13_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_13_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_13_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_13_D3ACP_MASK)

#define XRDC_PDAC_W0_2_13_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_13_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_13_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_13_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_13_D4ACP_MASK)

#define XRDC_PDAC_W0_2_13_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_13_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_13_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_13_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_13_D5ACP_MASK)

#define XRDC_PDAC_W0_2_13_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_13_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_13_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_13_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_13_D6ACP_MASK)

#define XRDC_PDAC_W0_2_13_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_13_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_13_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_13_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_13_D7ACP_MASK)

#define XRDC_PDAC_W0_2_13_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_13_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_13_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_13_EALO_SHIFT)) & XRDC_PDAC_W0_2_13_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_13 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_13_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_13_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_13_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_13_EAL_SHIFT)) & XRDC_PDAC_W1_2_13_EAL_MASK)

#define XRDC_PDAC_W1_2_13_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_13_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_13_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_13_LK2_SHIFT)) & XRDC_PDAC_W1_2_13_LK2_MASK)

#define XRDC_PDAC_W1_2_13_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_13_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_13_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_13_VLD_SHIFT)) & XRDC_PDAC_W1_2_13_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_14 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_14_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_14_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_14_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_14_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_14_D0ACP_MASK)

#define XRDC_PDAC_W0_2_14_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_14_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_14_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_14_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_14_D1ACP_MASK)

#define XRDC_PDAC_W0_2_14_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_14_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_14_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_14_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_14_D2ACP_MASK)

#define XRDC_PDAC_W0_2_14_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_14_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_14_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_14_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_14_D3ACP_MASK)

#define XRDC_PDAC_W0_2_14_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_14_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_14_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_14_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_14_D4ACP_MASK)

#define XRDC_PDAC_W0_2_14_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_14_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_14_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_14_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_14_D5ACP_MASK)

#define XRDC_PDAC_W0_2_14_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_14_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_14_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_14_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_14_D6ACP_MASK)

#define XRDC_PDAC_W0_2_14_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_14_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_14_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_14_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_14_D7ACP_MASK)

#define XRDC_PDAC_W0_2_14_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_14_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_14_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_14_EALO_SHIFT)) & XRDC_PDAC_W0_2_14_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_14 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_14_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_14_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_14_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_14_EAL_SHIFT)) & XRDC_PDAC_W1_2_14_EAL_MASK)

#define XRDC_PDAC_W1_2_14_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_14_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_14_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_14_LK2_SHIFT)) & XRDC_PDAC_W1_2_14_LK2_MASK)

#define XRDC_PDAC_W1_2_14_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_14_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_14_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_14_VLD_SHIFT)) & XRDC_PDAC_W1_2_14_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_15 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_15_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_15_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_15_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_15_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_15_D0ACP_MASK)

#define XRDC_PDAC_W0_2_15_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_15_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_15_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_15_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_15_D1ACP_MASK)

#define XRDC_PDAC_W0_2_15_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_15_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_15_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_15_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_15_D2ACP_MASK)

#define XRDC_PDAC_W0_2_15_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_15_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_15_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_15_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_15_D3ACP_MASK)

#define XRDC_PDAC_W0_2_15_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_15_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_15_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_15_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_15_D4ACP_MASK)

#define XRDC_PDAC_W0_2_15_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_15_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_15_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_15_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_15_D5ACP_MASK)

#define XRDC_PDAC_W0_2_15_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_15_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_15_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_15_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_15_D6ACP_MASK)

#define XRDC_PDAC_W0_2_15_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_15_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_15_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_15_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_15_D7ACP_MASK)

#define XRDC_PDAC_W0_2_15_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_15_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_15_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_15_EALO_SHIFT)) & XRDC_PDAC_W0_2_15_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_15 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_15_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_15_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_15_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_15_EAL_SHIFT)) & XRDC_PDAC_W1_2_15_EAL_MASK)

#define XRDC_PDAC_W1_2_15_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_15_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_15_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_15_LK2_SHIFT)) & XRDC_PDAC_W1_2_15_LK2_MASK)

#define XRDC_PDAC_W1_2_15_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_15_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_15_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_15_VLD_SHIFT)) & XRDC_PDAC_W1_2_15_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_16 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_16_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_16_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_16_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_16_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_16_D0ACP_MASK)

#define XRDC_PDAC_W0_2_16_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_16_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_16_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_16_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_16_D1ACP_MASK)

#define XRDC_PDAC_W0_2_16_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_16_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_16_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_16_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_16_D2ACP_MASK)

#define XRDC_PDAC_W0_2_16_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_16_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_16_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_16_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_16_D3ACP_MASK)

#define XRDC_PDAC_W0_2_16_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_16_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_16_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_16_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_16_D4ACP_MASK)

#define XRDC_PDAC_W0_2_16_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_16_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_16_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_16_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_16_D5ACP_MASK)

#define XRDC_PDAC_W0_2_16_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_16_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_16_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_16_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_16_D6ACP_MASK)

#define XRDC_PDAC_W0_2_16_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_16_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_16_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_16_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_16_D7ACP_MASK)

#define XRDC_PDAC_W0_2_16_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_16_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_16_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_16_EALO_SHIFT)) & XRDC_PDAC_W0_2_16_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_16 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_16_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_16_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_16_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_16_EAL_SHIFT)) & XRDC_PDAC_W1_2_16_EAL_MASK)

#define XRDC_PDAC_W1_2_16_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_16_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_16_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_16_LK2_SHIFT)) & XRDC_PDAC_W1_2_16_LK2_MASK)

#define XRDC_PDAC_W1_2_16_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_16_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_16_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_16_VLD_SHIFT)) & XRDC_PDAC_W1_2_16_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_17 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_17_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_17_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_17_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_17_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_17_D0ACP_MASK)

#define XRDC_PDAC_W0_2_17_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_17_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_17_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_17_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_17_D1ACP_MASK)

#define XRDC_PDAC_W0_2_17_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_17_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_17_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_17_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_17_D2ACP_MASK)

#define XRDC_PDAC_W0_2_17_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_17_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_17_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_17_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_17_D3ACP_MASK)

#define XRDC_PDAC_W0_2_17_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_17_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_17_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_17_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_17_D4ACP_MASK)

#define XRDC_PDAC_W0_2_17_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_17_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_17_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_17_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_17_D5ACP_MASK)

#define XRDC_PDAC_W0_2_17_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_17_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_17_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_17_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_17_D6ACP_MASK)

#define XRDC_PDAC_W0_2_17_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_17_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_17_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_17_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_17_D7ACP_MASK)

#define XRDC_PDAC_W0_2_17_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_17_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_17_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_17_EALO_SHIFT)) & XRDC_PDAC_W0_2_17_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_17 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_17_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_17_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_17_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_17_EAL_SHIFT)) & XRDC_PDAC_W1_2_17_EAL_MASK)

#define XRDC_PDAC_W1_2_17_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_17_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_17_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_17_LK2_SHIFT)) & XRDC_PDAC_W1_2_17_LK2_MASK)

#define XRDC_PDAC_W1_2_17_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_17_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_17_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_17_VLD_SHIFT)) & XRDC_PDAC_W1_2_17_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_18 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_18_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_18_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_18_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_18_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_18_D0ACP_MASK)

#define XRDC_PDAC_W0_2_18_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_18_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_18_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_18_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_18_D1ACP_MASK)

#define XRDC_PDAC_W0_2_18_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_18_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_18_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_18_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_18_D2ACP_MASK)

#define XRDC_PDAC_W0_2_18_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_18_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_18_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_18_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_18_D3ACP_MASK)

#define XRDC_PDAC_W0_2_18_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_18_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_18_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_18_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_18_D4ACP_MASK)

#define XRDC_PDAC_W0_2_18_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_18_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_18_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_18_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_18_D5ACP_MASK)

#define XRDC_PDAC_W0_2_18_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_18_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_18_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_18_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_18_D6ACP_MASK)

#define XRDC_PDAC_W0_2_18_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_18_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_18_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_18_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_18_D7ACP_MASK)

#define XRDC_PDAC_W0_2_18_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_18_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_18_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_18_EALO_SHIFT)) & XRDC_PDAC_W0_2_18_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_18 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_18_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_18_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_18_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_18_EAL_SHIFT)) & XRDC_PDAC_W1_2_18_EAL_MASK)

#define XRDC_PDAC_W1_2_18_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_18_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_18_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_18_LK2_SHIFT)) & XRDC_PDAC_W1_2_18_LK2_MASK)

#define XRDC_PDAC_W1_2_18_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_18_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_18_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_18_VLD_SHIFT)) & XRDC_PDAC_W1_2_18_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_19 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_19_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_19_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_19_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_19_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_19_D0ACP_MASK)

#define XRDC_PDAC_W0_2_19_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_19_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_19_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_19_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_19_D1ACP_MASK)

#define XRDC_PDAC_W0_2_19_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_19_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_19_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_19_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_19_D2ACP_MASK)

#define XRDC_PDAC_W0_2_19_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_19_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_19_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_19_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_19_D3ACP_MASK)

#define XRDC_PDAC_W0_2_19_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_19_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_19_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_19_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_19_D4ACP_MASK)

#define XRDC_PDAC_W0_2_19_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_19_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_19_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_19_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_19_D5ACP_MASK)

#define XRDC_PDAC_W0_2_19_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_19_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_19_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_19_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_19_D6ACP_MASK)

#define XRDC_PDAC_W0_2_19_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_19_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_19_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_19_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_19_D7ACP_MASK)

#define XRDC_PDAC_W0_2_19_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_19_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_19_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_19_EALO_SHIFT)) & XRDC_PDAC_W0_2_19_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_19 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_19_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_19_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_19_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_19_EAL_SHIFT)) & XRDC_PDAC_W1_2_19_EAL_MASK)

#define XRDC_PDAC_W1_2_19_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_19_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_19_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_19_LK2_SHIFT)) & XRDC_PDAC_W1_2_19_LK2_MASK)

#define XRDC_PDAC_W1_2_19_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_19_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_19_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_19_VLD_SHIFT)) & XRDC_PDAC_W1_2_19_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_20 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_20_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_20_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_20_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_20_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_20_D0ACP_MASK)

#define XRDC_PDAC_W0_2_20_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_20_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_20_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_20_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_20_D1ACP_MASK)

#define XRDC_PDAC_W0_2_20_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_20_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_20_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_20_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_20_D2ACP_MASK)

#define XRDC_PDAC_W0_2_20_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_20_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_20_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_20_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_20_D3ACP_MASK)

#define XRDC_PDAC_W0_2_20_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_20_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_20_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_20_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_20_D4ACP_MASK)

#define XRDC_PDAC_W0_2_20_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_20_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_20_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_20_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_20_D5ACP_MASK)

#define XRDC_PDAC_W0_2_20_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_20_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_20_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_20_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_20_D6ACP_MASK)

#define XRDC_PDAC_W0_2_20_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_20_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_20_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_20_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_20_D7ACP_MASK)

#define XRDC_PDAC_W0_2_20_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_20_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_20_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_20_EALO_SHIFT)) & XRDC_PDAC_W0_2_20_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_20 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_20_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_20_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_20_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_20_EAL_SHIFT)) & XRDC_PDAC_W1_2_20_EAL_MASK)

#define XRDC_PDAC_W1_2_20_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_20_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_20_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_20_LK2_SHIFT)) & XRDC_PDAC_W1_2_20_LK2_MASK)

#define XRDC_PDAC_W1_2_20_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_20_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_20_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_20_VLD_SHIFT)) & XRDC_PDAC_W1_2_20_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_21 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_21_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_21_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_21_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_21_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_21_D0ACP_MASK)

#define XRDC_PDAC_W0_2_21_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_21_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_21_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_21_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_21_D1ACP_MASK)

#define XRDC_PDAC_W0_2_21_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_21_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_21_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_21_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_21_D2ACP_MASK)

#define XRDC_PDAC_W0_2_21_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_21_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_21_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_21_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_21_D3ACP_MASK)

#define XRDC_PDAC_W0_2_21_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_21_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_21_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_21_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_21_D4ACP_MASK)

#define XRDC_PDAC_W0_2_21_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_21_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_21_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_21_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_21_D5ACP_MASK)

#define XRDC_PDAC_W0_2_21_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_21_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_21_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_21_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_21_D6ACP_MASK)

#define XRDC_PDAC_W0_2_21_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_21_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_21_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_21_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_21_D7ACP_MASK)

#define XRDC_PDAC_W0_2_21_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_21_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_21_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_21_EALO_SHIFT)) & XRDC_PDAC_W0_2_21_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_21 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_21_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_21_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_21_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_21_EAL_SHIFT)) & XRDC_PDAC_W1_2_21_EAL_MASK)

#define XRDC_PDAC_W1_2_21_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_21_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_21_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_21_LK2_SHIFT)) & XRDC_PDAC_W1_2_21_LK2_MASK)

#define XRDC_PDAC_W1_2_21_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_21_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_21_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_21_VLD_SHIFT)) & XRDC_PDAC_W1_2_21_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_22 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_22_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_22_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_22_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_22_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_22_D0ACP_MASK)

#define XRDC_PDAC_W0_2_22_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_22_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_22_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_22_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_22_D1ACP_MASK)

#define XRDC_PDAC_W0_2_22_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_22_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_22_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_22_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_22_D2ACP_MASK)

#define XRDC_PDAC_W0_2_22_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_22_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_22_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_22_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_22_D3ACP_MASK)

#define XRDC_PDAC_W0_2_22_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_22_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_22_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_22_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_22_D4ACP_MASK)

#define XRDC_PDAC_W0_2_22_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_22_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_22_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_22_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_22_D5ACP_MASK)

#define XRDC_PDAC_W0_2_22_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_22_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_22_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_22_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_22_D6ACP_MASK)

#define XRDC_PDAC_W0_2_22_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_22_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_22_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_22_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_22_D7ACP_MASK)

#define XRDC_PDAC_W0_2_22_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_22_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_22_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_22_EALO_SHIFT)) & XRDC_PDAC_W0_2_22_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_22 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_22_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_22_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_22_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_22_EAL_SHIFT)) & XRDC_PDAC_W1_2_22_EAL_MASK)

#define XRDC_PDAC_W1_2_22_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_22_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_22_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_22_LK2_SHIFT)) & XRDC_PDAC_W1_2_22_LK2_MASK)

#define XRDC_PDAC_W1_2_22_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_22_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_22_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_22_VLD_SHIFT)) & XRDC_PDAC_W1_2_22_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_23 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_23_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_23_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_23_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_23_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_23_D0ACP_MASK)

#define XRDC_PDAC_W0_2_23_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_23_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_23_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_23_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_23_D1ACP_MASK)

#define XRDC_PDAC_W0_2_23_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_23_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_23_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_23_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_23_D2ACP_MASK)

#define XRDC_PDAC_W0_2_23_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_23_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_23_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_23_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_23_D3ACP_MASK)

#define XRDC_PDAC_W0_2_23_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_23_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_23_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_23_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_23_D4ACP_MASK)

#define XRDC_PDAC_W0_2_23_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_23_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_23_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_23_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_23_D5ACP_MASK)

#define XRDC_PDAC_W0_2_23_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_23_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_23_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_23_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_23_D6ACP_MASK)

#define XRDC_PDAC_W0_2_23_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_23_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_23_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_23_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_23_D7ACP_MASK)

#define XRDC_PDAC_W0_2_23_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_23_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_23_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_23_EALO_SHIFT)) & XRDC_PDAC_W0_2_23_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_23 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_23_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_23_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_23_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_23_EAL_SHIFT)) & XRDC_PDAC_W1_2_23_EAL_MASK)

#define XRDC_PDAC_W1_2_23_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_23_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_23_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_23_LK2_SHIFT)) & XRDC_PDAC_W1_2_23_LK2_MASK)

#define XRDC_PDAC_W1_2_23_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_23_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_23_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_23_VLD_SHIFT)) & XRDC_PDAC_W1_2_23_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_24 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_24_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_24_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_24_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_24_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_24_D0ACP_MASK)

#define XRDC_PDAC_W0_2_24_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_24_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_24_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_24_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_24_D1ACP_MASK)

#define XRDC_PDAC_W0_2_24_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_24_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_24_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_24_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_24_D2ACP_MASK)

#define XRDC_PDAC_W0_2_24_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_24_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_24_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_24_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_24_D3ACP_MASK)

#define XRDC_PDAC_W0_2_24_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_24_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_24_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_24_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_24_D4ACP_MASK)

#define XRDC_PDAC_W0_2_24_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_24_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_24_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_24_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_24_D5ACP_MASK)

#define XRDC_PDAC_W0_2_24_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_24_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_24_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_24_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_24_D6ACP_MASK)

#define XRDC_PDAC_W0_2_24_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_24_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_24_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_24_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_24_D7ACP_MASK)

#define XRDC_PDAC_W0_2_24_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_24_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_24_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_24_EALO_SHIFT)) & XRDC_PDAC_W0_2_24_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_24 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_24_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_24_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_24_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_24_EAL_SHIFT)) & XRDC_PDAC_W1_2_24_EAL_MASK)

#define XRDC_PDAC_W1_2_24_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_24_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_24_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_24_LK2_SHIFT)) & XRDC_PDAC_W1_2_24_LK2_MASK)

#define XRDC_PDAC_W1_2_24_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_24_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_24_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_24_VLD_SHIFT)) & XRDC_PDAC_W1_2_24_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_25 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_25_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_25_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_25_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_25_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_25_D0ACP_MASK)

#define XRDC_PDAC_W0_2_25_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_25_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_25_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_25_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_25_D1ACP_MASK)

#define XRDC_PDAC_W0_2_25_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_25_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_25_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_25_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_25_D2ACP_MASK)

#define XRDC_PDAC_W0_2_25_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_25_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_25_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_25_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_25_D3ACP_MASK)

#define XRDC_PDAC_W0_2_25_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_25_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_25_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_25_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_25_D4ACP_MASK)

#define XRDC_PDAC_W0_2_25_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_25_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_25_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_25_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_25_D5ACP_MASK)

#define XRDC_PDAC_W0_2_25_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_25_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_25_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_25_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_25_D6ACP_MASK)

#define XRDC_PDAC_W0_2_25_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_25_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_25_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_25_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_25_D7ACP_MASK)

#define XRDC_PDAC_W0_2_25_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_25_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_25_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_25_EALO_SHIFT)) & XRDC_PDAC_W0_2_25_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_25 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_25_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_25_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_25_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_25_EAL_SHIFT)) & XRDC_PDAC_W1_2_25_EAL_MASK)

#define XRDC_PDAC_W1_2_25_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_25_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_25_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_25_LK2_SHIFT)) & XRDC_PDAC_W1_2_25_LK2_MASK)

#define XRDC_PDAC_W1_2_25_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_25_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_25_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_25_VLD_SHIFT)) & XRDC_PDAC_W1_2_25_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_26 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_26_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_26_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_26_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_26_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_26_D0ACP_MASK)

#define XRDC_PDAC_W0_2_26_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_26_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_26_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_26_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_26_D1ACP_MASK)

#define XRDC_PDAC_W0_2_26_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_26_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_26_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_26_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_26_D2ACP_MASK)

#define XRDC_PDAC_W0_2_26_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_26_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_26_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_26_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_26_D3ACP_MASK)

#define XRDC_PDAC_W0_2_26_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_26_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_26_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_26_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_26_D4ACP_MASK)

#define XRDC_PDAC_W0_2_26_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_26_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_26_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_26_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_26_D5ACP_MASK)

#define XRDC_PDAC_W0_2_26_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_26_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_26_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_26_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_26_D6ACP_MASK)

#define XRDC_PDAC_W0_2_26_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_26_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_26_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_26_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_26_D7ACP_MASK)

#define XRDC_PDAC_W0_2_26_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_26_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_26_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_26_EALO_SHIFT)) & XRDC_PDAC_W0_2_26_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_26 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_26_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_26_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_26_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_26_EAL_SHIFT)) & XRDC_PDAC_W1_2_26_EAL_MASK)

#define XRDC_PDAC_W1_2_26_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_26_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_26_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_26_LK2_SHIFT)) & XRDC_PDAC_W1_2_26_LK2_MASK)

#define XRDC_PDAC_W1_2_26_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_26_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_26_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_26_VLD_SHIFT)) & XRDC_PDAC_W1_2_26_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_27 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_27_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_27_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_27_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_27_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_27_D0ACP_MASK)

#define XRDC_PDAC_W0_2_27_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_27_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_27_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_27_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_27_D1ACP_MASK)

#define XRDC_PDAC_W0_2_27_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_27_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_27_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_27_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_27_D2ACP_MASK)

#define XRDC_PDAC_W0_2_27_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_27_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_27_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_27_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_27_D3ACP_MASK)

#define XRDC_PDAC_W0_2_27_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_27_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_27_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_27_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_27_D4ACP_MASK)

#define XRDC_PDAC_W0_2_27_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_27_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_27_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_27_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_27_D5ACP_MASK)

#define XRDC_PDAC_W0_2_27_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_27_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_27_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_27_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_27_D6ACP_MASK)

#define XRDC_PDAC_W0_2_27_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_27_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_27_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_27_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_27_D7ACP_MASK)

#define XRDC_PDAC_W0_2_27_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_27_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_27_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_27_EALO_SHIFT)) & XRDC_PDAC_W0_2_27_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_27 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_27_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_27_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_27_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_27_EAL_SHIFT)) & XRDC_PDAC_W1_2_27_EAL_MASK)

#define XRDC_PDAC_W1_2_27_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_27_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_27_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_27_LK2_SHIFT)) & XRDC_PDAC_W1_2_27_LK2_MASK)

#define XRDC_PDAC_W1_2_27_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_27_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_27_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_27_VLD_SHIFT)) & XRDC_PDAC_W1_2_27_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_28 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_28_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_28_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_28_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_28_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_28_D0ACP_MASK)

#define XRDC_PDAC_W0_2_28_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_28_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_28_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_28_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_28_D1ACP_MASK)

#define XRDC_PDAC_W0_2_28_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_28_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_28_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_28_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_28_D2ACP_MASK)

#define XRDC_PDAC_W0_2_28_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_28_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_28_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_28_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_28_D3ACP_MASK)

#define XRDC_PDAC_W0_2_28_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_28_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_28_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_28_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_28_D4ACP_MASK)

#define XRDC_PDAC_W0_2_28_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_28_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_28_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_28_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_28_D5ACP_MASK)

#define XRDC_PDAC_W0_2_28_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_28_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_28_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_28_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_28_D6ACP_MASK)

#define XRDC_PDAC_W0_2_28_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_28_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_28_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_28_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_28_D7ACP_MASK)

#define XRDC_PDAC_W0_2_28_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_28_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_28_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_28_EALO_SHIFT)) & XRDC_PDAC_W0_2_28_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_28 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_28_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_28_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_28_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_28_EAL_SHIFT)) & XRDC_PDAC_W1_2_28_EAL_MASK)

#define XRDC_PDAC_W1_2_28_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_28_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_28_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_28_LK2_SHIFT)) & XRDC_PDAC_W1_2_28_LK2_MASK)

#define XRDC_PDAC_W1_2_28_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_28_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_28_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_28_VLD_SHIFT)) & XRDC_PDAC_W1_2_28_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_29 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_29_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_29_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_29_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_29_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_29_D0ACP_MASK)

#define XRDC_PDAC_W0_2_29_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_29_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_29_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_29_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_29_D1ACP_MASK)

#define XRDC_PDAC_W0_2_29_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_29_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_29_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_29_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_29_D2ACP_MASK)

#define XRDC_PDAC_W0_2_29_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_29_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_29_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_29_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_29_D3ACP_MASK)

#define XRDC_PDAC_W0_2_29_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_29_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_29_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_29_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_29_D4ACP_MASK)

#define XRDC_PDAC_W0_2_29_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_29_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_29_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_29_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_29_D5ACP_MASK)

#define XRDC_PDAC_W0_2_29_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_29_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_29_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_29_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_29_D6ACP_MASK)

#define XRDC_PDAC_W0_2_29_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_29_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_29_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_29_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_29_D7ACP_MASK)

#define XRDC_PDAC_W0_2_29_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_29_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_29_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_29_EALO_SHIFT)) & XRDC_PDAC_W0_2_29_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_29 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_29_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_29_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_29_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_29_EAL_SHIFT)) & XRDC_PDAC_W1_2_29_EAL_MASK)

#define XRDC_PDAC_W1_2_29_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_29_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_29_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_29_LK2_SHIFT)) & XRDC_PDAC_W1_2_29_LK2_MASK)

#define XRDC_PDAC_W1_2_29_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_29_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_29_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_29_VLD_SHIFT)) & XRDC_PDAC_W1_2_29_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_30 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_30_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_30_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_30_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_30_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_30_D0ACP_MASK)

#define XRDC_PDAC_W0_2_30_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_30_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_30_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_30_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_30_D1ACP_MASK)

#define XRDC_PDAC_W0_2_30_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_30_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_30_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_30_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_30_D2ACP_MASK)

#define XRDC_PDAC_W0_2_30_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_30_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_30_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_30_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_30_D3ACP_MASK)

#define XRDC_PDAC_W0_2_30_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_30_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_30_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_30_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_30_D4ACP_MASK)

#define XRDC_PDAC_W0_2_30_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_30_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_30_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_30_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_30_D5ACP_MASK)

#define XRDC_PDAC_W0_2_30_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_30_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_30_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_30_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_30_D6ACP_MASK)

#define XRDC_PDAC_W0_2_30_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_30_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_30_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_30_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_30_D7ACP_MASK)

#define XRDC_PDAC_W0_2_30_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_30_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_30_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_30_EALO_SHIFT)) & XRDC_PDAC_W0_2_30_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_30 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_30_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_30_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_30_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_30_EAL_SHIFT)) & XRDC_PDAC_W1_2_30_EAL_MASK)

#define XRDC_PDAC_W1_2_30_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_30_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_30_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_30_LK2_SHIFT)) & XRDC_PDAC_W1_2_30_LK2_MASK)

#define XRDC_PDAC_W1_2_30_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_30_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_30_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_30_VLD_SHIFT)) & XRDC_PDAC_W1_2_30_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_31 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_31_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_31_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_31_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_31_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_31_D0ACP_MASK)

#define XRDC_PDAC_W0_2_31_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_31_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_31_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_31_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_31_D1ACP_MASK)

#define XRDC_PDAC_W0_2_31_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_31_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_31_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_31_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_31_D2ACP_MASK)

#define XRDC_PDAC_W0_2_31_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_31_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_31_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_31_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_31_D3ACP_MASK)

#define XRDC_PDAC_W0_2_31_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_31_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_31_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_31_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_31_D4ACP_MASK)

#define XRDC_PDAC_W0_2_31_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_31_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_31_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_31_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_31_D5ACP_MASK)

#define XRDC_PDAC_W0_2_31_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_31_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_31_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_31_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_31_D6ACP_MASK)

#define XRDC_PDAC_W0_2_31_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_31_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_31_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_31_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_31_D7ACP_MASK)

#define XRDC_PDAC_W0_2_31_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_31_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_31_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_31_EALO_SHIFT)) & XRDC_PDAC_W0_2_31_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_31 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_31_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_31_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_31_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_31_EAL_SHIFT)) & XRDC_PDAC_W1_2_31_EAL_MASK)

#define XRDC_PDAC_W1_2_31_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_31_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_31_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_31_LK2_SHIFT)) & XRDC_PDAC_W1_2_31_LK2_MASK)

#define XRDC_PDAC_W1_2_31_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_31_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_31_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_31_VLD_SHIFT)) & XRDC_PDAC_W1_2_31_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_32 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_32_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_32_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_32_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_32_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_32_D0ACP_MASK)

#define XRDC_PDAC_W0_2_32_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_32_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_32_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_32_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_32_D1ACP_MASK)

#define XRDC_PDAC_W0_2_32_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_32_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_32_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_32_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_32_D2ACP_MASK)

#define XRDC_PDAC_W0_2_32_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_32_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_32_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_32_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_32_D3ACP_MASK)

#define XRDC_PDAC_W0_2_32_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_32_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_32_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_32_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_32_D4ACP_MASK)

#define XRDC_PDAC_W0_2_32_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_32_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_32_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_32_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_32_D5ACP_MASK)

#define XRDC_PDAC_W0_2_32_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_32_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_32_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_32_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_32_D6ACP_MASK)

#define XRDC_PDAC_W0_2_32_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_32_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_32_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_32_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_32_D7ACP_MASK)

#define XRDC_PDAC_W0_2_32_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_32_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_32_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_32_EALO_SHIFT)) & XRDC_PDAC_W0_2_32_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_32 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_32_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_32_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_32_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_32_EAL_SHIFT)) & XRDC_PDAC_W1_2_32_EAL_MASK)

#define XRDC_PDAC_W1_2_32_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_32_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_32_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_32_LK2_SHIFT)) & XRDC_PDAC_W1_2_32_LK2_MASK)

#define XRDC_PDAC_W1_2_32_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_32_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_32_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_32_VLD_SHIFT)) & XRDC_PDAC_W1_2_32_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_33 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_33_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_33_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_33_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_33_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_33_D0ACP_MASK)

#define XRDC_PDAC_W0_2_33_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_33_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_33_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_33_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_33_D1ACP_MASK)

#define XRDC_PDAC_W0_2_33_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_33_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_33_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_33_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_33_D2ACP_MASK)

#define XRDC_PDAC_W0_2_33_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_33_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_33_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_33_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_33_D3ACP_MASK)

#define XRDC_PDAC_W0_2_33_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_33_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_33_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_33_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_33_D4ACP_MASK)

#define XRDC_PDAC_W0_2_33_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_33_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_33_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_33_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_33_D5ACP_MASK)

#define XRDC_PDAC_W0_2_33_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_33_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_33_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_33_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_33_D6ACP_MASK)

#define XRDC_PDAC_W0_2_33_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_33_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_33_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_33_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_33_D7ACP_MASK)

#define XRDC_PDAC_W0_2_33_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_33_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_33_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_33_EALO_SHIFT)) & XRDC_PDAC_W0_2_33_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_33 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_33_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_33_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_33_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_33_EAL_SHIFT)) & XRDC_PDAC_W1_2_33_EAL_MASK)

#define XRDC_PDAC_W1_2_33_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_33_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_33_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_33_LK2_SHIFT)) & XRDC_PDAC_W1_2_33_LK2_MASK)

#define XRDC_PDAC_W1_2_33_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_33_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_33_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_33_VLD_SHIFT)) & XRDC_PDAC_W1_2_33_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_34 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_34_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_34_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_34_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_34_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_34_D0ACP_MASK)

#define XRDC_PDAC_W0_2_34_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_34_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_34_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_34_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_34_D1ACP_MASK)

#define XRDC_PDAC_W0_2_34_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_34_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_34_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_34_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_34_D2ACP_MASK)

#define XRDC_PDAC_W0_2_34_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_34_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_34_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_34_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_34_D3ACP_MASK)

#define XRDC_PDAC_W0_2_34_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_34_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_34_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_34_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_34_D4ACP_MASK)

#define XRDC_PDAC_W0_2_34_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_34_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_34_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_34_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_34_D5ACP_MASK)

#define XRDC_PDAC_W0_2_34_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_34_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_34_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_34_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_34_D6ACP_MASK)

#define XRDC_PDAC_W0_2_34_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_34_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_34_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_34_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_34_D7ACP_MASK)

#define XRDC_PDAC_W0_2_34_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_34_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_34_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_34_EALO_SHIFT)) & XRDC_PDAC_W0_2_34_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_34 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_34_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_34_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_34_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_34_EAL_SHIFT)) & XRDC_PDAC_W1_2_34_EAL_MASK)

#define XRDC_PDAC_W1_2_34_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_34_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_34_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_34_LK2_SHIFT)) & XRDC_PDAC_W1_2_34_LK2_MASK)

#define XRDC_PDAC_W1_2_34_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_34_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_34_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_34_VLD_SHIFT)) & XRDC_PDAC_W1_2_34_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_35 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_35_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_35_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_35_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_35_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_35_D0ACP_MASK)

#define XRDC_PDAC_W0_2_35_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_35_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_35_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_35_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_35_D1ACP_MASK)

#define XRDC_PDAC_W0_2_35_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_35_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_35_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_35_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_35_D2ACP_MASK)

#define XRDC_PDAC_W0_2_35_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_35_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_35_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_35_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_35_D3ACP_MASK)

#define XRDC_PDAC_W0_2_35_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_35_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_35_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_35_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_35_D4ACP_MASK)

#define XRDC_PDAC_W0_2_35_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_35_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_35_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_35_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_35_D5ACP_MASK)

#define XRDC_PDAC_W0_2_35_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_35_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_35_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_35_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_35_D6ACP_MASK)

#define XRDC_PDAC_W0_2_35_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_35_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_35_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_35_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_35_D7ACP_MASK)

#define XRDC_PDAC_W0_2_35_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_35_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_35_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_35_EALO_SHIFT)) & XRDC_PDAC_W0_2_35_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_35 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_35_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_35_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_35_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_35_EAL_SHIFT)) & XRDC_PDAC_W1_2_35_EAL_MASK)

#define XRDC_PDAC_W1_2_35_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_35_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_35_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_35_LK2_SHIFT)) & XRDC_PDAC_W1_2_35_LK2_MASK)

#define XRDC_PDAC_W1_2_35_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_35_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_35_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_35_VLD_SHIFT)) & XRDC_PDAC_W1_2_35_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_36 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_36_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_36_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_36_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_36_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_36_D0ACP_MASK)

#define XRDC_PDAC_W0_2_36_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_36_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_36_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_36_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_36_D1ACP_MASK)

#define XRDC_PDAC_W0_2_36_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_36_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_36_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_36_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_36_D2ACP_MASK)

#define XRDC_PDAC_W0_2_36_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_36_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_36_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_36_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_36_D3ACP_MASK)

#define XRDC_PDAC_W0_2_36_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_36_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_36_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_36_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_36_D4ACP_MASK)

#define XRDC_PDAC_W0_2_36_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_36_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_36_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_36_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_36_D5ACP_MASK)

#define XRDC_PDAC_W0_2_36_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_36_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_36_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_36_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_36_D6ACP_MASK)

#define XRDC_PDAC_W0_2_36_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_36_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_36_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_36_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_36_D7ACP_MASK)

#define XRDC_PDAC_W0_2_36_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_36_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_36_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_36_EALO_SHIFT)) & XRDC_PDAC_W0_2_36_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_36 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_36_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_36_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_36_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_36_EAL_SHIFT)) & XRDC_PDAC_W1_2_36_EAL_MASK)

#define XRDC_PDAC_W1_2_36_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_36_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_36_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_36_LK2_SHIFT)) & XRDC_PDAC_W1_2_36_LK2_MASK)

#define XRDC_PDAC_W1_2_36_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_36_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_36_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_36_VLD_SHIFT)) & XRDC_PDAC_W1_2_36_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_37 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_37_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_37_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_37_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_37_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_37_D0ACP_MASK)

#define XRDC_PDAC_W0_2_37_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_37_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_37_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_37_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_37_D1ACP_MASK)

#define XRDC_PDAC_W0_2_37_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_37_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_37_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_37_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_37_D2ACP_MASK)

#define XRDC_PDAC_W0_2_37_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_37_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_37_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_37_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_37_D3ACP_MASK)

#define XRDC_PDAC_W0_2_37_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_37_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_37_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_37_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_37_D4ACP_MASK)

#define XRDC_PDAC_W0_2_37_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_37_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_37_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_37_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_37_D5ACP_MASK)

#define XRDC_PDAC_W0_2_37_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_37_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_37_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_37_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_37_D6ACP_MASK)

#define XRDC_PDAC_W0_2_37_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_37_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_37_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_37_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_37_D7ACP_MASK)

#define XRDC_PDAC_W0_2_37_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_37_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_37_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_37_EALO_SHIFT)) & XRDC_PDAC_W0_2_37_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_37 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_37_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_37_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_37_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_37_EAL_SHIFT)) & XRDC_PDAC_W1_2_37_EAL_MASK)

#define XRDC_PDAC_W1_2_37_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_37_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_37_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_37_LK2_SHIFT)) & XRDC_PDAC_W1_2_37_LK2_MASK)

#define XRDC_PDAC_W1_2_37_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_37_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_37_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_37_VLD_SHIFT)) & XRDC_PDAC_W1_2_37_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_38 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_38_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_38_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_38_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_38_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_38_D0ACP_MASK)

#define XRDC_PDAC_W0_2_38_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_38_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_38_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_38_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_38_D1ACP_MASK)

#define XRDC_PDAC_W0_2_38_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_38_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_38_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_38_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_38_D2ACP_MASK)

#define XRDC_PDAC_W0_2_38_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_38_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_38_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_38_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_38_D3ACP_MASK)

#define XRDC_PDAC_W0_2_38_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_38_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_38_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_38_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_38_D4ACP_MASK)

#define XRDC_PDAC_W0_2_38_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_38_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_38_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_38_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_38_D5ACP_MASK)

#define XRDC_PDAC_W0_2_38_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_38_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_38_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_38_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_38_D6ACP_MASK)

#define XRDC_PDAC_W0_2_38_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_38_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_38_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_38_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_38_D7ACP_MASK)

#define XRDC_PDAC_W0_2_38_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_38_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_38_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_38_EALO_SHIFT)) & XRDC_PDAC_W0_2_38_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_38 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_38_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_38_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_38_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_38_EAL_SHIFT)) & XRDC_PDAC_W1_2_38_EAL_MASK)

#define XRDC_PDAC_W1_2_38_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_38_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_38_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_38_LK2_SHIFT)) & XRDC_PDAC_W1_2_38_LK2_MASK)

#define XRDC_PDAC_W1_2_38_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_38_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_38_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_38_VLD_SHIFT)) & XRDC_PDAC_W1_2_38_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_39 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_39_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_39_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_39_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_39_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_39_D0ACP_MASK)

#define XRDC_PDAC_W0_2_39_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_39_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_39_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_39_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_39_D1ACP_MASK)

#define XRDC_PDAC_W0_2_39_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_39_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_39_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_39_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_39_D2ACP_MASK)

#define XRDC_PDAC_W0_2_39_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_39_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_39_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_39_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_39_D3ACP_MASK)

#define XRDC_PDAC_W0_2_39_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_39_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_39_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_39_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_39_D4ACP_MASK)

#define XRDC_PDAC_W0_2_39_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_39_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_39_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_39_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_39_D5ACP_MASK)

#define XRDC_PDAC_W0_2_39_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_39_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_39_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_39_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_39_D6ACP_MASK)

#define XRDC_PDAC_W0_2_39_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_39_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_39_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_39_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_39_D7ACP_MASK)

#define XRDC_PDAC_W0_2_39_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_39_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_39_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_39_EALO_SHIFT)) & XRDC_PDAC_W0_2_39_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_39 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_39_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_39_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_39_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_39_EAL_SHIFT)) & XRDC_PDAC_W1_2_39_EAL_MASK)

#define XRDC_PDAC_W1_2_39_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_39_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_39_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_39_LK2_SHIFT)) & XRDC_PDAC_W1_2_39_LK2_MASK)

#define XRDC_PDAC_W1_2_39_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_39_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_39_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_39_VLD_SHIFT)) & XRDC_PDAC_W1_2_39_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_40 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_40_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_40_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_40_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_40_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_40_D0ACP_MASK)

#define XRDC_PDAC_W0_2_40_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_40_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_40_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_40_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_40_D1ACP_MASK)

#define XRDC_PDAC_W0_2_40_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_40_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_40_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_40_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_40_D2ACP_MASK)

#define XRDC_PDAC_W0_2_40_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_40_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_40_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_40_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_40_D3ACP_MASK)

#define XRDC_PDAC_W0_2_40_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_40_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_40_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_40_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_40_D4ACP_MASK)

#define XRDC_PDAC_W0_2_40_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_40_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_40_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_40_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_40_D5ACP_MASK)

#define XRDC_PDAC_W0_2_40_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_40_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_40_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_40_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_40_D6ACP_MASK)

#define XRDC_PDAC_W0_2_40_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_40_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_40_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_40_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_40_D7ACP_MASK)

#define XRDC_PDAC_W0_2_40_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_40_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_40_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_40_EALO_SHIFT)) & XRDC_PDAC_W0_2_40_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_40 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_40_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_40_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_40_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_40_EAL_SHIFT)) & XRDC_PDAC_W1_2_40_EAL_MASK)

#define XRDC_PDAC_W1_2_40_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_40_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_40_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_40_LK2_SHIFT)) & XRDC_PDAC_W1_2_40_LK2_MASK)

#define XRDC_PDAC_W1_2_40_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_40_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_40_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_40_VLD_SHIFT)) & XRDC_PDAC_W1_2_40_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_41 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_41_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_41_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_41_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_41_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_41_D0ACP_MASK)

#define XRDC_PDAC_W0_2_41_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_41_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_41_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_41_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_41_D1ACP_MASK)

#define XRDC_PDAC_W0_2_41_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_41_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_41_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_41_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_41_D2ACP_MASK)

#define XRDC_PDAC_W0_2_41_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_41_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_41_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_41_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_41_D3ACP_MASK)

#define XRDC_PDAC_W0_2_41_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_41_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_41_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_41_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_41_D4ACP_MASK)

#define XRDC_PDAC_W0_2_41_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_41_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_41_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_41_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_41_D5ACP_MASK)

#define XRDC_PDAC_W0_2_41_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_41_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_41_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_41_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_41_D6ACP_MASK)

#define XRDC_PDAC_W0_2_41_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_41_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_41_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_41_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_41_D7ACP_MASK)

#define XRDC_PDAC_W0_2_41_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_41_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_41_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_41_EALO_SHIFT)) & XRDC_PDAC_W0_2_41_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_41 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_41_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_41_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_41_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_41_EAL_SHIFT)) & XRDC_PDAC_W1_2_41_EAL_MASK)

#define XRDC_PDAC_W1_2_41_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_41_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_41_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_41_LK2_SHIFT)) & XRDC_PDAC_W1_2_41_LK2_MASK)

#define XRDC_PDAC_W1_2_41_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_41_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_41_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_41_VLD_SHIFT)) & XRDC_PDAC_W1_2_41_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_42 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_42_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_42_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_42_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_42_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_42_D0ACP_MASK)

#define XRDC_PDAC_W0_2_42_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_42_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_42_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_42_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_42_D1ACP_MASK)

#define XRDC_PDAC_W0_2_42_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_42_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_42_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_42_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_42_D2ACP_MASK)

#define XRDC_PDAC_W0_2_42_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_42_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_42_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_42_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_42_D3ACP_MASK)

#define XRDC_PDAC_W0_2_42_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_42_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_42_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_42_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_42_D4ACP_MASK)

#define XRDC_PDAC_W0_2_42_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_42_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_42_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_42_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_42_D5ACP_MASK)

#define XRDC_PDAC_W0_2_42_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_42_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_42_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_42_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_42_D6ACP_MASK)

#define XRDC_PDAC_W0_2_42_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_42_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_42_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_42_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_42_D7ACP_MASK)

#define XRDC_PDAC_W0_2_42_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_42_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_42_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_42_EALO_SHIFT)) & XRDC_PDAC_W0_2_42_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_42 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_42_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_42_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_42_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_42_EAL_SHIFT)) & XRDC_PDAC_W1_2_42_EAL_MASK)

#define XRDC_PDAC_W1_2_42_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_42_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_42_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_42_LK2_SHIFT)) & XRDC_PDAC_W1_2_42_LK2_MASK)

#define XRDC_PDAC_W1_2_42_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_42_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_42_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_42_VLD_SHIFT)) & XRDC_PDAC_W1_2_42_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_43 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_43_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_43_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_43_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_43_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_43_D0ACP_MASK)

#define XRDC_PDAC_W0_2_43_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_43_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_43_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_43_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_43_D1ACP_MASK)

#define XRDC_PDAC_W0_2_43_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_43_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_43_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_43_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_43_D2ACP_MASK)

#define XRDC_PDAC_W0_2_43_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_43_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_43_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_43_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_43_D3ACP_MASK)

#define XRDC_PDAC_W0_2_43_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_43_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_43_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_43_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_43_D4ACP_MASK)

#define XRDC_PDAC_W0_2_43_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_43_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_43_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_43_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_43_D5ACP_MASK)

#define XRDC_PDAC_W0_2_43_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_43_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_43_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_43_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_43_D6ACP_MASK)

#define XRDC_PDAC_W0_2_43_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_43_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_43_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_43_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_43_D7ACP_MASK)

#define XRDC_PDAC_W0_2_43_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_43_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_43_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_43_EALO_SHIFT)) & XRDC_PDAC_W0_2_43_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_43 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_43_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_43_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_43_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_43_EAL_SHIFT)) & XRDC_PDAC_W1_2_43_EAL_MASK)

#define XRDC_PDAC_W1_2_43_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_43_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_43_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_43_LK2_SHIFT)) & XRDC_PDAC_W1_2_43_LK2_MASK)

#define XRDC_PDAC_W1_2_43_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_43_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_43_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_43_VLD_SHIFT)) & XRDC_PDAC_W1_2_43_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_44 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_44_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_44_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_44_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_44_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_44_D0ACP_MASK)

#define XRDC_PDAC_W0_2_44_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_44_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_44_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_44_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_44_D1ACP_MASK)

#define XRDC_PDAC_W0_2_44_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_44_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_44_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_44_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_44_D2ACP_MASK)

#define XRDC_PDAC_W0_2_44_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_44_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_44_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_44_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_44_D3ACP_MASK)

#define XRDC_PDAC_W0_2_44_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_44_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_44_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_44_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_44_D4ACP_MASK)

#define XRDC_PDAC_W0_2_44_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_44_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_44_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_44_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_44_D5ACP_MASK)

#define XRDC_PDAC_W0_2_44_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_44_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_44_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_44_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_44_D6ACP_MASK)

#define XRDC_PDAC_W0_2_44_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_44_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_44_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_44_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_44_D7ACP_MASK)

#define XRDC_PDAC_W0_2_44_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_44_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_44_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_44_EALO_SHIFT)) & XRDC_PDAC_W0_2_44_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_44 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_44_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_44_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_44_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_44_EAL_SHIFT)) & XRDC_PDAC_W1_2_44_EAL_MASK)

#define XRDC_PDAC_W1_2_44_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_44_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_44_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_44_LK2_SHIFT)) & XRDC_PDAC_W1_2_44_LK2_MASK)

#define XRDC_PDAC_W1_2_44_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_44_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_44_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_44_VLD_SHIFT)) & XRDC_PDAC_W1_2_44_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_45 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_45_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_45_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_45_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_45_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_45_D0ACP_MASK)

#define XRDC_PDAC_W0_2_45_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_45_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_45_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_45_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_45_D1ACP_MASK)

#define XRDC_PDAC_W0_2_45_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_45_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_45_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_45_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_45_D2ACP_MASK)

#define XRDC_PDAC_W0_2_45_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_45_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_45_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_45_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_45_D3ACP_MASK)

#define XRDC_PDAC_W0_2_45_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_45_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_45_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_45_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_45_D4ACP_MASK)

#define XRDC_PDAC_W0_2_45_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_45_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_45_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_45_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_45_D5ACP_MASK)

#define XRDC_PDAC_W0_2_45_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_45_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_45_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_45_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_45_D6ACP_MASK)

#define XRDC_PDAC_W0_2_45_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_45_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_45_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_45_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_45_D7ACP_MASK)

#define XRDC_PDAC_W0_2_45_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_45_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_45_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_45_EALO_SHIFT)) & XRDC_PDAC_W0_2_45_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_45 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_45_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_45_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_45_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_45_EAL_SHIFT)) & XRDC_PDAC_W1_2_45_EAL_MASK)

#define XRDC_PDAC_W1_2_45_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_45_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_45_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_45_LK2_SHIFT)) & XRDC_PDAC_W1_2_45_LK2_MASK)

#define XRDC_PDAC_W1_2_45_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_45_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_45_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_45_VLD_SHIFT)) & XRDC_PDAC_W1_2_45_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_46 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_46_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_46_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_46_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_46_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_46_D0ACP_MASK)

#define XRDC_PDAC_W0_2_46_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_46_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_46_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_46_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_46_D1ACP_MASK)

#define XRDC_PDAC_W0_2_46_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_46_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_46_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_46_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_46_D2ACP_MASK)

#define XRDC_PDAC_W0_2_46_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_46_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_46_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_46_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_46_D3ACP_MASK)

#define XRDC_PDAC_W0_2_46_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_46_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_46_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_46_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_46_D4ACP_MASK)

#define XRDC_PDAC_W0_2_46_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_46_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_46_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_46_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_46_D5ACP_MASK)

#define XRDC_PDAC_W0_2_46_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_46_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_46_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_46_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_46_D6ACP_MASK)

#define XRDC_PDAC_W0_2_46_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_46_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_46_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_46_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_46_D7ACP_MASK)

#define XRDC_PDAC_W0_2_46_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_46_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_46_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_46_EALO_SHIFT)) & XRDC_PDAC_W0_2_46_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_46 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_46_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_46_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_46_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_46_EAL_SHIFT)) & XRDC_PDAC_W1_2_46_EAL_MASK)

#define XRDC_PDAC_W1_2_46_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_46_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_46_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_46_LK2_SHIFT)) & XRDC_PDAC_W1_2_46_LK2_MASK)

#define XRDC_PDAC_W1_2_46_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_46_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_46_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_46_VLD_SHIFT)) & XRDC_PDAC_W1_2_46_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_47 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_47_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_47_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_47_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_47_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_47_D0ACP_MASK)

#define XRDC_PDAC_W0_2_47_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_47_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_47_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_47_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_47_D1ACP_MASK)

#define XRDC_PDAC_W0_2_47_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_47_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_47_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_47_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_47_D2ACP_MASK)

#define XRDC_PDAC_W0_2_47_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_47_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_47_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_47_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_47_D3ACP_MASK)

#define XRDC_PDAC_W0_2_47_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_47_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_47_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_47_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_47_D4ACP_MASK)

#define XRDC_PDAC_W0_2_47_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_47_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_47_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_47_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_47_D5ACP_MASK)

#define XRDC_PDAC_W0_2_47_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_47_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_47_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_47_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_47_D6ACP_MASK)

#define XRDC_PDAC_W0_2_47_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_47_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_47_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_47_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_47_D7ACP_MASK)

#define XRDC_PDAC_W0_2_47_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_47_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_47_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_47_EALO_SHIFT)) & XRDC_PDAC_W0_2_47_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_47 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_47_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_47_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_47_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_47_EAL_SHIFT)) & XRDC_PDAC_W1_2_47_EAL_MASK)

#define XRDC_PDAC_W1_2_47_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_47_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_47_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_47_LK2_SHIFT)) & XRDC_PDAC_W1_2_47_LK2_MASK)

#define XRDC_PDAC_W1_2_47_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_47_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_47_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_47_VLD_SHIFT)) & XRDC_PDAC_W1_2_47_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_48 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_48_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_48_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_48_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_48_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_48_D0ACP_MASK)

#define XRDC_PDAC_W0_2_48_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_48_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_48_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_48_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_48_D1ACP_MASK)

#define XRDC_PDAC_W0_2_48_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_48_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_48_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_48_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_48_D2ACP_MASK)

#define XRDC_PDAC_W0_2_48_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_48_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_48_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_48_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_48_D3ACP_MASK)

#define XRDC_PDAC_W0_2_48_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_48_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_48_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_48_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_48_D4ACP_MASK)

#define XRDC_PDAC_W0_2_48_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_48_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_48_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_48_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_48_D5ACP_MASK)

#define XRDC_PDAC_W0_2_48_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_48_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_48_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_48_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_48_D6ACP_MASK)

#define XRDC_PDAC_W0_2_48_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_48_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_48_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_48_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_48_D7ACP_MASK)

#define XRDC_PDAC_W0_2_48_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_48_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_48_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_48_EALO_SHIFT)) & XRDC_PDAC_W0_2_48_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_48 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_48_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_48_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_48_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_48_EAL_SHIFT)) & XRDC_PDAC_W1_2_48_EAL_MASK)

#define XRDC_PDAC_W1_2_48_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_48_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_48_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_48_LK2_SHIFT)) & XRDC_PDAC_W1_2_48_LK2_MASK)

#define XRDC_PDAC_W1_2_48_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_48_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_48_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_48_VLD_SHIFT)) & XRDC_PDAC_W1_2_48_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_50 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_50_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_50_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_50_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_50_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_50_D0ACP_MASK)

#define XRDC_PDAC_W0_2_50_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_50_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_50_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_50_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_50_D1ACP_MASK)

#define XRDC_PDAC_W0_2_50_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_50_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_50_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_50_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_50_D2ACP_MASK)

#define XRDC_PDAC_W0_2_50_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_50_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_50_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_50_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_50_D3ACP_MASK)

#define XRDC_PDAC_W0_2_50_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_50_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_50_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_50_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_50_D4ACP_MASK)

#define XRDC_PDAC_W0_2_50_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_50_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_50_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_50_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_50_D5ACP_MASK)

#define XRDC_PDAC_W0_2_50_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_50_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_50_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_50_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_50_D6ACP_MASK)

#define XRDC_PDAC_W0_2_50_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_50_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_50_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_50_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_50_D7ACP_MASK)

#define XRDC_PDAC_W0_2_50_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_50_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_50_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_50_EALO_SHIFT)) & XRDC_PDAC_W0_2_50_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_50 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_50_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_50_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_50_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_50_EAL_SHIFT)) & XRDC_PDAC_W1_2_50_EAL_MASK)

#define XRDC_PDAC_W1_2_50_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_50_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_50_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_50_LK2_SHIFT)) & XRDC_PDAC_W1_2_50_LK2_MASK)

#define XRDC_PDAC_W1_2_50_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_50_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_50_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_50_VLD_SHIFT)) & XRDC_PDAC_W1_2_50_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_51 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_51_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_51_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_51_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_51_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_51_D0ACP_MASK)

#define XRDC_PDAC_W0_2_51_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_51_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_51_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_51_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_51_D1ACP_MASK)

#define XRDC_PDAC_W0_2_51_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_51_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_51_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_51_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_51_D2ACP_MASK)

#define XRDC_PDAC_W0_2_51_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_51_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_51_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_51_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_51_D3ACP_MASK)

#define XRDC_PDAC_W0_2_51_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_51_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_51_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_51_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_51_D4ACP_MASK)

#define XRDC_PDAC_W0_2_51_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_51_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_51_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_51_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_51_D5ACP_MASK)

#define XRDC_PDAC_W0_2_51_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_51_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_51_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_51_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_51_D6ACP_MASK)

#define XRDC_PDAC_W0_2_51_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_51_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_51_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_51_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_51_D7ACP_MASK)

#define XRDC_PDAC_W0_2_51_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_51_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_51_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_51_EALO_SHIFT)) & XRDC_PDAC_W0_2_51_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_51 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_51_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_51_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_51_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_51_EAL_SHIFT)) & XRDC_PDAC_W1_2_51_EAL_MASK)

#define XRDC_PDAC_W1_2_51_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_51_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_51_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_51_LK2_SHIFT)) & XRDC_PDAC_W1_2_51_LK2_MASK)

#define XRDC_PDAC_W1_2_51_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_51_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_51_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_51_VLD_SHIFT)) & XRDC_PDAC_W1_2_51_VLD_MASK)
/*! @} */

/*! @name PDAC_W0_2_52 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W0_2_52_D0ACP_MASK             (0x7U)
#define XRDC_PDAC_W0_2_52_D0ACP_SHIFT            (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_PDAC_W0_2_52_D0ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_52_D0ACP_SHIFT)) & XRDC_PDAC_W0_2_52_D0ACP_MASK)

#define XRDC_PDAC_W0_2_52_D1ACP_MASK             (0x38U)
#define XRDC_PDAC_W0_2_52_D1ACP_SHIFT            (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_PDAC_W0_2_52_D1ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_52_D1ACP_SHIFT)) & XRDC_PDAC_W0_2_52_D1ACP_MASK)

#define XRDC_PDAC_W0_2_52_D2ACP_MASK             (0x1C0U)
#define XRDC_PDAC_W0_2_52_D2ACP_SHIFT            (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_PDAC_W0_2_52_D2ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_52_D2ACP_SHIFT)) & XRDC_PDAC_W0_2_52_D2ACP_MASK)

#define XRDC_PDAC_W0_2_52_D3ACP_MASK             (0xE00U)
#define XRDC_PDAC_W0_2_52_D3ACP_SHIFT            (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_PDAC_W0_2_52_D3ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_52_D3ACP_SHIFT)) & XRDC_PDAC_W0_2_52_D3ACP_MASK)

#define XRDC_PDAC_W0_2_52_D4ACP_MASK             (0x7000U)
#define XRDC_PDAC_W0_2_52_D4ACP_SHIFT            (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_PDAC_W0_2_52_D4ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_52_D4ACP_SHIFT)) & XRDC_PDAC_W0_2_52_D4ACP_MASK)

#define XRDC_PDAC_W0_2_52_D5ACP_MASK             (0x38000U)
#define XRDC_PDAC_W0_2_52_D5ACP_SHIFT            (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_PDAC_W0_2_52_D5ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_52_D5ACP_SHIFT)) & XRDC_PDAC_W0_2_52_D5ACP_MASK)

#define XRDC_PDAC_W0_2_52_D6ACP_MASK             (0x1C0000U)
#define XRDC_PDAC_W0_2_52_D6ACP_SHIFT            (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_PDAC_W0_2_52_D6ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_52_D6ACP_SHIFT)) & XRDC_PDAC_W0_2_52_D6ACP_MASK)

#define XRDC_PDAC_W0_2_52_D7ACP_MASK             (0xE00000U)
#define XRDC_PDAC_W0_2_52_D7ACP_SHIFT            (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_PDAC_W0_2_52_D7ACP(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_52_D7ACP_SHIFT)) & XRDC_PDAC_W0_2_52_D7ACP_MASK)

#define XRDC_PDAC_W0_2_52_EALO_MASK              (0xF000000U)
#define XRDC_PDAC_W0_2_52_EALO_SHIFT             (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_PDAC_W0_2_52_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W0_2_52_EALO_SHIFT)) & XRDC_PDAC_W0_2_52_EALO_MASK)
/*! @} */

/*! @name PDAC_W1_2_52 - Peripheral Domain Access Control */
/*! @{ */

#define XRDC_PDAC_W1_2_52_EAL_MASK               (0x3000000U)
#define XRDC_PDAC_W1_2_52_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_PDAC_W1_2_52_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_52_EAL_SHIFT)) & XRDC_PDAC_W1_2_52_EAL_MASK)

#define XRDC_PDAC_W1_2_52_LK2_MASK               (0x60000000U)
#define XRDC_PDAC_W1_2_52_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire PDACs can be written.
 *  0b01..Entire PDACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other PDACs fields can be written.
 *  0b11..PDACs is locked (read-only) until the next reset.
 */
#define XRDC_PDAC_W1_2_52_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_52_LK2_SHIFT)) & XRDC_PDAC_W1_2_52_LK2_MASK)

#define XRDC_PDAC_W1_2_52_VLD_MASK               (0x80000000U)
#define XRDC_PDAC_W1_2_52_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The PDACs assignment is invalid.
 *  0b1..The PDACs assignment is valid.
 */
#define XRDC_PDAC_W1_2_52_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_PDAC_W1_2_52_VLD_SHIFT)) & XRDC_PDAC_W1_2_52_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_0_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_0_0_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_0_0_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_0_0_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_0_0_SRTADDR_SHIFT)) & XRDC_MRGD_W0_0_0_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_0_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_0_0_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_0_0_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_0_0_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_0_0_ENDADDR_SHIFT)) & XRDC_MRGD_W1_0_0_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_0_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_0_0_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_0_0_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_0_0_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_0_D0SEL_SHIFT)) & XRDC_MRGD_W2_0_0_D0SEL_MASK)

#define XRDC_MRGD_W2_0_0_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_0_0_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_0_0_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_0_D1SEL_SHIFT)) & XRDC_MRGD_W2_0_0_D1SEL_MASK)

#define XRDC_MRGD_W2_0_0_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_0_0_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_0_0_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_0_D2SEL_SHIFT)) & XRDC_MRGD_W2_0_0_D2SEL_MASK)

#define XRDC_MRGD_W2_0_0_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_0_0_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_0_0_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_0_D3SEL_SHIFT)) & XRDC_MRGD_W2_0_0_D3SEL_MASK)

#define XRDC_MRGD_W2_0_0_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_0_0_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_0_0_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_0_D4SEL_SHIFT)) & XRDC_MRGD_W2_0_0_D4SEL_MASK)

#define XRDC_MRGD_W2_0_0_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_0_0_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_0_0_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_0_D5SEL_SHIFT)) & XRDC_MRGD_W2_0_0_D5SEL_MASK)

#define XRDC_MRGD_W2_0_0_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_0_0_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_0_0_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_0_D6SEL_SHIFT)) & XRDC_MRGD_W2_0_0_D6SEL_MASK)

#define XRDC_MRGD_W2_0_0_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_0_0_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_0_0_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_0_D7SEL_SHIFT)) & XRDC_MRGD_W2_0_0_D7SEL_MASK)

#define XRDC_MRGD_W2_0_0_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_0_0_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_0_0_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_0_EALO_SHIFT)) & XRDC_MRGD_W2_0_0_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_0_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_0_0_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_0_0_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_0_0_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_0_0_EAL_SHIFT)) & XRDC_MRGD_W3_0_0_EAL_MASK)

#define XRDC_MRGD_W3_0_0_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_0_0_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_0_0_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_0_0_CR_SHIFT)) & XRDC_MRGD_W3_0_0_CR_MASK)
/*! @} */

/*! @name MRGD_W4_0_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_0_0_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_0_0_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_0_0_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_0_0_ACCSET1_SHIFT)) & XRDC_MRGD_W4_0_0_ACCSET1_MASK)

#define XRDC_MRGD_W4_0_0_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_0_0_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_0_0_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_0_0_LKAS1_SHIFT)) & XRDC_MRGD_W4_0_0_LKAS1_MASK)

#define XRDC_MRGD_W4_0_0_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_0_0_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_0_0_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_0_0_ACCSET2_SHIFT)) & XRDC_MRGD_W4_0_0_ACCSET2_MASK)

#define XRDC_MRGD_W4_0_0_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_0_0_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_0_0_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_0_0_LKAS2_SHIFT)) & XRDC_MRGD_W4_0_0_LKAS2_MASK)

#define XRDC_MRGD_W4_0_0_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_0_0_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_0_0_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_0_0_LK2_SHIFT)) & XRDC_MRGD_W4_0_0_LK2_MASK)

#define XRDC_MRGD_W4_0_0_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_0_0_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_0_0_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_0_0_VLD_SHIFT)) & XRDC_MRGD_W4_0_0_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_0_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_0_1_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_0_1_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_0_1_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_0_1_SRTADDR_SHIFT)) & XRDC_MRGD_W0_0_1_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_0_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_0_1_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_0_1_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_0_1_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_0_1_ENDADDR_SHIFT)) & XRDC_MRGD_W1_0_1_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_0_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_0_1_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_0_1_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_0_1_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_1_D0SEL_SHIFT)) & XRDC_MRGD_W2_0_1_D0SEL_MASK)

#define XRDC_MRGD_W2_0_1_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_0_1_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_0_1_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_1_D1SEL_SHIFT)) & XRDC_MRGD_W2_0_1_D1SEL_MASK)

#define XRDC_MRGD_W2_0_1_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_0_1_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_0_1_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_1_D2SEL_SHIFT)) & XRDC_MRGD_W2_0_1_D2SEL_MASK)

#define XRDC_MRGD_W2_0_1_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_0_1_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_0_1_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_1_D3SEL_SHIFT)) & XRDC_MRGD_W2_0_1_D3SEL_MASK)

#define XRDC_MRGD_W2_0_1_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_0_1_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_0_1_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_1_D4SEL_SHIFT)) & XRDC_MRGD_W2_0_1_D4SEL_MASK)

#define XRDC_MRGD_W2_0_1_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_0_1_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_0_1_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_1_D5SEL_SHIFT)) & XRDC_MRGD_W2_0_1_D5SEL_MASK)

#define XRDC_MRGD_W2_0_1_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_0_1_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_0_1_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_1_D6SEL_SHIFT)) & XRDC_MRGD_W2_0_1_D6SEL_MASK)

#define XRDC_MRGD_W2_0_1_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_0_1_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_0_1_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_1_D7SEL_SHIFT)) & XRDC_MRGD_W2_0_1_D7SEL_MASK)

#define XRDC_MRGD_W2_0_1_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_0_1_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_0_1_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_1_EALO_SHIFT)) & XRDC_MRGD_W2_0_1_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_0_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_0_1_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_0_1_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_0_1_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_0_1_EAL_SHIFT)) & XRDC_MRGD_W3_0_1_EAL_MASK)

#define XRDC_MRGD_W3_0_1_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_0_1_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_0_1_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_0_1_CR_SHIFT)) & XRDC_MRGD_W3_0_1_CR_MASK)
/*! @} */

/*! @name MRGD_W4_0_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_0_1_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_0_1_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_0_1_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_0_1_ACCSET1_SHIFT)) & XRDC_MRGD_W4_0_1_ACCSET1_MASK)

#define XRDC_MRGD_W4_0_1_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_0_1_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_0_1_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_0_1_LKAS1_SHIFT)) & XRDC_MRGD_W4_0_1_LKAS1_MASK)

#define XRDC_MRGD_W4_0_1_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_0_1_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_0_1_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_0_1_ACCSET2_SHIFT)) & XRDC_MRGD_W4_0_1_ACCSET2_MASK)

#define XRDC_MRGD_W4_0_1_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_0_1_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_0_1_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_0_1_LKAS2_SHIFT)) & XRDC_MRGD_W4_0_1_LKAS2_MASK)

#define XRDC_MRGD_W4_0_1_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_0_1_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_0_1_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_0_1_LK2_SHIFT)) & XRDC_MRGD_W4_0_1_LK2_MASK)

#define XRDC_MRGD_W4_0_1_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_0_1_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_0_1_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_0_1_VLD_SHIFT)) & XRDC_MRGD_W4_0_1_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_0_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_0_2_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_0_2_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_0_2_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_0_2_SRTADDR_SHIFT)) & XRDC_MRGD_W0_0_2_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_0_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_0_2_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_0_2_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_0_2_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_0_2_ENDADDR_SHIFT)) & XRDC_MRGD_W1_0_2_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_0_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_0_2_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_0_2_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_0_2_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_2_D0SEL_SHIFT)) & XRDC_MRGD_W2_0_2_D0SEL_MASK)

#define XRDC_MRGD_W2_0_2_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_0_2_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_0_2_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_2_D1SEL_SHIFT)) & XRDC_MRGD_W2_0_2_D1SEL_MASK)

#define XRDC_MRGD_W2_0_2_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_0_2_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_0_2_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_2_D2SEL_SHIFT)) & XRDC_MRGD_W2_0_2_D2SEL_MASK)

#define XRDC_MRGD_W2_0_2_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_0_2_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_0_2_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_2_D3SEL_SHIFT)) & XRDC_MRGD_W2_0_2_D3SEL_MASK)

#define XRDC_MRGD_W2_0_2_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_0_2_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_0_2_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_2_D4SEL_SHIFT)) & XRDC_MRGD_W2_0_2_D4SEL_MASK)

#define XRDC_MRGD_W2_0_2_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_0_2_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_0_2_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_2_D5SEL_SHIFT)) & XRDC_MRGD_W2_0_2_D5SEL_MASK)

#define XRDC_MRGD_W2_0_2_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_0_2_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_0_2_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_2_D6SEL_SHIFT)) & XRDC_MRGD_W2_0_2_D6SEL_MASK)

#define XRDC_MRGD_W2_0_2_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_0_2_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_0_2_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_2_D7SEL_SHIFT)) & XRDC_MRGD_W2_0_2_D7SEL_MASK)

#define XRDC_MRGD_W2_0_2_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_0_2_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_0_2_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_2_EALO_SHIFT)) & XRDC_MRGD_W2_0_2_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_0_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_0_2_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_0_2_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_0_2_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_0_2_EAL_SHIFT)) & XRDC_MRGD_W3_0_2_EAL_MASK)

#define XRDC_MRGD_W3_0_2_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_0_2_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_0_2_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_0_2_CR_SHIFT)) & XRDC_MRGD_W3_0_2_CR_MASK)
/*! @} */

/*! @name MRGD_W4_0_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_0_2_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_0_2_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_0_2_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_0_2_ACCSET1_SHIFT)) & XRDC_MRGD_W4_0_2_ACCSET1_MASK)

#define XRDC_MRGD_W4_0_2_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_0_2_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_0_2_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_0_2_LKAS1_SHIFT)) & XRDC_MRGD_W4_0_2_LKAS1_MASK)

#define XRDC_MRGD_W4_0_2_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_0_2_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_0_2_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_0_2_ACCSET2_SHIFT)) & XRDC_MRGD_W4_0_2_ACCSET2_MASK)

#define XRDC_MRGD_W4_0_2_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_0_2_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_0_2_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_0_2_LKAS2_SHIFT)) & XRDC_MRGD_W4_0_2_LKAS2_MASK)

#define XRDC_MRGD_W4_0_2_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_0_2_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_0_2_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_0_2_LK2_SHIFT)) & XRDC_MRGD_W4_0_2_LK2_MASK)

#define XRDC_MRGD_W4_0_2_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_0_2_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_0_2_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_0_2_VLD_SHIFT)) & XRDC_MRGD_W4_0_2_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_0_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_0_3_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_0_3_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_0_3_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_0_3_SRTADDR_SHIFT)) & XRDC_MRGD_W0_0_3_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_0_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_0_3_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_0_3_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_0_3_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_0_3_ENDADDR_SHIFT)) & XRDC_MRGD_W1_0_3_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_0_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_0_3_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_0_3_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_0_3_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_3_D0SEL_SHIFT)) & XRDC_MRGD_W2_0_3_D0SEL_MASK)

#define XRDC_MRGD_W2_0_3_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_0_3_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_0_3_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_3_D1SEL_SHIFT)) & XRDC_MRGD_W2_0_3_D1SEL_MASK)

#define XRDC_MRGD_W2_0_3_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_0_3_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_0_3_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_3_D2SEL_SHIFT)) & XRDC_MRGD_W2_0_3_D2SEL_MASK)

#define XRDC_MRGD_W2_0_3_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_0_3_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_0_3_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_3_D3SEL_SHIFT)) & XRDC_MRGD_W2_0_3_D3SEL_MASK)

#define XRDC_MRGD_W2_0_3_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_0_3_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_0_3_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_3_D4SEL_SHIFT)) & XRDC_MRGD_W2_0_3_D4SEL_MASK)

#define XRDC_MRGD_W2_0_3_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_0_3_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_0_3_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_3_D5SEL_SHIFT)) & XRDC_MRGD_W2_0_3_D5SEL_MASK)

#define XRDC_MRGD_W2_0_3_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_0_3_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_0_3_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_3_D6SEL_SHIFT)) & XRDC_MRGD_W2_0_3_D6SEL_MASK)

#define XRDC_MRGD_W2_0_3_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_0_3_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_0_3_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_3_D7SEL_SHIFT)) & XRDC_MRGD_W2_0_3_D7SEL_MASK)

#define XRDC_MRGD_W2_0_3_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_0_3_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_0_3_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_0_3_EALO_SHIFT)) & XRDC_MRGD_W2_0_3_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_0_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_0_3_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_0_3_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_0_3_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_0_3_EAL_SHIFT)) & XRDC_MRGD_W3_0_3_EAL_MASK)

#define XRDC_MRGD_W3_0_3_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_0_3_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_0_3_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_0_3_CR_SHIFT)) & XRDC_MRGD_W3_0_3_CR_MASK)
/*! @} */

/*! @name MRGD_W4_0_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_0_3_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_0_3_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_0_3_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_0_3_ACCSET1_SHIFT)) & XRDC_MRGD_W4_0_3_ACCSET1_MASK)

#define XRDC_MRGD_W4_0_3_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_0_3_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_0_3_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_0_3_LKAS1_SHIFT)) & XRDC_MRGD_W4_0_3_LKAS1_MASK)

#define XRDC_MRGD_W4_0_3_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_0_3_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_0_3_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_0_3_ACCSET2_SHIFT)) & XRDC_MRGD_W4_0_3_ACCSET2_MASK)

#define XRDC_MRGD_W4_0_3_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_0_3_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_0_3_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_0_3_LKAS2_SHIFT)) & XRDC_MRGD_W4_0_3_LKAS2_MASK)

#define XRDC_MRGD_W4_0_3_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_0_3_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_0_3_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_0_3_LK2_SHIFT)) & XRDC_MRGD_W4_0_3_LK2_MASK)

#define XRDC_MRGD_W4_0_3_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_0_3_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_0_3_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_0_3_VLD_SHIFT)) & XRDC_MRGD_W4_0_3_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_1_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_1_0_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_1_0_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_1_0_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_1_0_SRTADDR_SHIFT)) & XRDC_MRGD_W0_1_0_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_1_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_1_0_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_1_0_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_1_0_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_1_0_ENDADDR_SHIFT)) & XRDC_MRGD_W1_1_0_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_1_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_1_0_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_1_0_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_1_0_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_0_D0SEL_SHIFT)) & XRDC_MRGD_W2_1_0_D0SEL_MASK)

#define XRDC_MRGD_W2_1_0_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_1_0_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_1_0_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_0_D1SEL_SHIFT)) & XRDC_MRGD_W2_1_0_D1SEL_MASK)

#define XRDC_MRGD_W2_1_0_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_1_0_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_1_0_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_0_D2SEL_SHIFT)) & XRDC_MRGD_W2_1_0_D2SEL_MASK)

#define XRDC_MRGD_W2_1_0_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_1_0_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_1_0_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_0_D3SEL_SHIFT)) & XRDC_MRGD_W2_1_0_D3SEL_MASK)

#define XRDC_MRGD_W2_1_0_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_1_0_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_1_0_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_0_D4SEL_SHIFT)) & XRDC_MRGD_W2_1_0_D4SEL_MASK)

#define XRDC_MRGD_W2_1_0_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_1_0_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_1_0_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_0_D5SEL_SHIFT)) & XRDC_MRGD_W2_1_0_D5SEL_MASK)

#define XRDC_MRGD_W2_1_0_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_1_0_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_1_0_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_0_D6SEL_SHIFT)) & XRDC_MRGD_W2_1_0_D6SEL_MASK)

#define XRDC_MRGD_W2_1_0_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_1_0_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_1_0_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_0_D7SEL_SHIFT)) & XRDC_MRGD_W2_1_0_D7SEL_MASK)

#define XRDC_MRGD_W2_1_0_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_1_0_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_1_0_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_0_EALO_SHIFT)) & XRDC_MRGD_W2_1_0_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_1_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_1_0_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_1_0_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_1_0_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_1_0_EAL_SHIFT)) & XRDC_MRGD_W3_1_0_EAL_MASK)

#define XRDC_MRGD_W3_1_0_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_1_0_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_1_0_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_1_0_CR_SHIFT)) & XRDC_MRGD_W3_1_0_CR_MASK)
/*! @} */

/*! @name MRGD_W4_1_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_1_0_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_1_0_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_1_0_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_0_ACCSET1_SHIFT)) & XRDC_MRGD_W4_1_0_ACCSET1_MASK)

#define XRDC_MRGD_W4_1_0_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_1_0_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_1_0_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_0_LKAS1_SHIFT)) & XRDC_MRGD_W4_1_0_LKAS1_MASK)

#define XRDC_MRGD_W4_1_0_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_1_0_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_1_0_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_0_ACCSET2_SHIFT)) & XRDC_MRGD_W4_1_0_ACCSET2_MASK)

#define XRDC_MRGD_W4_1_0_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_1_0_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_1_0_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_0_LKAS2_SHIFT)) & XRDC_MRGD_W4_1_0_LKAS2_MASK)

#define XRDC_MRGD_W4_1_0_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_1_0_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_1_0_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_0_LK2_SHIFT)) & XRDC_MRGD_W4_1_0_LK2_MASK)

#define XRDC_MRGD_W4_1_0_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_1_0_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_1_0_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_0_VLD_SHIFT)) & XRDC_MRGD_W4_1_0_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_1_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_1_1_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_1_1_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_1_1_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_1_1_SRTADDR_SHIFT)) & XRDC_MRGD_W0_1_1_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_1_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_1_1_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_1_1_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_1_1_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_1_1_ENDADDR_SHIFT)) & XRDC_MRGD_W1_1_1_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_1_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_1_1_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_1_1_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_1_1_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_1_D0SEL_SHIFT)) & XRDC_MRGD_W2_1_1_D0SEL_MASK)

#define XRDC_MRGD_W2_1_1_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_1_1_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_1_1_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_1_D1SEL_SHIFT)) & XRDC_MRGD_W2_1_1_D1SEL_MASK)

#define XRDC_MRGD_W2_1_1_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_1_1_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_1_1_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_1_D2SEL_SHIFT)) & XRDC_MRGD_W2_1_1_D2SEL_MASK)

#define XRDC_MRGD_W2_1_1_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_1_1_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_1_1_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_1_D3SEL_SHIFT)) & XRDC_MRGD_W2_1_1_D3SEL_MASK)

#define XRDC_MRGD_W2_1_1_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_1_1_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_1_1_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_1_D4SEL_SHIFT)) & XRDC_MRGD_W2_1_1_D4SEL_MASK)

#define XRDC_MRGD_W2_1_1_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_1_1_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_1_1_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_1_D5SEL_SHIFT)) & XRDC_MRGD_W2_1_1_D5SEL_MASK)

#define XRDC_MRGD_W2_1_1_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_1_1_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_1_1_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_1_D6SEL_SHIFT)) & XRDC_MRGD_W2_1_1_D6SEL_MASK)

#define XRDC_MRGD_W2_1_1_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_1_1_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_1_1_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_1_D7SEL_SHIFT)) & XRDC_MRGD_W2_1_1_D7SEL_MASK)

#define XRDC_MRGD_W2_1_1_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_1_1_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_1_1_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_1_EALO_SHIFT)) & XRDC_MRGD_W2_1_1_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_1_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_1_1_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_1_1_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_1_1_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_1_1_EAL_SHIFT)) & XRDC_MRGD_W3_1_1_EAL_MASK)

#define XRDC_MRGD_W3_1_1_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_1_1_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_1_1_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_1_1_CR_SHIFT)) & XRDC_MRGD_W3_1_1_CR_MASK)
/*! @} */

/*! @name MRGD_W4_1_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_1_1_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_1_1_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_1_1_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_1_ACCSET1_SHIFT)) & XRDC_MRGD_W4_1_1_ACCSET1_MASK)

#define XRDC_MRGD_W4_1_1_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_1_1_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_1_1_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_1_LKAS1_SHIFT)) & XRDC_MRGD_W4_1_1_LKAS1_MASK)

#define XRDC_MRGD_W4_1_1_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_1_1_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_1_1_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_1_ACCSET2_SHIFT)) & XRDC_MRGD_W4_1_1_ACCSET2_MASK)

#define XRDC_MRGD_W4_1_1_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_1_1_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_1_1_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_1_LKAS2_SHIFT)) & XRDC_MRGD_W4_1_1_LKAS2_MASK)

#define XRDC_MRGD_W4_1_1_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_1_1_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_1_1_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_1_LK2_SHIFT)) & XRDC_MRGD_W4_1_1_LK2_MASK)

#define XRDC_MRGD_W4_1_1_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_1_1_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_1_1_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_1_VLD_SHIFT)) & XRDC_MRGD_W4_1_1_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_1_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_1_2_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_1_2_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_1_2_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_1_2_SRTADDR_SHIFT)) & XRDC_MRGD_W0_1_2_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_1_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_1_2_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_1_2_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_1_2_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_1_2_ENDADDR_SHIFT)) & XRDC_MRGD_W1_1_2_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_1_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_1_2_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_1_2_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_1_2_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_2_D0SEL_SHIFT)) & XRDC_MRGD_W2_1_2_D0SEL_MASK)

#define XRDC_MRGD_W2_1_2_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_1_2_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_1_2_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_2_D1SEL_SHIFT)) & XRDC_MRGD_W2_1_2_D1SEL_MASK)

#define XRDC_MRGD_W2_1_2_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_1_2_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_1_2_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_2_D2SEL_SHIFT)) & XRDC_MRGD_W2_1_2_D2SEL_MASK)

#define XRDC_MRGD_W2_1_2_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_1_2_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_1_2_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_2_D3SEL_SHIFT)) & XRDC_MRGD_W2_1_2_D3SEL_MASK)

#define XRDC_MRGD_W2_1_2_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_1_2_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_1_2_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_2_D4SEL_SHIFT)) & XRDC_MRGD_W2_1_2_D4SEL_MASK)

#define XRDC_MRGD_W2_1_2_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_1_2_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_1_2_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_2_D5SEL_SHIFT)) & XRDC_MRGD_W2_1_2_D5SEL_MASK)

#define XRDC_MRGD_W2_1_2_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_1_2_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_1_2_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_2_D6SEL_SHIFT)) & XRDC_MRGD_W2_1_2_D6SEL_MASK)

#define XRDC_MRGD_W2_1_2_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_1_2_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_1_2_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_2_D7SEL_SHIFT)) & XRDC_MRGD_W2_1_2_D7SEL_MASK)

#define XRDC_MRGD_W2_1_2_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_1_2_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_1_2_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_2_EALO_SHIFT)) & XRDC_MRGD_W2_1_2_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_1_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_1_2_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_1_2_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_1_2_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_1_2_EAL_SHIFT)) & XRDC_MRGD_W3_1_2_EAL_MASK)

#define XRDC_MRGD_W3_1_2_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_1_2_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_1_2_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_1_2_CR_SHIFT)) & XRDC_MRGD_W3_1_2_CR_MASK)
/*! @} */

/*! @name MRGD_W4_1_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_1_2_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_1_2_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_1_2_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_2_ACCSET1_SHIFT)) & XRDC_MRGD_W4_1_2_ACCSET1_MASK)

#define XRDC_MRGD_W4_1_2_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_1_2_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_1_2_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_2_LKAS1_SHIFT)) & XRDC_MRGD_W4_1_2_LKAS1_MASK)

#define XRDC_MRGD_W4_1_2_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_1_2_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_1_2_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_2_ACCSET2_SHIFT)) & XRDC_MRGD_W4_1_2_ACCSET2_MASK)

#define XRDC_MRGD_W4_1_2_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_1_2_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_1_2_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_2_LKAS2_SHIFT)) & XRDC_MRGD_W4_1_2_LKAS2_MASK)

#define XRDC_MRGD_W4_1_2_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_1_2_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_1_2_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_2_LK2_SHIFT)) & XRDC_MRGD_W4_1_2_LK2_MASK)

#define XRDC_MRGD_W4_1_2_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_1_2_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_1_2_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_2_VLD_SHIFT)) & XRDC_MRGD_W4_1_2_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_1_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_1_3_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_1_3_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_1_3_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_1_3_SRTADDR_SHIFT)) & XRDC_MRGD_W0_1_3_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_1_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_1_3_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_1_3_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_1_3_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_1_3_ENDADDR_SHIFT)) & XRDC_MRGD_W1_1_3_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_1_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_1_3_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_1_3_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_1_3_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_3_D0SEL_SHIFT)) & XRDC_MRGD_W2_1_3_D0SEL_MASK)

#define XRDC_MRGD_W2_1_3_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_1_3_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_1_3_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_3_D1SEL_SHIFT)) & XRDC_MRGD_W2_1_3_D1SEL_MASK)

#define XRDC_MRGD_W2_1_3_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_1_3_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_1_3_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_3_D2SEL_SHIFT)) & XRDC_MRGD_W2_1_3_D2SEL_MASK)

#define XRDC_MRGD_W2_1_3_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_1_3_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_1_3_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_3_D3SEL_SHIFT)) & XRDC_MRGD_W2_1_3_D3SEL_MASK)

#define XRDC_MRGD_W2_1_3_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_1_3_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_1_3_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_3_D4SEL_SHIFT)) & XRDC_MRGD_W2_1_3_D4SEL_MASK)

#define XRDC_MRGD_W2_1_3_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_1_3_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_1_3_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_3_D5SEL_SHIFT)) & XRDC_MRGD_W2_1_3_D5SEL_MASK)

#define XRDC_MRGD_W2_1_3_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_1_3_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_1_3_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_3_D6SEL_SHIFT)) & XRDC_MRGD_W2_1_3_D6SEL_MASK)

#define XRDC_MRGD_W2_1_3_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_1_3_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_1_3_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_3_D7SEL_SHIFT)) & XRDC_MRGD_W2_1_3_D7SEL_MASK)

#define XRDC_MRGD_W2_1_3_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_1_3_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_1_3_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_3_EALO_SHIFT)) & XRDC_MRGD_W2_1_3_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_1_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_1_3_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_1_3_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_1_3_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_1_3_EAL_SHIFT)) & XRDC_MRGD_W3_1_3_EAL_MASK)

#define XRDC_MRGD_W3_1_3_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_1_3_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_1_3_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_1_3_CR_SHIFT)) & XRDC_MRGD_W3_1_3_CR_MASK)
/*! @} */

/*! @name MRGD_W4_1_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_1_3_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_1_3_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_1_3_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_3_ACCSET1_SHIFT)) & XRDC_MRGD_W4_1_3_ACCSET1_MASK)

#define XRDC_MRGD_W4_1_3_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_1_3_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_1_3_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_3_LKAS1_SHIFT)) & XRDC_MRGD_W4_1_3_LKAS1_MASK)

#define XRDC_MRGD_W4_1_3_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_1_3_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_1_3_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_3_ACCSET2_SHIFT)) & XRDC_MRGD_W4_1_3_ACCSET2_MASK)

#define XRDC_MRGD_W4_1_3_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_1_3_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_1_3_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_3_LKAS2_SHIFT)) & XRDC_MRGD_W4_1_3_LKAS2_MASK)

#define XRDC_MRGD_W4_1_3_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_1_3_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_1_3_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_3_LK2_SHIFT)) & XRDC_MRGD_W4_1_3_LK2_MASK)

#define XRDC_MRGD_W4_1_3_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_1_3_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_1_3_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_3_VLD_SHIFT)) & XRDC_MRGD_W4_1_3_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_1_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_1_4_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_1_4_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_1_4_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_1_4_SRTADDR_SHIFT)) & XRDC_MRGD_W0_1_4_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_1_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_1_4_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_1_4_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_1_4_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_1_4_ENDADDR_SHIFT)) & XRDC_MRGD_W1_1_4_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_1_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_1_4_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_1_4_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_1_4_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_4_D0SEL_SHIFT)) & XRDC_MRGD_W2_1_4_D0SEL_MASK)

#define XRDC_MRGD_W2_1_4_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_1_4_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_1_4_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_4_D1SEL_SHIFT)) & XRDC_MRGD_W2_1_4_D1SEL_MASK)

#define XRDC_MRGD_W2_1_4_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_1_4_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_1_4_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_4_D2SEL_SHIFT)) & XRDC_MRGD_W2_1_4_D2SEL_MASK)

#define XRDC_MRGD_W2_1_4_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_1_4_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_1_4_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_4_D3SEL_SHIFT)) & XRDC_MRGD_W2_1_4_D3SEL_MASK)

#define XRDC_MRGD_W2_1_4_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_1_4_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_1_4_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_4_D4SEL_SHIFT)) & XRDC_MRGD_W2_1_4_D4SEL_MASK)

#define XRDC_MRGD_W2_1_4_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_1_4_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_1_4_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_4_D5SEL_SHIFT)) & XRDC_MRGD_W2_1_4_D5SEL_MASK)

#define XRDC_MRGD_W2_1_4_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_1_4_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_1_4_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_4_D6SEL_SHIFT)) & XRDC_MRGD_W2_1_4_D6SEL_MASK)

#define XRDC_MRGD_W2_1_4_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_1_4_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_1_4_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_4_D7SEL_SHIFT)) & XRDC_MRGD_W2_1_4_D7SEL_MASK)

#define XRDC_MRGD_W2_1_4_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_1_4_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_1_4_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_4_EALO_SHIFT)) & XRDC_MRGD_W2_1_4_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_1_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_1_4_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_1_4_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_1_4_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_1_4_EAL_SHIFT)) & XRDC_MRGD_W3_1_4_EAL_MASK)

#define XRDC_MRGD_W3_1_4_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_1_4_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_1_4_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_1_4_CR_SHIFT)) & XRDC_MRGD_W3_1_4_CR_MASK)
/*! @} */

/*! @name MRGD_W4_1_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_1_4_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_1_4_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_1_4_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_4_ACCSET1_SHIFT)) & XRDC_MRGD_W4_1_4_ACCSET1_MASK)

#define XRDC_MRGD_W4_1_4_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_1_4_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_1_4_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_4_LKAS1_SHIFT)) & XRDC_MRGD_W4_1_4_LKAS1_MASK)

#define XRDC_MRGD_W4_1_4_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_1_4_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_1_4_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_4_ACCSET2_SHIFT)) & XRDC_MRGD_W4_1_4_ACCSET2_MASK)

#define XRDC_MRGD_W4_1_4_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_1_4_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_1_4_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_4_LKAS2_SHIFT)) & XRDC_MRGD_W4_1_4_LKAS2_MASK)

#define XRDC_MRGD_W4_1_4_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_1_4_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_1_4_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_4_LK2_SHIFT)) & XRDC_MRGD_W4_1_4_LK2_MASK)

#define XRDC_MRGD_W4_1_4_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_1_4_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_1_4_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_4_VLD_SHIFT)) & XRDC_MRGD_W4_1_4_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_1_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_1_5_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_1_5_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_1_5_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_1_5_SRTADDR_SHIFT)) & XRDC_MRGD_W0_1_5_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_1_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_1_5_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_1_5_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_1_5_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_1_5_ENDADDR_SHIFT)) & XRDC_MRGD_W1_1_5_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_1_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_1_5_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_1_5_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_1_5_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_5_D0SEL_SHIFT)) & XRDC_MRGD_W2_1_5_D0SEL_MASK)

#define XRDC_MRGD_W2_1_5_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_1_5_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_1_5_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_5_D1SEL_SHIFT)) & XRDC_MRGD_W2_1_5_D1SEL_MASK)

#define XRDC_MRGD_W2_1_5_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_1_5_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_1_5_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_5_D2SEL_SHIFT)) & XRDC_MRGD_W2_1_5_D2SEL_MASK)

#define XRDC_MRGD_W2_1_5_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_1_5_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_1_5_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_5_D3SEL_SHIFT)) & XRDC_MRGD_W2_1_5_D3SEL_MASK)

#define XRDC_MRGD_W2_1_5_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_1_5_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_1_5_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_5_D4SEL_SHIFT)) & XRDC_MRGD_W2_1_5_D4SEL_MASK)

#define XRDC_MRGD_W2_1_5_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_1_5_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_1_5_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_5_D5SEL_SHIFT)) & XRDC_MRGD_W2_1_5_D5SEL_MASK)

#define XRDC_MRGD_W2_1_5_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_1_5_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_1_5_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_5_D6SEL_SHIFT)) & XRDC_MRGD_W2_1_5_D6SEL_MASK)

#define XRDC_MRGD_W2_1_5_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_1_5_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_1_5_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_5_D7SEL_SHIFT)) & XRDC_MRGD_W2_1_5_D7SEL_MASK)

#define XRDC_MRGD_W2_1_5_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_1_5_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_1_5_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_5_EALO_SHIFT)) & XRDC_MRGD_W2_1_5_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_1_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_1_5_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_1_5_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_1_5_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_1_5_EAL_SHIFT)) & XRDC_MRGD_W3_1_5_EAL_MASK)

#define XRDC_MRGD_W3_1_5_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_1_5_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_1_5_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_1_5_CR_SHIFT)) & XRDC_MRGD_W3_1_5_CR_MASK)
/*! @} */

/*! @name MRGD_W4_1_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_1_5_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_1_5_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_1_5_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_5_ACCSET1_SHIFT)) & XRDC_MRGD_W4_1_5_ACCSET1_MASK)

#define XRDC_MRGD_W4_1_5_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_1_5_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_1_5_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_5_LKAS1_SHIFT)) & XRDC_MRGD_W4_1_5_LKAS1_MASK)

#define XRDC_MRGD_W4_1_5_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_1_5_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_1_5_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_5_ACCSET2_SHIFT)) & XRDC_MRGD_W4_1_5_ACCSET2_MASK)

#define XRDC_MRGD_W4_1_5_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_1_5_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_1_5_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_5_LKAS2_SHIFT)) & XRDC_MRGD_W4_1_5_LKAS2_MASK)

#define XRDC_MRGD_W4_1_5_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_1_5_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_1_5_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_5_LK2_SHIFT)) & XRDC_MRGD_W4_1_5_LK2_MASK)

#define XRDC_MRGD_W4_1_5_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_1_5_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_1_5_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_5_VLD_SHIFT)) & XRDC_MRGD_W4_1_5_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_1_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_1_6_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_1_6_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_1_6_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_1_6_SRTADDR_SHIFT)) & XRDC_MRGD_W0_1_6_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_1_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_1_6_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_1_6_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_1_6_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_1_6_ENDADDR_SHIFT)) & XRDC_MRGD_W1_1_6_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_1_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_1_6_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_1_6_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_1_6_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_6_D0SEL_SHIFT)) & XRDC_MRGD_W2_1_6_D0SEL_MASK)

#define XRDC_MRGD_W2_1_6_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_1_6_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_1_6_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_6_D1SEL_SHIFT)) & XRDC_MRGD_W2_1_6_D1SEL_MASK)

#define XRDC_MRGD_W2_1_6_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_1_6_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_1_6_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_6_D2SEL_SHIFT)) & XRDC_MRGD_W2_1_6_D2SEL_MASK)

#define XRDC_MRGD_W2_1_6_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_1_6_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_1_6_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_6_D3SEL_SHIFT)) & XRDC_MRGD_W2_1_6_D3SEL_MASK)

#define XRDC_MRGD_W2_1_6_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_1_6_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_1_6_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_6_D4SEL_SHIFT)) & XRDC_MRGD_W2_1_6_D4SEL_MASK)

#define XRDC_MRGD_W2_1_6_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_1_6_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_1_6_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_6_D5SEL_SHIFT)) & XRDC_MRGD_W2_1_6_D5SEL_MASK)

#define XRDC_MRGD_W2_1_6_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_1_6_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_1_6_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_6_D6SEL_SHIFT)) & XRDC_MRGD_W2_1_6_D6SEL_MASK)

#define XRDC_MRGD_W2_1_6_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_1_6_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_1_6_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_6_D7SEL_SHIFT)) & XRDC_MRGD_W2_1_6_D7SEL_MASK)

#define XRDC_MRGD_W2_1_6_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_1_6_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_1_6_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_6_EALO_SHIFT)) & XRDC_MRGD_W2_1_6_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_1_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_1_6_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_1_6_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_1_6_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_1_6_EAL_SHIFT)) & XRDC_MRGD_W3_1_6_EAL_MASK)

#define XRDC_MRGD_W3_1_6_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_1_6_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_1_6_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_1_6_CR_SHIFT)) & XRDC_MRGD_W3_1_6_CR_MASK)
/*! @} */

/*! @name MRGD_W4_1_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_1_6_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_1_6_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_1_6_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_6_ACCSET1_SHIFT)) & XRDC_MRGD_W4_1_6_ACCSET1_MASK)

#define XRDC_MRGD_W4_1_6_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_1_6_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_1_6_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_6_LKAS1_SHIFT)) & XRDC_MRGD_W4_1_6_LKAS1_MASK)

#define XRDC_MRGD_W4_1_6_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_1_6_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_1_6_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_6_ACCSET2_SHIFT)) & XRDC_MRGD_W4_1_6_ACCSET2_MASK)

#define XRDC_MRGD_W4_1_6_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_1_6_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_1_6_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_6_LKAS2_SHIFT)) & XRDC_MRGD_W4_1_6_LKAS2_MASK)

#define XRDC_MRGD_W4_1_6_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_1_6_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_1_6_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_6_LK2_SHIFT)) & XRDC_MRGD_W4_1_6_LK2_MASK)

#define XRDC_MRGD_W4_1_6_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_1_6_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_1_6_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_6_VLD_SHIFT)) & XRDC_MRGD_W4_1_6_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_1_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_1_7_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_1_7_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_1_7_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_1_7_SRTADDR_SHIFT)) & XRDC_MRGD_W0_1_7_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_1_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_1_7_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_1_7_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_1_7_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_1_7_ENDADDR_SHIFT)) & XRDC_MRGD_W1_1_7_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_1_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_1_7_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_1_7_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_1_7_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_7_D0SEL_SHIFT)) & XRDC_MRGD_W2_1_7_D0SEL_MASK)

#define XRDC_MRGD_W2_1_7_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_1_7_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_1_7_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_7_D1SEL_SHIFT)) & XRDC_MRGD_W2_1_7_D1SEL_MASK)

#define XRDC_MRGD_W2_1_7_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_1_7_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_1_7_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_7_D2SEL_SHIFT)) & XRDC_MRGD_W2_1_7_D2SEL_MASK)

#define XRDC_MRGD_W2_1_7_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_1_7_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_1_7_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_7_D3SEL_SHIFT)) & XRDC_MRGD_W2_1_7_D3SEL_MASK)

#define XRDC_MRGD_W2_1_7_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_1_7_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_1_7_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_7_D4SEL_SHIFT)) & XRDC_MRGD_W2_1_7_D4SEL_MASK)

#define XRDC_MRGD_W2_1_7_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_1_7_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_1_7_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_7_D5SEL_SHIFT)) & XRDC_MRGD_W2_1_7_D5SEL_MASK)

#define XRDC_MRGD_W2_1_7_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_1_7_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_1_7_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_7_D6SEL_SHIFT)) & XRDC_MRGD_W2_1_7_D6SEL_MASK)

#define XRDC_MRGD_W2_1_7_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_1_7_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_1_7_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_7_D7SEL_SHIFT)) & XRDC_MRGD_W2_1_7_D7SEL_MASK)

#define XRDC_MRGD_W2_1_7_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_1_7_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_1_7_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_1_7_EALO_SHIFT)) & XRDC_MRGD_W2_1_7_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_1_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_1_7_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_1_7_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_1_7_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_1_7_EAL_SHIFT)) & XRDC_MRGD_W3_1_7_EAL_MASK)

#define XRDC_MRGD_W3_1_7_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_1_7_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_1_7_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_1_7_CR_SHIFT)) & XRDC_MRGD_W3_1_7_CR_MASK)
/*! @} */

/*! @name MRGD_W4_1_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_1_7_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_1_7_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_1_7_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_7_ACCSET1_SHIFT)) & XRDC_MRGD_W4_1_7_ACCSET1_MASK)

#define XRDC_MRGD_W4_1_7_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_1_7_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_1_7_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_7_LKAS1_SHIFT)) & XRDC_MRGD_W4_1_7_LKAS1_MASK)

#define XRDC_MRGD_W4_1_7_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_1_7_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_1_7_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_7_ACCSET2_SHIFT)) & XRDC_MRGD_W4_1_7_ACCSET2_MASK)

#define XRDC_MRGD_W4_1_7_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_1_7_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_1_7_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_7_LKAS2_SHIFT)) & XRDC_MRGD_W4_1_7_LKAS2_MASK)

#define XRDC_MRGD_W4_1_7_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_1_7_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_1_7_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_7_LK2_SHIFT)) & XRDC_MRGD_W4_1_7_LK2_MASK)

#define XRDC_MRGD_W4_1_7_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_1_7_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_1_7_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_1_7_VLD_SHIFT)) & XRDC_MRGD_W4_1_7_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_2_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_2_0_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_2_0_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_2_0_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_2_0_SRTADDR_SHIFT)) & XRDC_MRGD_W0_2_0_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_2_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_2_0_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_2_0_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_2_0_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_2_0_ENDADDR_SHIFT)) & XRDC_MRGD_W1_2_0_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_2_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_2_0_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_2_0_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_2_0_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_0_D0SEL_SHIFT)) & XRDC_MRGD_W2_2_0_D0SEL_MASK)

#define XRDC_MRGD_W2_2_0_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_2_0_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_2_0_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_0_D1SEL_SHIFT)) & XRDC_MRGD_W2_2_0_D1SEL_MASK)

#define XRDC_MRGD_W2_2_0_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_2_0_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_2_0_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_0_D2SEL_SHIFT)) & XRDC_MRGD_W2_2_0_D2SEL_MASK)

#define XRDC_MRGD_W2_2_0_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_2_0_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_2_0_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_0_D3SEL_SHIFT)) & XRDC_MRGD_W2_2_0_D3SEL_MASK)

#define XRDC_MRGD_W2_2_0_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_2_0_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_2_0_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_0_D4SEL_SHIFT)) & XRDC_MRGD_W2_2_0_D4SEL_MASK)

#define XRDC_MRGD_W2_2_0_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_2_0_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_2_0_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_0_D5SEL_SHIFT)) & XRDC_MRGD_W2_2_0_D5SEL_MASK)

#define XRDC_MRGD_W2_2_0_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_2_0_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_2_0_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_0_D6SEL_SHIFT)) & XRDC_MRGD_W2_2_0_D6SEL_MASK)

#define XRDC_MRGD_W2_2_0_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_2_0_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_2_0_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_0_D7SEL_SHIFT)) & XRDC_MRGD_W2_2_0_D7SEL_MASK)

#define XRDC_MRGD_W2_2_0_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_2_0_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_2_0_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_0_EALO_SHIFT)) & XRDC_MRGD_W2_2_0_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_2_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_2_0_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_2_0_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_2_0_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_2_0_EAL_SHIFT)) & XRDC_MRGD_W3_2_0_EAL_MASK)

#define XRDC_MRGD_W3_2_0_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_2_0_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_2_0_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_2_0_CR_SHIFT)) & XRDC_MRGD_W3_2_0_CR_MASK)
/*! @} */

/*! @name MRGD_W4_2_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_2_0_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_2_0_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_2_0_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_2_0_ACCSET1_SHIFT)) & XRDC_MRGD_W4_2_0_ACCSET1_MASK)

#define XRDC_MRGD_W4_2_0_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_2_0_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_2_0_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_2_0_LKAS1_SHIFT)) & XRDC_MRGD_W4_2_0_LKAS1_MASK)

#define XRDC_MRGD_W4_2_0_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_2_0_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_2_0_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_2_0_ACCSET2_SHIFT)) & XRDC_MRGD_W4_2_0_ACCSET2_MASK)

#define XRDC_MRGD_W4_2_0_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_2_0_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_2_0_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_2_0_LKAS2_SHIFT)) & XRDC_MRGD_W4_2_0_LKAS2_MASK)

#define XRDC_MRGD_W4_2_0_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_2_0_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_2_0_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_2_0_LK2_SHIFT)) & XRDC_MRGD_W4_2_0_LK2_MASK)

#define XRDC_MRGD_W4_2_0_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_2_0_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_2_0_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_2_0_VLD_SHIFT)) & XRDC_MRGD_W4_2_0_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_2_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_2_1_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_2_1_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_2_1_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_2_1_SRTADDR_SHIFT)) & XRDC_MRGD_W0_2_1_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_2_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_2_1_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_2_1_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_2_1_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_2_1_ENDADDR_SHIFT)) & XRDC_MRGD_W1_2_1_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_2_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_2_1_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_2_1_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_2_1_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_1_D0SEL_SHIFT)) & XRDC_MRGD_W2_2_1_D0SEL_MASK)

#define XRDC_MRGD_W2_2_1_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_2_1_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_2_1_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_1_D1SEL_SHIFT)) & XRDC_MRGD_W2_2_1_D1SEL_MASK)

#define XRDC_MRGD_W2_2_1_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_2_1_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_2_1_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_1_D2SEL_SHIFT)) & XRDC_MRGD_W2_2_1_D2SEL_MASK)

#define XRDC_MRGD_W2_2_1_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_2_1_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_2_1_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_1_D3SEL_SHIFT)) & XRDC_MRGD_W2_2_1_D3SEL_MASK)

#define XRDC_MRGD_W2_2_1_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_2_1_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_2_1_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_1_D4SEL_SHIFT)) & XRDC_MRGD_W2_2_1_D4SEL_MASK)

#define XRDC_MRGD_W2_2_1_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_2_1_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_2_1_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_1_D5SEL_SHIFT)) & XRDC_MRGD_W2_2_1_D5SEL_MASK)

#define XRDC_MRGD_W2_2_1_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_2_1_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_2_1_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_1_D6SEL_SHIFT)) & XRDC_MRGD_W2_2_1_D6SEL_MASK)

#define XRDC_MRGD_W2_2_1_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_2_1_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_2_1_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_1_D7SEL_SHIFT)) & XRDC_MRGD_W2_2_1_D7SEL_MASK)

#define XRDC_MRGD_W2_2_1_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_2_1_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_2_1_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_1_EALO_SHIFT)) & XRDC_MRGD_W2_2_1_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_2_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_2_1_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_2_1_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_2_1_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_2_1_EAL_SHIFT)) & XRDC_MRGD_W3_2_1_EAL_MASK)

#define XRDC_MRGD_W3_2_1_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_2_1_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_2_1_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_2_1_CR_SHIFT)) & XRDC_MRGD_W3_2_1_CR_MASK)
/*! @} */

/*! @name MRGD_W4_2_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_2_1_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_2_1_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_2_1_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_2_1_ACCSET1_SHIFT)) & XRDC_MRGD_W4_2_1_ACCSET1_MASK)

#define XRDC_MRGD_W4_2_1_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_2_1_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_2_1_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_2_1_LKAS1_SHIFT)) & XRDC_MRGD_W4_2_1_LKAS1_MASK)

#define XRDC_MRGD_W4_2_1_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_2_1_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_2_1_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_2_1_ACCSET2_SHIFT)) & XRDC_MRGD_W4_2_1_ACCSET2_MASK)

#define XRDC_MRGD_W4_2_1_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_2_1_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_2_1_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_2_1_LKAS2_SHIFT)) & XRDC_MRGD_W4_2_1_LKAS2_MASK)

#define XRDC_MRGD_W4_2_1_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_2_1_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_2_1_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_2_1_LK2_SHIFT)) & XRDC_MRGD_W4_2_1_LK2_MASK)

#define XRDC_MRGD_W4_2_1_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_2_1_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_2_1_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_2_1_VLD_SHIFT)) & XRDC_MRGD_W4_2_1_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_2_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_2_2_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_2_2_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_2_2_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_2_2_SRTADDR_SHIFT)) & XRDC_MRGD_W0_2_2_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_2_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_2_2_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_2_2_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_2_2_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_2_2_ENDADDR_SHIFT)) & XRDC_MRGD_W1_2_2_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_2_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_2_2_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_2_2_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_2_2_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_2_D0SEL_SHIFT)) & XRDC_MRGD_W2_2_2_D0SEL_MASK)

#define XRDC_MRGD_W2_2_2_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_2_2_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_2_2_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_2_D1SEL_SHIFT)) & XRDC_MRGD_W2_2_2_D1SEL_MASK)

#define XRDC_MRGD_W2_2_2_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_2_2_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_2_2_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_2_D2SEL_SHIFT)) & XRDC_MRGD_W2_2_2_D2SEL_MASK)

#define XRDC_MRGD_W2_2_2_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_2_2_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_2_2_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_2_D3SEL_SHIFT)) & XRDC_MRGD_W2_2_2_D3SEL_MASK)

#define XRDC_MRGD_W2_2_2_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_2_2_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_2_2_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_2_D4SEL_SHIFT)) & XRDC_MRGD_W2_2_2_D4SEL_MASK)

#define XRDC_MRGD_W2_2_2_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_2_2_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_2_2_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_2_D5SEL_SHIFT)) & XRDC_MRGD_W2_2_2_D5SEL_MASK)

#define XRDC_MRGD_W2_2_2_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_2_2_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_2_2_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_2_D6SEL_SHIFT)) & XRDC_MRGD_W2_2_2_D6SEL_MASK)

#define XRDC_MRGD_W2_2_2_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_2_2_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_2_2_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_2_D7SEL_SHIFT)) & XRDC_MRGD_W2_2_2_D7SEL_MASK)

#define XRDC_MRGD_W2_2_2_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_2_2_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_2_2_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_2_EALO_SHIFT)) & XRDC_MRGD_W2_2_2_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_2_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_2_2_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_2_2_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_2_2_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_2_2_EAL_SHIFT)) & XRDC_MRGD_W3_2_2_EAL_MASK)

#define XRDC_MRGD_W3_2_2_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_2_2_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_2_2_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_2_2_CR_SHIFT)) & XRDC_MRGD_W3_2_2_CR_MASK)
/*! @} */

/*! @name MRGD_W4_2_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_2_2_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_2_2_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_2_2_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_2_2_ACCSET1_SHIFT)) & XRDC_MRGD_W4_2_2_ACCSET1_MASK)

#define XRDC_MRGD_W4_2_2_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_2_2_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_2_2_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_2_2_LKAS1_SHIFT)) & XRDC_MRGD_W4_2_2_LKAS1_MASK)

#define XRDC_MRGD_W4_2_2_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_2_2_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_2_2_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_2_2_ACCSET2_SHIFT)) & XRDC_MRGD_W4_2_2_ACCSET2_MASK)

#define XRDC_MRGD_W4_2_2_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_2_2_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_2_2_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_2_2_LKAS2_SHIFT)) & XRDC_MRGD_W4_2_2_LKAS2_MASK)

#define XRDC_MRGD_W4_2_2_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_2_2_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_2_2_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_2_2_LK2_SHIFT)) & XRDC_MRGD_W4_2_2_LK2_MASK)

#define XRDC_MRGD_W4_2_2_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_2_2_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_2_2_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_2_2_VLD_SHIFT)) & XRDC_MRGD_W4_2_2_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_2_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_2_3_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_2_3_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_2_3_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_2_3_SRTADDR_SHIFT)) & XRDC_MRGD_W0_2_3_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_2_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_2_3_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_2_3_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_2_3_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_2_3_ENDADDR_SHIFT)) & XRDC_MRGD_W1_2_3_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_2_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_2_3_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_2_3_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_2_3_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_3_D0SEL_SHIFT)) & XRDC_MRGD_W2_2_3_D0SEL_MASK)

#define XRDC_MRGD_W2_2_3_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_2_3_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_2_3_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_3_D1SEL_SHIFT)) & XRDC_MRGD_W2_2_3_D1SEL_MASK)

#define XRDC_MRGD_W2_2_3_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_2_3_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_2_3_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_3_D2SEL_SHIFT)) & XRDC_MRGD_W2_2_3_D2SEL_MASK)

#define XRDC_MRGD_W2_2_3_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_2_3_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_2_3_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_3_D3SEL_SHIFT)) & XRDC_MRGD_W2_2_3_D3SEL_MASK)

#define XRDC_MRGD_W2_2_3_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_2_3_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_2_3_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_3_D4SEL_SHIFT)) & XRDC_MRGD_W2_2_3_D4SEL_MASK)

#define XRDC_MRGD_W2_2_3_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_2_3_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_2_3_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_3_D5SEL_SHIFT)) & XRDC_MRGD_W2_2_3_D5SEL_MASK)

#define XRDC_MRGD_W2_2_3_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_2_3_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_2_3_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_3_D6SEL_SHIFT)) & XRDC_MRGD_W2_2_3_D6SEL_MASK)

#define XRDC_MRGD_W2_2_3_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_2_3_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_2_3_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_3_D7SEL_SHIFT)) & XRDC_MRGD_W2_2_3_D7SEL_MASK)

#define XRDC_MRGD_W2_2_3_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_2_3_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_2_3_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_2_3_EALO_SHIFT)) & XRDC_MRGD_W2_2_3_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_2_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_2_3_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_2_3_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_2_3_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_2_3_EAL_SHIFT)) & XRDC_MRGD_W3_2_3_EAL_MASK)

#define XRDC_MRGD_W3_2_3_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_2_3_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_2_3_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_2_3_CR_SHIFT)) & XRDC_MRGD_W3_2_3_CR_MASK)
/*! @} */

/*! @name MRGD_W4_2_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_2_3_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_2_3_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_2_3_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_2_3_ACCSET1_SHIFT)) & XRDC_MRGD_W4_2_3_ACCSET1_MASK)

#define XRDC_MRGD_W4_2_3_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_2_3_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_2_3_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_2_3_LKAS1_SHIFT)) & XRDC_MRGD_W4_2_3_LKAS1_MASK)

#define XRDC_MRGD_W4_2_3_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_2_3_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_2_3_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_2_3_ACCSET2_SHIFT)) & XRDC_MRGD_W4_2_3_ACCSET2_MASK)

#define XRDC_MRGD_W4_2_3_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_2_3_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_2_3_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_2_3_LKAS2_SHIFT)) & XRDC_MRGD_W4_2_3_LKAS2_MASK)

#define XRDC_MRGD_W4_2_3_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_2_3_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_2_3_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_2_3_LK2_SHIFT)) & XRDC_MRGD_W4_2_3_LK2_MASK)

#define XRDC_MRGD_W4_2_3_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_2_3_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_2_3_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_2_3_VLD_SHIFT)) & XRDC_MRGD_W4_2_3_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_3_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_3_0_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_3_0_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_3_0_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_3_0_SRTADDR_SHIFT)) & XRDC_MRGD_W0_3_0_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_3_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_3_0_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_3_0_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_3_0_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_3_0_ENDADDR_SHIFT)) & XRDC_MRGD_W1_3_0_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_3_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_3_0_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_3_0_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_3_0_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_0_D0SEL_SHIFT)) & XRDC_MRGD_W2_3_0_D0SEL_MASK)

#define XRDC_MRGD_W2_3_0_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_3_0_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_3_0_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_0_D1SEL_SHIFT)) & XRDC_MRGD_W2_3_0_D1SEL_MASK)

#define XRDC_MRGD_W2_3_0_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_3_0_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_3_0_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_0_D2SEL_SHIFT)) & XRDC_MRGD_W2_3_0_D2SEL_MASK)

#define XRDC_MRGD_W2_3_0_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_3_0_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_3_0_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_0_D3SEL_SHIFT)) & XRDC_MRGD_W2_3_0_D3SEL_MASK)

#define XRDC_MRGD_W2_3_0_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_3_0_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_3_0_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_0_D4SEL_SHIFT)) & XRDC_MRGD_W2_3_0_D4SEL_MASK)

#define XRDC_MRGD_W2_3_0_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_3_0_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_3_0_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_0_D5SEL_SHIFT)) & XRDC_MRGD_W2_3_0_D5SEL_MASK)

#define XRDC_MRGD_W2_3_0_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_3_0_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_3_0_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_0_D6SEL_SHIFT)) & XRDC_MRGD_W2_3_0_D6SEL_MASK)

#define XRDC_MRGD_W2_3_0_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_3_0_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_3_0_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_0_D7SEL_SHIFT)) & XRDC_MRGD_W2_3_0_D7SEL_MASK)

#define XRDC_MRGD_W2_3_0_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_3_0_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_3_0_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_0_EALO_SHIFT)) & XRDC_MRGD_W2_3_0_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_3_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_3_0_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_3_0_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_3_0_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_3_0_EAL_SHIFT)) & XRDC_MRGD_W3_3_0_EAL_MASK)

#define XRDC_MRGD_W3_3_0_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_3_0_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_3_0_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_3_0_CR_SHIFT)) & XRDC_MRGD_W3_3_0_CR_MASK)
/*! @} */

/*! @name MRGD_W4_3_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_3_0_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_3_0_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_3_0_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_3_0_ACCSET1_SHIFT)) & XRDC_MRGD_W4_3_0_ACCSET1_MASK)

#define XRDC_MRGD_W4_3_0_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_3_0_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_3_0_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_3_0_LKAS1_SHIFT)) & XRDC_MRGD_W4_3_0_LKAS1_MASK)

#define XRDC_MRGD_W4_3_0_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_3_0_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_3_0_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_3_0_ACCSET2_SHIFT)) & XRDC_MRGD_W4_3_0_ACCSET2_MASK)

#define XRDC_MRGD_W4_3_0_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_3_0_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_3_0_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_3_0_LKAS2_SHIFT)) & XRDC_MRGD_W4_3_0_LKAS2_MASK)

#define XRDC_MRGD_W4_3_0_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_3_0_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_3_0_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_3_0_LK2_SHIFT)) & XRDC_MRGD_W4_3_0_LK2_MASK)

#define XRDC_MRGD_W4_3_0_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_3_0_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_3_0_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_3_0_VLD_SHIFT)) & XRDC_MRGD_W4_3_0_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_3_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_3_1_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_3_1_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_3_1_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_3_1_SRTADDR_SHIFT)) & XRDC_MRGD_W0_3_1_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_3_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_3_1_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_3_1_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_3_1_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_3_1_ENDADDR_SHIFT)) & XRDC_MRGD_W1_3_1_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_3_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_3_1_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_3_1_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_3_1_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_1_D0SEL_SHIFT)) & XRDC_MRGD_W2_3_1_D0SEL_MASK)

#define XRDC_MRGD_W2_3_1_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_3_1_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_3_1_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_1_D1SEL_SHIFT)) & XRDC_MRGD_W2_3_1_D1SEL_MASK)

#define XRDC_MRGD_W2_3_1_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_3_1_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_3_1_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_1_D2SEL_SHIFT)) & XRDC_MRGD_W2_3_1_D2SEL_MASK)

#define XRDC_MRGD_W2_3_1_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_3_1_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_3_1_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_1_D3SEL_SHIFT)) & XRDC_MRGD_W2_3_1_D3SEL_MASK)

#define XRDC_MRGD_W2_3_1_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_3_1_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_3_1_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_1_D4SEL_SHIFT)) & XRDC_MRGD_W2_3_1_D4SEL_MASK)

#define XRDC_MRGD_W2_3_1_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_3_1_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_3_1_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_1_D5SEL_SHIFT)) & XRDC_MRGD_W2_3_1_D5SEL_MASK)

#define XRDC_MRGD_W2_3_1_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_3_1_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_3_1_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_1_D6SEL_SHIFT)) & XRDC_MRGD_W2_3_1_D6SEL_MASK)

#define XRDC_MRGD_W2_3_1_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_3_1_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_3_1_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_1_D7SEL_SHIFT)) & XRDC_MRGD_W2_3_1_D7SEL_MASK)

#define XRDC_MRGD_W2_3_1_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_3_1_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_3_1_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_1_EALO_SHIFT)) & XRDC_MRGD_W2_3_1_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_3_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_3_1_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_3_1_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_3_1_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_3_1_EAL_SHIFT)) & XRDC_MRGD_W3_3_1_EAL_MASK)

#define XRDC_MRGD_W3_3_1_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_3_1_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_3_1_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_3_1_CR_SHIFT)) & XRDC_MRGD_W3_3_1_CR_MASK)
/*! @} */

/*! @name MRGD_W4_3_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_3_1_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_3_1_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_3_1_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_3_1_ACCSET1_SHIFT)) & XRDC_MRGD_W4_3_1_ACCSET1_MASK)

#define XRDC_MRGD_W4_3_1_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_3_1_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_3_1_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_3_1_LKAS1_SHIFT)) & XRDC_MRGD_W4_3_1_LKAS1_MASK)

#define XRDC_MRGD_W4_3_1_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_3_1_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_3_1_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_3_1_ACCSET2_SHIFT)) & XRDC_MRGD_W4_3_1_ACCSET2_MASK)

#define XRDC_MRGD_W4_3_1_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_3_1_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_3_1_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_3_1_LKAS2_SHIFT)) & XRDC_MRGD_W4_3_1_LKAS2_MASK)

#define XRDC_MRGD_W4_3_1_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_3_1_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_3_1_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_3_1_LK2_SHIFT)) & XRDC_MRGD_W4_3_1_LK2_MASK)

#define XRDC_MRGD_W4_3_1_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_3_1_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_3_1_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_3_1_VLD_SHIFT)) & XRDC_MRGD_W4_3_1_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_3_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_3_2_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_3_2_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_3_2_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_3_2_SRTADDR_SHIFT)) & XRDC_MRGD_W0_3_2_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_3_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_3_2_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_3_2_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_3_2_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_3_2_ENDADDR_SHIFT)) & XRDC_MRGD_W1_3_2_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_3_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_3_2_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_3_2_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_3_2_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_2_D0SEL_SHIFT)) & XRDC_MRGD_W2_3_2_D0SEL_MASK)

#define XRDC_MRGD_W2_3_2_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_3_2_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_3_2_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_2_D1SEL_SHIFT)) & XRDC_MRGD_W2_3_2_D1SEL_MASK)

#define XRDC_MRGD_W2_3_2_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_3_2_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_3_2_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_2_D2SEL_SHIFT)) & XRDC_MRGD_W2_3_2_D2SEL_MASK)

#define XRDC_MRGD_W2_3_2_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_3_2_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_3_2_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_2_D3SEL_SHIFT)) & XRDC_MRGD_W2_3_2_D3SEL_MASK)

#define XRDC_MRGD_W2_3_2_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_3_2_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_3_2_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_2_D4SEL_SHIFT)) & XRDC_MRGD_W2_3_2_D4SEL_MASK)

#define XRDC_MRGD_W2_3_2_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_3_2_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_3_2_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_2_D5SEL_SHIFT)) & XRDC_MRGD_W2_3_2_D5SEL_MASK)

#define XRDC_MRGD_W2_3_2_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_3_2_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_3_2_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_2_D6SEL_SHIFT)) & XRDC_MRGD_W2_3_2_D6SEL_MASK)

#define XRDC_MRGD_W2_3_2_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_3_2_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_3_2_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_2_D7SEL_SHIFT)) & XRDC_MRGD_W2_3_2_D7SEL_MASK)

#define XRDC_MRGD_W2_3_2_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_3_2_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_3_2_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_2_EALO_SHIFT)) & XRDC_MRGD_W2_3_2_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_3_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_3_2_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_3_2_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_3_2_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_3_2_EAL_SHIFT)) & XRDC_MRGD_W3_3_2_EAL_MASK)

#define XRDC_MRGD_W3_3_2_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_3_2_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_3_2_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_3_2_CR_SHIFT)) & XRDC_MRGD_W3_3_2_CR_MASK)
/*! @} */

/*! @name MRGD_W4_3_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_3_2_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_3_2_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_3_2_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_3_2_ACCSET1_SHIFT)) & XRDC_MRGD_W4_3_2_ACCSET1_MASK)

#define XRDC_MRGD_W4_3_2_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_3_2_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_3_2_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_3_2_LKAS1_SHIFT)) & XRDC_MRGD_W4_3_2_LKAS1_MASK)

#define XRDC_MRGD_W4_3_2_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_3_2_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_3_2_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_3_2_ACCSET2_SHIFT)) & XRDC_MRGD_W4_3_2_ACCSET2_MASK)

#define XRDC_MRGD_W4_3_2_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_3_2_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_3_2_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_3_2_LKAS2_SHIFT)) & XRDC_MRGD_W4_3_2_LKAS2_MASK)

#define XRDC_MRGD_W4_3_2_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_3_2_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_3_2_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_3_2_LK2_SHIFT)) & XRDC_MRGD_W4_3_2_LK2_MASK)

#define XRDC_MRGD_W4_3_2_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_3_2_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_3_2_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_3_2_VLD_SHIFT)) & XRDC_MRGD_W4_3_2_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_3_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_3_3_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_3_3_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_3_3_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_3_3_SRTADDR_SHIFT)) & XRDC_MRGD_W0_3_3_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_3_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_3_3_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_3_3_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_3_3_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_3_3_ENDADDR_SHIFT)) & XRDC_MRGD_W1_3_3_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_3_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_3_3_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_3_3_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_3_3_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_3_D0SEL_SHIFT)) & XRDC_MRGD_W2_3_3_D0SEL_MASK)

#define XRDC_MRGD_W2_3_3_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_3_3_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_3_3_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_3_D1SEL_SHIFT)) & XRDC_MRGD_W2_3_3_D1SEL_MASK)

#define XRDC_MRGD_W2_3_3_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_3_3_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_3_3_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_3_D2SEL_SHIFT)) & XRDC_MRGD_W2_3_3_D2SEL_MASK)

#define XRDC_MRGD_W2_3_3_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_3_3_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_3_3_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_3_D3SEL_SHIFT)) & XRDC_MRGD_W2_3_3_D3SEL_MASK)

#define XRDC_MRGD_W2_3_3_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_3_3_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_3_3_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_3_D4SEL_SHIFT)) & XRDC_MRGD_W2_3_3_D4SEL_MASK)

#define XRDC_MRGD_W2_3_3_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_3_3_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_3_3_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_3_D5SEL_SHIFT)) & XRDC_MRGD_W2_3_3_D5SEL_MASK)

#define XRDC_MRGD_W2_3_3_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_3_3_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_3_3_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_3_D6SEL_SHIFT)) & XRDC_MRGD_W2_3_3_D6SEL_MASK)

#define XRDC_MRGD_W2_3_3_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_3_3_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_3_3_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_3_D7SEL_SHIFT)) & XRDC_MRGD_W2_3_3_D7SEL_MASK)

#define XRDC_MRGD_W2_3_3_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_3_3_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_3_3_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_3_3_EALO_SHIFT)) & XRDC_MRGD_W2_3_3_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_3_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_3_3_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_3_3_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_3_3_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_3_3_EAL_SHIFT)) & XRDC_MRGD_W3_3_3_EAL_MASK)

#define XRDC_MRGD_W3_3_3_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_3_3_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_3_3_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_3_3_CR_SHIFT)) & XRDC_MRGD_W3_3_3_CR_MASK)
/*! @} */

/*! @name MRGD_W4_3_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_3_3_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_3_3_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_3_3_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_3_3_ACCSET1_SHIFT)) & XRDC_MRGD_W4_3_3_ACCSET1_MASK)

#define XRDC_MRGD_W4_3_3_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_3_3_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_3_3_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_3_3_LKAS1_SHIFT)) & XRDC_MRGD_W4_3_3_LKAS1_MASK)

#define XRDC_MRGD_W4_3_3_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_3_3_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_3_3_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_3_3_ACCSET2_SHIFT)) & XRDC_MRGD_W4_3_3_ACCSET2_MASK)

#define XRDC_MRGD_W4_3_3_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_3_3_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_3_3_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_3_3_LKAS2_SHIFT)) & XRDC_MRGD_W4_3_3_LKAS2_MASK)

#define XRDC_MRGD_W4_3_3_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_3_3_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_3_3_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_3_3_LK2_SHIFT)) & XRDC_MRGD_W4_3_3_LK2_MASK)

#define XRDC_MRGD_W4_3_3_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_3_3_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_3_3_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_3_3_VLD_SHIFT)) & XRDC_MRGD_W4_3_3_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_4_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_4_0_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_4_0_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_4_0_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_4_0_SRTADDR_SHIFT)) & XRDC_MRGD_W0_4_0_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_4_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_4_0_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_4_0_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_4_0_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_4_0_ENDADDR_SHIFT)) & XRDC_MRGD_W1_4_0_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_4_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_4_0_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_4_0_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_4_0_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_0_D0SEL_SHIFT)) & XRDC_MRGD_W2_4_0_D0SEL_MASK)

#define XRDC_MRGD_W2_4_0_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_4_0_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_4_0_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_0_D1SEL_SHIFT)) & XRDC_MRGD_W2_4_0_D1SEL_MASK)

#define XRDC_MRGD_W2_4_0_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_4_0_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_4_0_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_0_D2SEL_SHIFT)) & XRDC_MRGD_W2_4_0_D2SEL_MASK)

#define XRDC_MRGD_W2_4_0_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_4_0_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_4_0_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_0_D3SEL_SHIFT)) & XRDC_MRGD_W2_4_0_D3SEL_MASK)

#define XRDC_MRGD_W2_4_0_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_4_0_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_4_0_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_0_D4SEL_SHIFT)) & XRDC_MRGD_W2_4_0_D4SEL_MASK)

#define XRDC_MRGD_W2_4_0_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_4_0_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_4_0_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_0_D5SEL_SHIFT)) & XRDC_MRGD_W2_4_0_D5SEL_MASK)

#define XRDC_MRGD_W2_4_0_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_4_0_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_4_0_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_0_D6SEL_SHIFT)) & XRDC_MRGD_W2_4_0_D6SEL_MASK)

#define XRDC_MRGD_W2_4_0_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_4_0_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_4_0_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_0_D7SEL_SHIFT)) & XRDC_MRGD_W2_4_0_D7SEL_MASK)

#define XRDC_MRGD_W2_4_0_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_4_0_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_4_0_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_0_EALO_SHIFT)) & XRDC_MRGD_W2_4_0_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_4_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_4_0_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_4_0_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_4_0_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_4_0_EAL_SHIFT)) & XRDC_MRGD_W3_4_0_EAL_MASK)

#define XRDC_MRGD_W3_4_0_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_4_0_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_4_0_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_4_0_CR_SHIFT)) & XRDC_MRGD_W3_4_0_CR_MASK)
/*! @} */

/*! @name MRGD_W4_4_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_4_0_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_4_0_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_4_0_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_0_ACCSET1_SHIFT)) & XRDC_MRGD_W4_4_0_ACCSET1_MASK)

#define XRDC_MRGD_W4_4_0_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_4_0_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_4_0_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_0_LKAS1_SHIFT)) & XRDC_MRGD_W4_4_0_LKAS1_MASK)

#define XRDC_MRGD_W4_4_0_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_4_0_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_4_0_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_0_ACCSET2_SHIFT)) & XRDC_MRGD_W4_4_0_ACCSET2_MASK)

#define XRDC_MRGD_W4_4_0_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_4_0_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_4_0_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_0_LKAS2_SHIFT)) & XRDC_MRGD_W4_4_0_LKAS2_MASK)

#define XRDC_MRGD_W4_4_0_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_4_0_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_4_0_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_0_LK2_SHIFT)) & XRDC_MRGD_W4_4_0_LK2_MASK)

#define XRDC_MRGD_W4_4_0_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_4_0_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_4_0_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_0_VLD_SHIFT)) & XRDC_MRGD_W4_4_0_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_4_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_4_1_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_4_1_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_4_1_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_4_1_SRTADDR_SHIFT)) & XRDC_MRGD_W0_4_1_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_4_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_4_1_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_4_1_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_4_1_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_4_1_ENDADDR_SHIFT)) & XRDC_MRGD_W1_4_1_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_4_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_4_1_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_4_1_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_4_1_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_1_D0SEL_SHIFT)) & XRDC_MRGD_W2_4_1_D0SEL_MASK)

#define XRDC_MRGD_W2_4_1_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_4_1_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_4_1_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_1_D1SEL_SHIFT)) & XRDC_MRGD_W2_4_1_D1SEL_MASK)

#define XRDC_MRGD_W2_4_1_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_4_1_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_4_1_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_1_D2SEL_SHIFT)) & XRDC_MRGD_W2_4_1_D2SEL_MASK)

#define XRDC_MRGD_W2_4_1_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_4_1_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_4_1_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_1_D3SEL_SHIFT)) & XRDC_MRGD_W2_4_1_D3SEL_MASK)

#define XRDC_MRGD_W2_4_1_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_4_1_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_4_1_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_1_D4SEL_SHIFT)) & XRDC_MRGD_W2_4_1_D4SEL_MASK)

#define XRDC_MRGD_W2_4_1_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_4_1_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_4_1_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_1_D5SEL_SHIFT)) & XRDC_MRGD_W2_4_1_D5SEL_MASK)

#define XRDC_MRGD_W2_4_1_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_4_1_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_4_1_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_1_D6SEL_SHIFT)) & XRDC_MRGD_W2_4_1_D6SEL_MASK)

#define XRDC_MRGD_W2_4_1_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_4_1_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_4_1_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_1_D7SEL_SHIFT)) & XRDC_MRGD_W2_4_1_D7SEL_MASK)

#define XRDC_MRGD_W2_4_1_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_4_1_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_4_1_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_1_EALO_SHIFT)) & XRDC_MRGD_W2_4_1_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_4_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_4_1_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_4_1_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_4_1_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_4_1_EAL_SHIFT)) & XRDC_MRGD_W3_4_1_EAL_MASK)

#define XRDC_MRGD_W3_4_1_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_4_1_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_4_1_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_4_1_CR_SHIFT)) & XRDC_MRGD_W3_4_1_CR_MASK)
/*! @} */

/*! @name MRGD_W4_4_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_4_1_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_4_1_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_4_1_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_1_ACCSET1_SHIFT)) & XRDC_MRGD_W4_4_1_ACCSET1_MASK)

#define XRDC_MRGD_W4_4_1_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_4_1_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_4_1_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_1_LKAS1_SHIFT)) & XRDC_MRGD_W4_4_1_LKAS1_MASK)

#define XRDC_MRGD_W4_4_1_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_4_1_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_4_1_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_1_ACCSET2_SHIFT)) & XRDC_MRGD_W4_4_1_ACCSET2_MASK)

#define XRDC_MRGD_W4_4_1_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_4_1_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_4_1_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_1_LKAS2_SHIFT)) & XRDC_MRGD_W4_4_1_LKAS2_MASK)

#define XRDC_MRGD_W4_4_1_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_4_1_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_4_1_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_1_LK2_SHIFT)) & XRDC_MRGD_W4_4_1_LK2_MASK)

#define XRDC_MRGD_W4_4_1_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_4_1_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_4_1_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_1_VLD_SHIFT)) & XRDC_MRGD_W4_4_1_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_4_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_4_2_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_4_2_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_4_2_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_4_2_SRTADDR_SHIFT)) & XRDC_MRGD_W0_4_2_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_4_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_4_2_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_4_2_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_4_2_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_4_2_ENDADDR_SHIFT)) & XRDC_MRGD_W1_4_2_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_4_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_4_2_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_4_2_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_4_2_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_2_D0SEL_SHIFT)) & XRDC_MRGD_W2_4_2_D0SEL_MASK)

#define XRDC_MRGD_W2_4_2_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_4_2_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_4_2_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_2_D1SEL_SHIFT)) & XRDC_MRGD_W2_4_2_D1SEL_MASK)

#define XRDC_MRGD_W2_4_2_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_4_2_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_4_2_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_2_D2SEL_SHIFT)) & XRDC_MRGD_W2_4_2_D2SEL_MASK)

#define XRDC_MRGD_W2_4_2_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_4_2_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_4_2_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_2_D3SEL_SHIFT)) & XRDC_MRGD_W2_4_2_D3SEL_MASK)

#define XRDC_MRGD_W2_4_2_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_4_2_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_4_2_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_2_D4SEL_SHIFT)) & XRDC_MRGD_W2_4_2_D4SEL_MASK)

#define XRDC_MRGD_W2_4_2_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_4_2_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_4_2_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_2_D5SEL_SHIFT)) & XRDC_MRGD_W2_4_2_D5SEL_MASK)

#define XRDC_MRGD_W2_4_2_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_4_2_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_4_2_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_2_D6SEL_SHIFT)) & XRDC_MRGD_W2_4_2_D6SEL_MASK)

#define XRDC_MRGD_W2_4_2_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_4_2_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_4_2_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_2_D7SEL_SHIFT)) & XRDC_MRGD_W2_4_2_D7SEL_MASK)

#define XRDC_MRGD_W2_4_2_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_4_2_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_4_2_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_2_EALO_SHIFT)) & XRDC_MRGD_W2_4_2_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_4_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_4_2_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_4_2_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_4_2_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_4_2_EAL_SHIFT)) & XRDC_MRGD_W3_4_2_EAL_MASK)

#define XRDC_MRGD_W3_4_2_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_4_2_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_4_2_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_4_2_CR_SHIFT)) & XRDC_MRGD_W3_4_2_CR_MASK)
/*! @} */

/*! @name MRGD_W4_4_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_4_2_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_4_2_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_4_2_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_2_ACCSET1_SHIFT)) & XRDC_MRGD_W4_4_2_ACCSET1_MASK)

#define XRDC_MRGD_W4_4_2_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_4_2_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_4_2_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_2_LKAS1_SHIFT)) & XRDC_MRGD_W4_4_2_LKAS1_MASK)

#define XRDC_MRGD_W4_4_2_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_4_2_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_4_2_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_2_ACCSET2_SHIFT)) & XRDC_MRGD_W4_4_2_ACCSET2_MASK)

#define XRDC_MRGD_W4_4_2_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_4_2_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_4_2_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_2_LKAS2_SHIFT)) & XRDC_MRGD_W4_4_2_LKAS2_MASK)

#define XRDC_MRGD_W4_4_2_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_4_2_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_4_2_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_2_LK2_SHIFT)) & XRDC_MRGD_W4_4_2_LK2_MASK)

#define XRDC_MRGD_W4_4_2_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_4_2_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_4_2_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_2_VLD_SHIFT)) & XRDC_MRGD_W4_4_2_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_4_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_4_3_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_4_3_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_4_3_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_4_3_SRTADDR_SHIFT)) & XRDC_MRGD_W0_4_3_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_4_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_4_3_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_4_3_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_4_3_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_4_3_ENDADDR_SHIFT)) & XRDC_MRGD_W1_4_3_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_4_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_4_3_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_4_3_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_4_3_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_3_D0SEL_SHIFT)) & XRDC_MRGD_W2_4_3_D0SEL_MASK)

#define XRDC_MRGD_W2_4_3_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_4_3_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_4_3_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_3_D1SEL_SHIFT)) & XRDC_MRGD_W2_4_3_D1SEL_MASK)

#define XRDC_MRGD_W2_4_3_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_4_3_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_4_3_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_3_D2SEL_SHIFT)) & XRDC_MRGD_W2_4_3_D2SEL_MASK)

#define XRDC_MRGD_W2_4_3_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_4_3_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_4_3_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_3_D3SEL_SHIFT)) & XRDC_MRGD_W2_4_3_D3SEL_MASK)

#define XRDC_MRGD_W2_4_3_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_4_3_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_4_3_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_3_D4SEL_SHIFT)) & XRDC_MRGD_W2_4_3_D4SEL_MASK)

#define XRDC_MRGD_W2_4_3_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_4_3_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_4_3_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_3_D5SEL_SHIFT)) & XRDC_MRGD_W2_4_3_D5SEL_MASK)

#define XRDC_MRGD_W2_4_3_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_4_3_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_4_3_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_3_D6SEL_SHIFT)) & XRDC_MRGD_W2_4_3_D6SEL_MASK)

#define XRDC_MRGD_W2_4_3_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_4_3_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_4_3_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_3_D7SEL_SHIFT)) & XRDC_MRGD_W2_4_3_D7SEL_MASK)

#define XRDC_MRGD_W2_4_3_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_4_3_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_4_3_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_3_EALO_SHIFT)) & XRDC_MRGD_W2_4_3_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_4_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_4_3_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_4_3_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_4_3_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_4_3_EAL_SHIFT)) & XRDC_MRGD_W3_4_3_EAL_MASK)

#define XRDC_MRGD_W3_4_3_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_4_3_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_4_3_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_4_3_CR_SHIFT)) & XRDC_MRGD_W3_4_3_CR_MASK)
/*! @} */

/*! @name MRGD_W4_4_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_4_3_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_4_3_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_4_3_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_3_ACCSET1_SHIFT)) & XRDC_MRGD_W4_4_3_ACCSET1_MASK)

#define XRDC_MRGD_W4_4_3_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_4_3_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_4_3_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_3_LKAS1_SHIFT)) & XRDC_MRGD_W4_4_3_LKAS1_MASK)

#define XRDC_MRGD_W4_4_3_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_4_3_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_4_3_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_3_ACCSET2_SHIFT)) & XRDC_MRGD_W4_4_3_ACCSET2_MASK)

#define XRDC_MRGD_W4_4_3_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_4_3_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_4_3_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_3_LKAS2_SHIFT)) & XRDC_MRGD_W4_4_3_LKAS2_MASK)

#define XRDC_MRGD_W4_4_3_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_4_3_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_4_3_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_3_LK2_SHIFT)) & XRDC_MRGD_W4_4_3_LK2_MASK)

#define XRDC_MRGD_W4_4_3_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_4_3_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_4_3_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_3_VLD_SHIFT)) & XRDC_MRGD_W4_4_3_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_4_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_4_4_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_4_4_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_4_4_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_4_4_SRTADDR_SHIFT)) & XRDC_MRGD_W0_4_4_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_4_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_4_4_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_4_4_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_4_4_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_4_4_ENDADDR_SHIFT)) & XRDC_MRGD_W1_4_4_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_4_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_4_4_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_4_4_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_4_4_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_4_D0SEL_SHIFT)) & XRDC_MRGD_W2_4_4_D0SEL_MASK)

#define XRDC_MRGD_W2_4_4_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_4_4_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_4_4_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_4_D1SEL_SHIFT)) & XRDC_MRGD_W2_4_4_D1SEL_MASK)

#define XRDC_MRGD_W2_4_4_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_4_4_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_4_4_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_4_D2SEL_SHIFT)) & XRDC_MRGD_W2_4_4_D2SEL_MASK)

#define XRDC_MRGD_W2_4_4_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_4_4_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_4_4_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_4_D3SEL_SHIFT)) & XRDC_MRGD_W2_4_4_D3SEL_MASK)

#define XRDC_MRGD_W2_4_4_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_4_4_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_4_4_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_4_D4SEL_SHIFT)) & XRDC_MRGD_W2_4_4_D4SEL_MASK)

#define XRDC_MRGD_W2_4_4_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_4_4_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_4_4_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_4_D5SEL_SHIFT)) & XRDC_MRGD_W2_4_4_D5SEL_MASK)

#define XRDC_MRGD_W2_4_4_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_4_4_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_4_4_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_4_D6SEL_SHIFT)) & XRDC_MRGD_W2_4_4_D6SEL_MASK)

#define XRDC_MRGD_W2_4_4_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_4_4_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_4_4_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_4_D7SEL_SHIFT)) & XRDC_MRGD_W2_4_4_D7SEL_MASK)

#define XRDC_MRGD_W2_4_4_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_4_4_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_4_4_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_4_EALO_SHIFT)) & XRDC_MRGD_W2_4_4_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_4_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_4_4_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_4_4_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_4_4_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_4_4_EAL_SHIFT)) & XRDC_MRGD_W3_4_4_EAL_MASK)

#define XRDC_MRGD_W3_4_4_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_4_4_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_4_4_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_4_4_CR_SHIFT)) & XRDC_MRGD_W3_4_4_CR_MASK)
/*! @} */

/*! @name MRGD_W4_4_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_4_4_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_4_4_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_4_4_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_4_ACCSET1_SHIFT)) & XRDC_MRGD_W4_4_4_ACCSET1_MASK)

#define XRDC_MRGD_W4_4_4_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_4_4_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_4_4_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_4_LKAS1_SHIFT)) & XRDC_MRGD_W4_4_4_LKAS1_MASK)

#define XRDC_MRGD_W4_4_4_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_4_4_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_4_4_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_4_ACCSET2_SHIFT)) & XRDC_MRGD_W4_4_4_ACCSET2_MASK)

#define XRDC_MRGD_W4_4_4_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_4_4_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_4_4_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_4_LKAS2_SHIFT)) & XRDC_MRGD_W4_4_4_LKAS2_MASK)

#define XRDC_MRGD_W4_4_4_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_4_4_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_4_4_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_4_LK2_SHIFT)) & XRDC_MRGD_W4_4_4_LK2_MASK)

#define XRDC_MRGD_W4_4_4_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_4_4_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_4_4_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_4_VLD_SHIFT)) & XRDC_MRGD_W4_4_4_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_4_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_4_5_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_4_5_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_4_5_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_4_5_SRTADDR_SHIFT)) & XRDC_MRGD_W0_4_5_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_4_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_4_5_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_4_5_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_4_5_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_4_5_ENDADDR_SHIFT)) & XRDC_MRGD_W1_4_5_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_4_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_4_5_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_4_5_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_4_5_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_5_D0SEL_SHIFT)) & XRDC_MRGD_W2_4_5_D0SEL_MASK)

#define XRDC_MRGD_W2_4_5_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_4_5_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_4_5_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_5_D1SEL_SHIFT)) & XRDC_MRGD_W2_4_5_D1SEL_MASK)

#define XRDC_MRGD_W2_4_5_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_4_5_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_4_5_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_5_D2SEL_SHIFT)) & XRDC_MRGD_W2_4_5_D2SEL_MASK)

#define XRDC_MRGD_W2_4_5_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_4_5_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_4_5_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_5_D3SEL_SHIFT)) & XRDC_MRGD_W2_4_5_D3SEL_MASK)

#define XRDC_MRGD_W2_4_5_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_4_5_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_4_5_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_5_D4SEL_SHIFT)) & XRDC_MRGD_W2_4_5_D4SEL_MASK)

#define XRDC_MRGD_W2_4_5_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_4_5_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_4_5_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_5_D5SEL_SHIFT)) & XRDC_MRGD_W2_4_5_D5SEL_MASK)

#define XRDC_MRGD_W2_4_5_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_4_5_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_4_5_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_5_D6SEL_SHIFT)) & XRDC_MRGD_W2_4_5_D6SEL_MASK)

#define XRDC_MRGD_W2_4_5_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_4_5_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_4_5_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_5_D7SEL_SHIFT)) & XRDC_MRGD_W2_4_5_D7SEL_MASK)

#define XRDC_MRGD_W2_4_5_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_4_5_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_4_5_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_5_EALO_SHIFT)) & XRDC_MRGD_W2_4_5_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_4_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_4_5_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_4_5_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_4_5_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_4_5_EAL_SHIFT)) & XRDC_MRGD_W3_4_5_EAL_MASK)

#define XRDC_MRGD_W3_4_5_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_4_5_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_4_5_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_4_5_CR_SHIFT)) & XRDC_MRGD_W3_4_5_CR_MASK)
/*! @} */

/*! @name MRGD_W4_4_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_4_5_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_4_5_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_4_5_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_5_ACCSET1_SHIFT)) & XRDC_MRGD_W4_4_5_ACCSET1_MASK)

#define XRDC_MRGD_W4_4_5_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_4_5_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_4_5_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_5_LKAS1_SHIFT)) & XRDC_MRGD_W4_4_5_LKAS1_MASK)

#define XRDC_MRGD_W4_4_5_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_4_5_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_4_5_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_5_ACCSET2_SHIFT)) & XRDC_MRGD_W4_4_5_ACCSET2_MASK)

#define XRDC_MRGD_W4_4_5_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_4_5_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_4_5_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_5_LKAS2_SHIFT)) & XRDC_MRGD_W4_4_5_LKAS2_MASK)

#define XRDC_MRGD_W4_4_5_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_4_5_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_4_5_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_5_LK2_SHIFT)) & XRDC_MRGD_W4_4_5_LK2_MASK)

#define XRDC_MRGD_W4_4_5_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_4_5_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_4_5_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_5_VLD_SHIFT)) & XRDC_MRGD_W4_4_5_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_4_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_4_6_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_4_6_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_4_6_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_4_6_SRTADDR_SHIFT)) & XRDC_MRGD_W0_4_6_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_4_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_4_6_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_4_6_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_4_6_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_4_6_ENDADDR_SHIFT)) & XRDC_MRGD_W1_4_6_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_4_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_4_6_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_4_6_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_4_6_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_6_D0SEL_SHIFT)) & XRDC_MRGD_W2_4_6_D0SEL_MASK)

#define XRDC_MRGD_W2_4_6_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_4_6_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_4_6_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_6_D1SEL_SHIFT)) & XRDC_MRGD_W2_4_6_D1SEL_MASK)

#define XRDC_MRGD_W2_4_6_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_4_6_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_4_6_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_6_D2SEL_SHIFT)) & XRDC_MRGD_W2_4_6_D2SEL_MASK)

#define XRDC_MRGD_W2_4_6_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_4_6_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_4_6_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_6_D3SEL_SHIFT)) & XRDC_MRGD_W2_4_6_D3SEL_MASK)

#define XRDC_MRGD_W2_4_6_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_4_6_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_4_6_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_6_D4SEL_SHIFT)) & XRDC_MRGD_W2_4_6_D4SEL_MASK)

#define XRDC_MRGD_W2_4_6_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_4_6_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_4_6_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_6_D5SEL_SHIFT)) & XRDC_MRGD_W2_4_6_D5SEL_MASK)

#define XRDC_MRGD_W2_4_6_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_4_6_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_4_6_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_6_D6SEL_SHIFT)) & XRDC_MRGD_W2_4_6_D6SEL_MASK)

#define XRDC_MRGD_W2_4_6_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_4_6_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_4_6_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_6_D7SEL_SHIFT)) & XRDC_MRGD_W2_4_6_D7SEL_MASK)

#define XRDC_MRGD_W2_4_6_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_4_6_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_4_6_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_6_EALO_SHIFT)) & XRDC_MRGD_W2_4_6_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_4_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_4_6_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_4_6_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_4_6_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_4_6_EAL_SHIFT)) & XRDC_MRGD_W3_4_6_EAL_MASK)

#define XRDC_MRGD_W3_4_6_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_4_6_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_4_6_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_4_6_CR_SHIFT)) & XRDC_MRGD_W3_4_6_CR_MASK)
/*! @} */

/*! @name MRGD_W4_4_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_4_6_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_4_6_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_4_6_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_6_ACCSET1_SHIFT)) & XRDC_MRGD_W4_4_6_ACCSET1_MASK)

#define XRDC_MRGD_W4_4_6_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_4_6_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_4_6_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_6_LKAS1_SHIFT)) & XRDC_MRGD_W4_4_6_LKAS1_MASK)

#define XRDC_MRGD_W4_4_6_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_4_6_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_4_6_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_6_ACCSET2_SHIFT)) & XRDC_MRGD_W4_4_6_ACCSET2_MASK)

#define XRDC_MRGD_W4_4_6_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_4_6_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_4_6_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_6_LKAS2_SHIFT)) & XRDC_MRGD_W4_4_6_LKAS2_MASK)

#define XRDC_MRGD_W4_4_6_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_4_6_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_4_6_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_6_LK2_SHIFT)) & XRDC_MRGD_W4_4_6_LK2_MASK)

#define XRDC_MRGD_W4_4_6_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_4_6_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_4_6_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_6_VLD_SHIFT)) & XRDC_MRGD_W4_4_6_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_4_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_4_7_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_4_7_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_4_7_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_4_7_SRTADDR_SHIFT)) & XRDC_MRGD_W0_4_7_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_4_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_4_7_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_4_7_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_4_7_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_4_7_ENDADDR_SHIFT)) & XRDC_MRGD_W1_4_7_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_4_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_4_7_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_4_7_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_4_7_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_7_D0SEL_SHIFT)) & XRDC_MRGD_W2_4_7_D0SEL_MASK)

#define XRDC_MRGD_W2_4_7_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_4_7_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_4_7_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_7_D1SEL_SHIFT)) & XRDC_MRGD_W2_4_7_D1SEL_MASK)

#define XRDC_MRGD_W2_4_7_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_4_7_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_4_7_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_7_D2SEL_SHIFT)) & XRDC_MRGD_W2_4_7_D2SEL_MASK)

#define XRDC_MRGD_W2_4_7_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_4_7_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_4_7_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_7_D3SEL_SHIFT)) & XRDC_MRGD_W2_4_7_D3SEL_MASK)

#define XRDC_MRGD_W2_4_7_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_4_7_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_4_7_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_7_D4SEL_SHIFT)) & XRDC_MRGD_W2_4_7_D4SEL_MASK)

#define XRDC_MRGD_W2_4_7_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_4_7_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_4_7_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_7_D5SEL_SHIFT)) & XRDC_MRGD_W2_4_7_D5SEL_MASK)

#define XRDC_MRGD_W2_4_7_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_4_7_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_4_7_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_7_D6SEL_SHIFT)) & XRDC_MRGD_W2_4_7_D6SEL_MASK)

#define XRDC_MRGD_W2_4_7_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_4_7_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_4_7_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_7_D7SEL_SHIFT)) & XRDC_MRGD_W2_4_7_D7SEL_MASK)

#define XRDC_MRGD_W2_4_7_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_4_7_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_4_7_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_4_7_EALO_SHIFT)) & XRDC_MRGD_W2_4_7_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_4_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_4_7_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_4_7_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_4_7_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_4_7_EAL_SHIFT)) & XRDC_MRGD_W3_4_7_EAL_MASK)

#define XRDC_MRGD_W3_4_7_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_4_7_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_4_7_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_4_7_CR_SHIFT)) & XRDC_MRGD_W3_4_7_CR_MASK)
/*! @} */

/*! @name MRGD_W4_4_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_4_7_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_4_7_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_4_7_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_7_ACCSET1_SHIFT)) & XRDC_MRGD_W4_4_7_ACCSET1_MASK)

#define XRDC_MRGD_W4_4_7_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_4_7_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_4_7_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_7_LKAS1_SHIFT)) & XRDC_MRGD_W4_4_7_LKAS1_MASK)

#define XRDC_MRGD_W4_4_7_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_4_7_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_4_7_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_7_ACCSET2_SHIFT)) & XRDC_MRGD_W4_4_7_ACCSET2_MASK)

#define XRDC_MRGD_W4_4_7_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_4_7_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_4_7_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_7_LKAS2_SHIFT)) & XRDC_MRGD_W4_4_7_LKAS2_MASK)

#define XRDC_MRGD_W4_4_7_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_4_7_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_4_7_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_7_LK2_SHIFT)) & XRDC_MRGD_W4_4_7_LK2_MASK)

#define XRDC_MRGD_W4_4_7_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_4_7_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_4_7_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_4_7_VLD_SHIFT)) & XRDC_MRGD_W4_4_7_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_5_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_5_0_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_5_0_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_5_0_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_5_0_SRTADDR_SHIFT)) & XRDC_MRGD_W0_5_0_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_5_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_5_0_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_5_0_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_5_0_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_5_0_ENDADDR_SHIFT)) & XRDC_MRGD_W1_5_0_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_5_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_5_0_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_5_0_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_5_0_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_0_D0SEL_SHIFT)) & XRDC_MRGD_W2_5_0_D0SEL_MASK)

#define XRDC_MRGD_W2_5_0_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_5_0_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_5_0_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_0_D1SEL_SHIFT)) & XRDC_MRGD_W2_5_0_D1SEL_MASK)

#define XRDC_MRGD_W2_5_0_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_5_0_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_5_0_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_0_D2SEL_SHIFT)) & XRDC_MRGD_W2_5_0_D2SEL_MASK)

#define XRDC_MRGD_W2_5_0_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_5_0_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_5_0_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_0_D3SEL_SHIFT)) & XRDC_MRGD_W2_5_0_D3SEL_MASK)

#define XRDC_MRGD_W2_5_0_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_5_0_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_5_0_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_0_D4SEL_SHIFT)) & XRDC_MRGD_W2_5_0_D4SEL_MASK)

#define XRDC_MRGD_W2_5_0_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_5_0_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_5_0_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_0_D5SEL_SHIFT)) & XRDC_MRGD_W2_5_0_D5SEL_MASK)

#define XRDC_MRGD_W2_5_0_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_5_0_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_5_0_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_0_D6SEL_SHIFT)) & XRDC_MRGD_W2_5_0_D6SEL_MASK)

#define XRDC_MRGD_W2_5_0_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_5_0_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_5_0_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_0_D7SEL_SHIFT)) & XRDC_MRGD_W2_5_0_D7SEL_MASK)

#define XRDC_MRGD_W2_5_0_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_5_0_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_5_0_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_0_EALO_SHIFT)) & XRDC_MRGD_W2_5_0_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_5_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_5_0_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_5_0_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_5_0_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_5_0_EAL_SHIFT)) & XRDC_MRGD_W3_5_0_EAL_MASK)

#define XRDC_MRGD_W3_5_0_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_5_0_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_5_0_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_5_0_CR_SHIFT)) & XRDC_MRGD_W3_5_0_CR_MASK)
/*! @} */

/*! @name MRGD_W4_5_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_5_0_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_5_0_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_5_0_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_0_ACCSET1_SHIFT)) & XRDC_MRGD_W4_5_0_ACCSET1_MASK)

#define XRDC_MRGD_W4_5_0_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_5_0_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_5_0_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_0_LKAS1_SHIFT)) & XRDC_MRGD_W4_5_0_LKAS1_MASK)

#define XRDC_MRGD_W4_5_0_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_5_0_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_5_0_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_0_ACCSET2_SHIFT)) & XRDC_MRGD_W4_5_0_ACCSET2_MASK)

#define XRDC_MRGD_W4_5_0_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_5_0_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_5_0_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_0_LKAS2_SHIFT)) & XRDC_MRGD_W4_5_0_LKAS2_MASK)

#define XRDC_MRGD_W4_5_0_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_5_0_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_5_0_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_0_LK2_SHIFT)) & XRDC_MRGD_W4_5_0_LK2_MASK)

#define XRDC_MRGD_W4_5_0_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_5_0_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_5_0_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_0_VLD_SHIFT)) & XRDC_MRGD_W4_5_0_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_5_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_5_1_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_5_1_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_5_1_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_5_1_SRTADDR_SHIFT)) & XRDC_MRGD_W0_5_1_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_5_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_5_1_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_5_1_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_5_1_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_5_1_ENDADDR_SHIFT)) & XRDC_MRGD_W1_5_1_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_5_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_5_1_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_5_1_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_5_1_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_1_D0SEL_SHIFT)) & XRDC_MRGD_W2_5_1_D0SEL_MASK)

#define XRDC_MRGD_W2_5_1_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_5_1_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_5_1_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_1_D1SEL_SHIFT)) & XRDC_MRGD_W2_5_1_D1SEL_MASK)

#define XRDC_MRGD_W2_5_1_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_5_1_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_5_1_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_1_D2SEL_SHIFT)) & XRDC_MRGD_W2_5_1_D2SEL_MASK)

#define XRDC_MRGD_W2_5_1_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_5_1_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_5_1_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_1_D3SEL_SHIFT)) & XRDC_MRGD_W2_5_1_D3SEL_MASK)

#define XRDC_MRGD_W2_5_1_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_5_1_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_5_1_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_1_D4SEL_SHIFT)) & XRDC_MRGD_W2_5_1_D4SEL_MASK)

#define XRDC_MRGD_W2_5_1_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_5_1_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_5_1_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_1_D5SEL_SHIFT)) & XRDC_MRGD_W2_5_1_D5SEL_MASK)

#define XRDC_MRGD_W2_5_1_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_5_1_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_5_1_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_1_D6SEL_SHIFT)) & XRDC_MRGD_W2_5_1_D6SEL_MASK)

#define XRDC_MRGD_W2_5_1_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_5_1_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_5_1_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_1_D7SEL_SHIFT)) & XRDC_MRGD_W2_5_1_D7SEL_MASK)

#define XRDC_MRGD_W2_5_1_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_5_1_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_5_1_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_1_EALO_SHIFT)) & XRDC_MRGD_W2_5_1_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_5_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_5_1_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_5_1_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_5_1_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_5_1_EAL_SHIFT)) & XRDC_MRGD_W3_5_1_EAL_MASK)

#define XRDC_MRGD_W3_5_1_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_5_1_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_5_1_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_5_1_CR_SHIFT)) & XRDC_MRGD_W3_5_1_CR_MASK)
/*! @} */

/*! @name MRGD_W4_5_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_5_1_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_5_1_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_5_1_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_1_ACCSET1_SHIFT)) & XRDC_MRGD_W4_5_1_ACCSET1_MASK)

#define XRDC_MRGD_W4_5_1_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_5_1_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_5_1_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_1_LKAS1_SHIFT)) & XRDC_MRGD_W4_5_1_LKAS1_MASK)

#define XRDC_MRGD_W4_5_1_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_5_1_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_5_1_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_1_ACCSET2_SHIFT)) & XRDC_MRGD_W4_5_1_ACCSET2_MASK)

#define XRDC_MRGD_W4_5_1_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_5_1_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_5_1_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_1_LKAS2_SHIFT)) & XRDC_MRGD_W4_5_1_LKAS2_MASK)

#define XRDC_MRGD_W4_5_1_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_5_1_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_5_1_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_1_LK2_SHIFT)) & XRDC_MRGD_W4_5_1_LK2_MASK)

#define XRDC_MRGD_W4_5_1_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_5_1_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_5_1_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_1_VLD_SHIFT)) & XRDC_MRGD_W4_5_1_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_5_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_5_2_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_5_2_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_5_2_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_5_2_SRTADDR_SHIFT)) & XRDC_MRGD_W0_5_2_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_5_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_5_2_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_5_2_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_5_2_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_5_2_ENDADDR_SHIFT)) & XRDC_MRGD_W1_5_2_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_5_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_5_2_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_5_2_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_5_2_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_2_D0SEL_SHIFT)) & XRDC_MRGD_W2_5_2_D0SEL_MASK)

#define XRDC_MRGD_W2_5_2_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_5_2_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_5_2_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_2_D1SEL_SHIFT)) & XRDC_MRGD_W2_5_2_D1SEL_MASK)

#define XRDC_MRGD_W2_5_2_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_5_2_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_5_2_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_2_D2SEL_SHIFT)) & XRDC_MRGD_W2_5_2_D2SEL_MASK)

#define XRDC_MRGD_W2_5_2_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_5_2_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_5_2_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_2_D3SEL_SHIFT)) & XRDC_MRGD_W2_5_2_D3SEL_MASK)

#define XRDC_MRGD_W2_5_2_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_5_2_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_5_2_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_2_D4SEL_SHIFT)) & XRDC_MRGD_W2_5_2_D4SEL_MASK)

#define XRDC_MRGD_W2_5_2_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_5_2_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_5_2_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_2_D5SEL_SHIFT)) & XRDC_MRGD_W2_5_2_D5SEL_MASK)

#define XRDC_MRGD_W2_5_2_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_5_2_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_5_2_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_2_D6SEL_SHIFT)) & XRDC_MRGD_W2_5_2_D6SEL_MASK)

#define XRDC_MRGD_W2_5_2_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_5_2_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_5_2_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_2_D7SEL_SHIFT)) & XRDC_MRGD_W2_5_2_D7SEL_MASK)

#define XRDC_MRGD_W2_5_2_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_5_2_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_5_2_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_2_EALO_SHIFT)) & XRDC_MRGD_W2_5_2_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_5_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_5_2_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_5_2_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_5_2_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_5_2_EAL_SHIFT)) & XRDC_MRGD_W3_5_2_EAL_MASK)

#define XRDC_MRGD_W3_5_2_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_5_2_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_5_2_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_5_2_CR_SHIFT)) & XRDC_MRGD_W3_5_2_CR_MASK)
/*! @} */

/*! @name MRGD_W4_5_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_5_2_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_5_2_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_5_2_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_2_ACCSET1_SHIFT)) & XRDC_MRGD_W4_5_2_ACCSET1_MASK)

#define XRDC_MRGD_W4_5_2_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_5_2_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_5_2_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_2_LKAS1_SHIFT)) & XRDC_MRGD_W4_5_2_LKAS1_MASK)

#define XRDC_MRGD_W4_5_2_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_5_2_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_5_2_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_2_ACCSET2_SHIFT)) & XRDC_MRGD_W4_5_2_ACCSET2_MASK)

#define XRDC_MRGD_W4_5_2_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_5_2_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_5_2_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_2_LKAS2_SHIFT)) & XRDC_MRGD_W4_5_2_LKAS2_MASK)

#define XRDC_MRGD_W4_5_2_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_5_2_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_5_2_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_2_LK2_SHIFT)) & XRDC_MRGD_W4_5_2_LK2_MASK)

#define XRDC_MRGD_W4_5_2_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_5_2_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_5_2_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_2_VLD_SHIFT)) & XRDC_MRGD_W4_5_2_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_5_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_5_3_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_5_3_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_5_3_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_5_3_SRTADDR_SHIFT)) & XRDC_MRGD_W0_5_3_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_5_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_5_3_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_5_3_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_5_3_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_5_3_ENDADDR_SHIFT)) & XRDC_MRGD_W1_5_3_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_5_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_5_3_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_5_3_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_5_3_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_3_D0SEL_SHIFT)) & XRDC_MRGD_W2_5_3_D0SEL_MASK)

#define XRDC_MRGD_W2_5_3_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_5_3_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_5_3_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_3_D1SEL_SHIFT)) & XRDC_MRGD_W2_5_3_D1SEL_MASK)

#define XRDC_MRGD_W2_5_3_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_5_3_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_5_3_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_3_D2SEL_SHIFT)) & XRDC_MRGD_W2_5_3_D2SEL_MASK)

#define XRDC_MRGD_W2_5_3_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_5_3_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_5_3_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_3_D3SEL_SHIFT)) & XRDC_MRGD_W2_5_3_D3SEL_MASK)

#define XRDC_MRGD_W2_5_3_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_5_3_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_5_3_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_3_D4SEL_SHIFT)) & XRDC_MRGD_W2_5_3_D4SEL_MASK)

#define XRDC_MRGD_W2_5_3_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_5_3_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_5_3_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_3_D5SEL_SHIFT)) & XRDC_MRGD_W2_5_3_D5SEL_MASK)

#define XRDC_MRGD_W2_5_3_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_5_3_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_5_3_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_3_D6SEL_SHIFT)) & XRDC_MRGD_W2_5_3_D6SEL_MASK)

#define XRDC_MRGD_W2_5_3_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_5_3_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_5_3_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_3_D7SEL_SHIFT)) & XRDC_MRGD_W2_5_3_D7SEL_MASK)

#define XRDC_MRGD_W2_5_3_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_5_3_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_5_3_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_3_EALO_SHIFT)) & XRDC_MRGD_W2_5_3_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_5_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_5_3_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_5_3_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_5_3_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_5_3_EAL_SHIFT)) & XRDC_MRGD_W3_5_3_EAL_MASK)

#define XRDC_MRGD_W3_5_3_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_5_3_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_5_3_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_5_3_CR_SHIFT)) & XRDC_MRGD_W3_5_3_CR_MASK)
/*! @} */

/*! @name MRGD_W4_5_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_5_3_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_5_3_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_5_3_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_3_ACCSET1_SHIFT)) & XRDC_MRGD_W4_5_3_ACCSET1_MASK)

#define XRDC_MRGD_W4_5_3_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_5_3_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_5_3_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_3_LKAS1_SHIFT)) & XRDC_MRGD_W4_5_3_LKAS1_MASK)

#define XRDC_MRGD_W4_5_3_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_5_3_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_5_3_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_3_ACCSET2_SHIFT)) & XRDC_MRGD_W4_5_3_ACCSET2_MASK)

#define XRDC_MRGD_W4_5_3_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_5_3_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_5_3_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_3_LKAS2_SHIFT)) & XRDC_MRGD_W4_5_3_LKAS2_MASK)

#define XRDC_MRGD_W4_5_3_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_5_3_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_5_3_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_3_LK2_SHIFT)) & XRDC_MRGD_W4_5_3_LK2_MASK)

#define XRDC_MRGD_W4_5_3_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_5_3_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_5_3_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_3_VLD_SHIFT)) & XRDC_MRGD_W4_5_3_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_5_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_5_4_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_5_4_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_5_4_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_5_4_SRTADDR_SHIFT)) & XRDC_MRGD_W0_5_4_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_5_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_5_4_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_5_4_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_5_4_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_5_4_ENDADDR_SHIFT)) & XRDC_MRGD_W1_5_4_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_5_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_5_4_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_5_4_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_5_4_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_4_D0SEL_SHIFT)) & XRDC_MRGD_W2_5_4_D0SEL_MASK)

#define XRDC_MRGD_W2_5_4_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_5_4_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_5_4_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_4_D1SEL_SHIFT)) & XRDC_MRGD_W2_5_4_D1SEL_MASK)

#define XRDC_MRGD_W2_5_4_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_5_4_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_5_4_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_4_D2SEL_SHIFT)) & XRDC_MRGD_W2_5_4_D2SEL_MASK)

#define XRDC_MRGD_W2_5_4_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_5_4_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_5_4_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_4_D3SEL_SHIFT)) & XRDC_MRGD_W2_5_4_D3SEL_MASK)

#define XRDC_MRGD_W2_5_4_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_5_4_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_5_4_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_4_D4SEL_SHIFT)) & XRDC_MRGD_W2_5_4_D4SEL_MASK)

#define XRDC_MRGD_W2_5_4_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_5_4_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_5_4_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_4_D5SEL_SHIFT)) & XRDC_MRGD_W2_5_4_D5SEL_MASK)

#define XRDC_MRGD_W2_5_4_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_5_4_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_5_4_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_4_D6SEL_SHIFT)) & XRDC_MRGD_W2_5_4_D6SEL_MASK)

#define XRDC_MRGD_W2_5_4_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_5_4_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_5_4_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_4_D7SEL_SHIFT)) & XRDC_MRGD_W2_5_4_D7SEL_MASK)

#define XRDC_MRGD_W2_5_4_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_5_4_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_5_4_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_4_EALO_SHIFT)) & XRDC_MRGD_W2_5_4_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_5_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_5_4_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_5_4_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_5_4_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_5_4_EAL_SHIFT)) & XRDC_MRGD_W3_5_4_EAL_MASK)

#define XRDC_MRGD_W3_5_4_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_5_4_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_5_4_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_5_4_CR_SHIFT)) & XRDC_MRGD_W3_5_4_CR_MASK)
/*! @} */

/*! @name MRGD_W4_5_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_5_4_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_5_4_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_5_4_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_4_ACCSET1_SHIFT)) & XRDC_MRGD_W4_5_4_ACCSET1_MASK)

#define XRDC_MRGD_W4_5_4_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_5_4_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_5_4_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_4_LKAS1_SHIFT)) & XRDC_MRGD_W4_5_4_LKAS1_MASK)

#define XRDC_MRGD_W4_5_4_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_5_4_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_5_4_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_4_ACCSET2_SHIFT)) & XRDC_MRGD_W4_5_4_ACCSET2_MASK)

#define XRDC_MRGD_W4_5_4_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_5_4_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_5_4_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_4_LKAS2_SHIFT)) & XRDC_MRGD_W4_5_4_LKAS2_MASK)

#define XRDC_MRGD_W4_5_4_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_5_4_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_5_4_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_4_LK2_SHIFT)) & XRDC_MRGD_W4_5_4_LK2_MASK)

#define XRDC_MRGD_W4_5_4_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_5_4_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_5_4_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_4_VLD_SHIFT)) & XRDC_MRGD_W4_5_4_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_5_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_5_5_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_5_5_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_5_5_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_5_5_SRTADDR_SHIFT)) & XRDC_MRGD_W0_5_5_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_5_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_5_5_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_5_5_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_5_5_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_5_5_ENDADDR_SHIFT)) & XRDC_MRGD_W1_5_5_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_5_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_5_5_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_5_5_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_5_5_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_5_D0SEL_SHIFT)) & XRDC_MRGD_W2_5_5_D0SEL_MASK)

#define XRDC_MRGD_W2_5_5_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_5_5_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_5_5_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_5_D1SEL_SHIFT)) & XRDC_MRGD_W2_5_5_D1SEL_MASK)

#define XRDC_MRGD_W2_5_5_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_5_5_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_5_5_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_5_D2SEL_SHIFT)) & XRDC_MRGD_W2_5_5_D2SEL_MASK)

#define XRDC_MRGD_W2_5_5_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_5_5_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_5_5_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_5_D3SEL_SHIFT)) & XRDC_MRGD_W2_5_5_D3SEL_MASK)

#define XRDC_MRGD_W2_5_5_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_5_5_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_5_5_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_5_D4SEL_SHIFT)) & XRDC_MRGD_W2_5_5_D4SEL_MASK)

#define XRDC_MRGD_W2_5_5_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_5_5_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_5_5_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_5_D5SEL_SHIFT)) & XRDC_MRGD_W2_5_5_D5SEL_MASK)

#define XRDC_MRGD_W2_5_5_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_5_5_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_5_5_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_5_D6SEL_SHIFT)) & XRDC_MRGD_W2_5_5_D6SEL_MASK)

#define XRDC_MRGD_W2_5_5_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_5_5_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_5_5_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_5_D7SEL_SHIFT)) & XRDC_MRGD_W2_5_5_D7SEL_MASK)

#define XRDC_MRGD_W2_5_5_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_5_5_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_5_5_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_5_EALO_SHIFT)) & XRDC_MRGD_W2_5_5_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_5_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_5_5_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_5_5_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_5_5_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_5_5_EAL_SHIFT)) & XRDC_MRGD_W3_5_5_EAL_MASK)

#define XRDC_MRGD_W3_5_5_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_5_5_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_5_5_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_5_5_CR_SHIFT)) & XRDC_MRGD_W3_5_5_CR_MASK)
/*! @} */

/*! @name MRGD_W4_5_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_5_5_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_5_5_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_5_5_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_5_ACCSET1_SHIFT)) & XRDC_MRGD_W4_5_5_ACCSET1_MASK)

#define XRDC_MRGD_W4_5_5_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_5_5_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_5_5_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_5_LKAS1_SHIFT)) & XRDC_MRGD_W4_5_5_LKAS1_MASK)

#define XRDC_MRGD_W4_5_5_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_5_5_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_5_5_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_5_ACCSET2_SHIFT)) & XRDC_MRGD_W4_5_5_ACCSET2_MASK)

#define XRDC_MRGD_W4_5_5_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_5_5_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_5_5_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_5_LKAS2_SHIFT)) & XRDC_MRGD_W4_5_5_LKAS2_MASK)

#define XRDC_MRGD_W4_5_5_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_5_5_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_5_5_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_5_LK2_SHIFT)) & XRDC_MRGD_W4_5_5_LK2_MASK)

#define XRDC_MRGD_W4_5_5_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_5_5_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_5_5_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_5_VLD_SHIFT)) & XRDC_MRGD_W4_5_5_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_5_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_5_6_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_5_6_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_5_6_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_5_6_SRTADDR_SHIFT)) & XRDC_MRGD_W0_5_6_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_5_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_5_6_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_5_6_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_5_6_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_5_6_ENDADDR_SHIFT)) & XRDC_MRGD_W1_5_6_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_5_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_5_6_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_5_6_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_5_6_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_6_D0SEL_SHIFT)) & XRDC_MRGD_W2_5_6_D0SEL_MASK)

#define XRDC_MRGD_W2_5_6_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_5_6_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_5_6_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_6_D1SEL_SHIFT)) & XRDC_MRGD_W2_5_6_D1SEL_MASK)

#define XRDC_MRGD_W2_5_6_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_5_6_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_5_6_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_6_D2SEL_SHIFT)) & XRDC_MRGD_W2_5_6_D2SEL_MASK)

#define XRDC_MRGD_W2_5_6_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_5_6_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_5_6_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_6_D3SEL_SHIFT)) & XRDC_MRGD_W2_5_6_D3SEL_MASK)

#define XRDC_MRGD_W2_5_6_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_5_6_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_5_6_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_6_D4SEL_SHIFT)) & XRDC_MRGD_W2_5_6_D4SEL_MASK)

#define XRDC_MRGD_W2_5_6_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_5_6_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_5_6_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_6_D5SEL_SHIFT)) & XRDC_MRGD_W2_5_6_D5SEL_MASK)

#define XRDC_MRGD_W2_5_6_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_5_6_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_5_6_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_6_D6SEL_SHIFT)) & XRDC_MRGD_W2_5_6_D6SEL_MASK)

#define XRDC_MRGD_W2_5_6_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_5_6_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_5_6_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_6_D7SEL_SHIFT)) & XRDC_MRGD_W2_5_6_D7SEL_MASK)

#define XRDC_MRGD_W2_5_6_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_5_6_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_5_6_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_6_EALO_SHIFT)) & XRDC_MRGD_W2_5_6_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_5_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_5_6_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_5_6_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_5_6_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_5_6_EAL_SHIFT)) & XRDC_MRGD_W3_5_6_EAL_MASK)

#define XRDC_MRGD_W3_5_6_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_5_6_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_5_6_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_5_6_CR_SHIFT)) & XRDC_MRGD_W3_5_6_CR_MASK)
/*! @} */

/*! @name MRGD_W4_5_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_5_6_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_5_6_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_5_6_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_6_ACCSET1_SHIFT)) & XRDC_MRGD_W4_5_6_ACCSET1_MASK)

#define XRDC_MRGD_W4_5_6_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_5_6_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_5_6_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_6_LKAS1_SHIFT)) & XRDC_MRGD_W4_5_6_LKAS1_MASK)

#define XRDC_MRGD_W4_5_6_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_5_6_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_5_6_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_6_ACCSET2_SHIFT)) & XRDC_MRGD_W4_5_6_ACCSET2_MASK)

#define XRDC_MRGD_W4_5_6_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_5_6_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_5_6_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_6_LKAS2_SHIFT)) & XRDC_MRGD_W4_5_6_LKAS2_MASK)

#define XRDC_MRGD_W4_5_6_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_5_6_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_5_6_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_6_LK2_SHIFT)) & XRDC_MRGD_W4_5_6_LK2_MASK)

#define XRDC_MRGD_W4_5_6_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_5_6_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_5_6_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_6_VLD_SHIFT)) & XRDC_MRGD_W4_5_6_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_5_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_5_7_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_5_7_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_5_7_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_5_7_SRTADDR_SHIFT)) & XRDC_MRGD_W0_5_7_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_5_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_5_7_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_5_7_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_5_7_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_5_7_ENDADDR_SHIFT)) & XRDC_MRGD_W1_5_7_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_5_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_5_7_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_5_7_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_5_7_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_7_D0SEL_SHIFT)) & XRDC_MRGD_W2_5_7_D0SEL_MASK)

#define XRDC_MRGD_W2_5_7_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_5_7_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_5_7_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_7_D1SEL_SHIFT)) & XRDC_MRGD_W2_5_7_D1SEL_MASK)

#define XRDC_MRGD_W2_5_7_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_5_7_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_5_7_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_7_D2SEL_SHIFT)) & XRDC_MRGD_W2_5_7_D2SEL_MASK)

#define XRDC_MRGD_W2_5_7_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_5_7_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_5_7_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_7_D3SEL_SHIFT)) & XRDC_MRGD_W2_5_7_D3SEL_MASK)

#define XRDC_MRGD_W2_5_7_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_5_7_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_5_7_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_7_D4SEL_SHIFT)) & XRDC_MRGD_W2_5_7_D4SEL_MASK)

#define XRDC_MRGD_W2_5_7_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_5_7_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_5_7_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_7_D5SEL_SHIFT)) & XRDC_MRGD_W2_5_7_D5SEL_MASK)

#define XRDC_MRGD_W2_5_7_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_5_7_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_5_7_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_7_D6SEL_SHIFT)) & XRDC_MRGD_W2_5_7_D6SEL_MASK)

#define XRDC_MRGD_W2_5_7_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_5_7_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_5_7_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_7_D7SEL_SHIFT)) & XRDC_MRGD_W2_5_7_D7SEL_MASK)

#define XRDC_MRGD_W2_5_7_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_5_7_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_5_7_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_5_7_EALO_SHIFT)) & XRDC_MRGD_W2_5_7_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_5_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_5_7_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_5_7_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_5_7_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_5_7_EAL_SHIFT)) & XRDC_MRGD_W3_5_7_EAL_MASK)

#define XRDC_MRGD_W3_5_7_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_5_7_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_5_7_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_5_7_CR_SHIFT)) & XRDC_MRGD_W3_5_7_CR_MASK)
/*! @} */

/*! @name MRGD_W4_5_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_5_7_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_5_7_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_5_7_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_7_ACCSET1_SHIFT)) & XRDC_MRGD_W4_5_7_ACCSET1_MASK)

#define XRDC_MRGD_W4_5_7_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_5_7_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_5_7_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_7_LKAS1_SHIFT)) & XRDC_MRGD_W4_5_7_LKAS1_MASK)

#define XRDC_MRGD_W4_5_7_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_5_7_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_5_7_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_7_ACCSET2_SHIFT)) & XRDC_MRGD_W4_5_7_ACCSET2_MASK)

#define XRDC_MRGD_W4_5_7_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_5_7_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_5_7_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_7_LKAS2_SHIFT)) & XRDC_MRGD_W4_5_7_LKAS2_MASK)

#define XRDC_MRGD_W4_5_7_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_5_7_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_5_7_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_7_LK2_SHIFT)) & XRDC_MRGD_W4_5_7_LK2_MASK)

#define XRDC_MRGD_W4_5_7_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_5_7_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_5_7_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_5_7_VLD_SHIFT)) & XRDC_MRGD_W4_5_7_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_6_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_6_0_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_6_0_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_6_0_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_6_0_SRTADDR_SHIFT)) & XRDC_MRGD_W0_6_0_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_6_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_6_0_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_6_0_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_6_0_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_6_0_ENDADDR_SHIFT)) & XRDC_MRGD_W1_6_0_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_6_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_6_0_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_6_0_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_6_0_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_0_D0SEL_SHIFT)) & XRDC_MRGD_W2_6_0_D0SEL_MASK)

#define XRDC_MRGD_W2_6_0_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_6_0_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_6_0_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_0_D1SEL_SHIFT)) & XRDC_MRGD_W2_6_0_D1SEL_MASK)

#define XRDC_MRGD_W2_6_0_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_6_0_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_6_0_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_0_D2SEL_SHIFT)) & XRDC_MRGD_W2_6_0_D2SEL_MASK)

#define XRDC_MRGD_W2_6_0_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_6_0_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_6_0_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_0_D3SEL_SHIFT)) & XRDC_MRGD_W2_6_0_D3SEL_MASK)

#define XRDC_MRGD_W2_6_0_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_6_0_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_6_0_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_0_D4SEL_SHIFT)) & XRDC_MRGD_W2_6_0_D4SEL_MASK)

#define XRDC_MRGD_W2_6_0_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_6_0_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_6_0_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_0_D5SEL_SHIFT)) & XRDC_MRGD_W2_6_0_D5SEL_MASK)

#define XRDC_MRGD_W2_6_0_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_6_0_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_6_0_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_0_D6SEL_SHIFT)) & XRDC_MRGD_W2_6_0_D6SEL_MASK)

#define XRDC_MRGD_W2_6_0_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_6_0_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_6_0_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_0_D7SEL_SHIFT)) & XRDC_MRGD_W2_6_0_D7SEL_MASK)

#define XRDC_MRGD_W2_6_0_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_6_0_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_6_0_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_0_EALO_SHIFT)) & XRDC_MRGD_W2_6_0_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_6_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_6_0_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_6_0_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_6_0_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_6_0_EAL_SHIFT)) & XRDC_MRGD_W3_6_0_EAL_MASK)

#define XRDC_MRGD_W3_6_0_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_6_0_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_6_0_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_6_0_CR_SHIFT)) & XRDC_MRGD_W3_6_0_CR_MASK)
/*! @} */

/*! @name MRGD_W4_6_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_6_0_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_6_0_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_6_0_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_0_ACCSET1_SHIFT)) & XRDC_MRGD_W4_6_0_ACCSET1_MASK)

#define XRDC_MRGD_W4_6_0_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_6_0_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_6_0_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_0_LKAS1_SHIFT)) & XRDC_MRGD_W4_6_0_LKAS1_MASK)

#define XRDC_MRGD_W4_6_0_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_6_0_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_6_0_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_0_ACCSET2_SHIFT)) & XRDC_MRGD_W4_6_0_ACCSET2_MASK)

#define XRDC_MRGD_W4_6_0_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_6_0_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_6_0_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_0_LKAS2_SHIFT)) & XRDC_MRGD_W4_6_0_LKAS2_MASK)

#define XRDC_MRGD_W4_6_0_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_6_0_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_6_0_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_0_LK2_SHIFT)) & XRDC_MRGD_W4_6_0_LK2_MASK)

#define XRDC_MRGD_W4_6_0_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_6_0_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_6_0_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_0_VLD_SHIFT)) & XRDC_MRGD_W4_6_0_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_6_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_6_1_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_6_1_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_6_1_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_6_1_SRTADDR_SHIFT)) & XRDC_MRGD_W0_6_1_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_6_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_6_1_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_6_1_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_6_1_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_6_1_ENDADDR_SHIFT)) & XRDC_MRGD_W1_6_1_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_6_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_6_1_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_6_1_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_6_1_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_1_D0SEL_SHIFT)) & XRDC_MRGD_W2_6_1_D0SEL_MASK)

#define XRDC_MRGD_W2_6_1_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_6_1_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_6_1_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_1_D1SEL_SHIFT)) & XRDC_MRGD_W2_6_1_D1SEL_MASK)

#define XRDC_MRGD_W2_6_1_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_6_1_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_6_1_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_1_D2SEL_SHIFT)) & XRDC_MRGD_W2_6_1_D2SEL_MASK)

#define XRDC_MRGD_W2_6_1_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_6_1_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_6_1_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_1_D3SEL_SHIFT)) & XRDC_MRGD_W2_6_1_D3SEL_MASK)

#define XRDC_MRGD_W2_6_1_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_6_1_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_6_1_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_1_D4SEL_SHIFT)) & XRDC_MRGD_W2_6_1_D4SEL_MASK)

#define XRDC_MRGD_W2_6_1_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_6_1_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_6_1_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_1_D5SEL_SHIFT)) & XRDC_MRGD_W2_6_1_D5SEL_MASK)

#define XRDC_MRGD_W2_6_1_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_6_1_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_6_1_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_1_D6SEL_SHIFT)) & XRDC_MRGD_W2_6_1_D6SEL_MASK)

#define XRDC_MRGD_W2_6_1_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_6_1_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_6_1_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_1_D7SEL_SHIFT)) & XRDC_MRGD_W2_6_1_D7SEL_MASK)

#define XRDC_MRGD_W2_6_1_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_6_1_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_6_1_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_1_EALO_SHIFT)) & XRDC_MRGD_W2_6_1_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_6_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_6_1_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_6_1_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_6_1_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_6_1_EAL_SHIFT)) & XRDC_MRGD_W3_6_1_EAL_MASK)

#define XRDC_MRGD_W3_6_1_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_6_1_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_6_1_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_6_1_CR_SHIFT)) & XRDC_MRGD_W3_6_1_CR_MASK)
/*! @} */

/*! @name MRGD_W4_6_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_6_1_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_6_1_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_6_1_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_1_ACCSET1_SHIFT)) & XRDC_MRGD_W4_6_1_ACCSET1_MASK)

#define XRDC_MRGD_W4_6_1_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_6_1_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_6_1_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_1_LKAS1_SHIFT)) & XRDC_MRGD_W4_6_1_LKAS1_MASK)

#define XRDC_MRGD_W4_6_1_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_6_1_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_6_1_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_1_ACCSET2_SHIFT)) & XRDC_MRGD_W4_6_1_ACCSET2_MASK)

#define XRDC_MRGD_W4_6_1_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_6_1_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_6_1_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_1_LKAS2_SHIFT)) & XRDC_MRGD_W4_6_1_LKAS2_MASK)

#define XRDC_MRGD_W4_6_1_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_6_1_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_6_1_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_1_LK2_SHIFT)) & XRDC_MRGD_W4_6_1_LK2_MASK)

#define XRDC_MRGD_W4_6_1_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_6_1_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_6_1_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_1_VLD_SHIFT)) & XRDC_MRGD_W4_6_1_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_6_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_6_2_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_6_2_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_6_2_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_6_2_SRTADDR_SHIFT)) & XRDC_MRGD_W0_6_2_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_6_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_6_2_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_6_2_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_6_2_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_6_2_ENDADDR_SHIFT)) & XRDC_MRGD_W1_6_2_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_6_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_6_2_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_6_2_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_6_2_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_2_D0SEL_SHIFT)) & XRDC_MRGD_W2_6_2_D0SEL_MASK)

#define XRDC_MRGD_W2_6_2_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_6_2_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_6_2_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_2_D1SEL_SHIFT)) & XRDC_MRGD_W2_6_2_D1SEL_MASK)

#define XRDC_MRGD_W2_6_2_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_6_2_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_6_2_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_2_D2SEL_SHIFT)) & XRDC_MRGD_W2_6_2_D2SEL_MASK)

#define XRDC_MRGD_W2_6_2_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_6_2_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_6_2_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_2_D3SEL_SHIFT)) & XRDC_MRGD_W2_6_2_D3SEL_MASK)

#define XRDC_MRGD_W2_6_2_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_6_2_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_6_2_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_2_D4SEL_SHIFT)) & XRDC_MRGD_W2_6_2_D4SEL_MASK)

#define XRDC_MRGD_W2_6_2_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_6_2_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_6_2_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_2_D5SEL_SHIFT)) & XRDC_MRGD_W2_6_2_D5SEL_MASK)

#define XRDC_MRGD_W2_6_2_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_6_2_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_6_2_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_2_D6SEL_SHIFT)) & XRDC_MRGD_W2_6_2_D6SEL_MASK)

#define XRDC_MRGD_W2_6_2_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_6_2_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_6_2_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_2_D7SEL_SHIFT)) & XRDC_MRGD_W2_6_2_D7SEL_MASK)

#define XRDC_MRGD_W2_6_2_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_6_2_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_6_2_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_2_EALO_SHIFT)) & XRDC_MRGD_W2_6_2_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_6_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_6_2_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_6_2_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_6_2_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_6_2_EAL_SHIFT)) & XRDC_MRGD_W3_6_2_EAL_MASK)

#define XRDC_MRGD_W3_6_2_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_6_2_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_6_2_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_6_2_CR_SHIFT)) & XRDC_MRGD_W3_6_2_CR_MASK)
/*! @} */

/*! @name MRGD_W4_6_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_6_2_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_6_2_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_6_2_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_2_ACCSET1_SHIFT)) & XRDC_MRGD_W4_6_2_ACCSET1_MASK)

#define XRDC_MRGD_W4_6_2_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_6_2_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_6_2_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_2_LKAS1_SHIFT)) & XRDC_MRGD_W4_6_2_LKAS1_MASK)

#define XRDC_MRGD_W4_6_2_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_6_2_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_6_2_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_2_ACCSET2_SHIFT)) & XRDC_MRGD_W4_6_2_ACCSET2_MASK)

#define XRDC_MRGD_W4_6_2_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_6_2_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_6_2_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_2_LKAS2_SHIFT)) & XRDC_MRGD_W4_6_2_LKAS2_MASK)

#define XRDC_MRGD_W4_6_2_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_6_2_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_6_2_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_2_LK2_SHIFT)) & XRDC_MRGD_W4_6_2_LK2_MASK)

#define XRDC_MRGD_W4_6_2_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_6_2_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_6_2_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_2_VLD_SHIFT)) & XRDC_MRGD_W4_6_2_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_6_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_6_3_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_6_3_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_6_3_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_6_3_SRTADDR_SHIFT)) & XRDC_MRGD_W0_6_3_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_6_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_6_3_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_6_3_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_6_3_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_6_3_ENDADDR_SHIFT)) & XRDC_MRGD_W1_6_3_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_6_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_6_3_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_6_3_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_6_3_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_3_D0SEL_SHIFT)) & XRDC_MRGD_W2_6_3_D0SEL_MASK)

#define XRDC_MRGD_W2_6_3_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_6_3_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_6_3_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_3_D1SEL_SHIFT)) & XRDC_MRGD_W2_6_3_D1SEL_MASK)

#define XRDC_MRGD_W2_6_3_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_6_3_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_6_3_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_3_D2SEL_SHIFT)) & XRDC_MRGD_W2_6_3_D2SEL_MASK)

#define XRDC_MRGD_W2_6_3_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_6_3_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_6_3_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_3_D3SEL_SHIFT)) & XRDC_MRGD_W2_6_3_D3SEL_MASK)

#define XRDC_MRGD_W2_6_3_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_6_3_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_6_3_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_3_D4SEL_SHIFT)) & XRDC_MRGD_W2_6_3_D4SEL_MASK)

#define XRDC_MRGD_W2_6_3_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_6_3_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_6_3_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_3_D5SEL_SHIFT)) & XRDC_MRGD_W2_6_3_D5SEL_MASK)

#define XRDC_MRGD_W2_6_3_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_6_3_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_6_3_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_3_D6SEL_SHIFT)) & XRDC_MRGD_W2_6_3_D6SEL_MASK)

#define XRDC_MRGD_W2_6_3_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_6_3_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_6_3_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_3_D7SEL_SHIFT)) & XRDC_MRGD_W2_6_3_D7SEL_MASK)

#define XRDC_MRGD_W2_6_3_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_6_3_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_6_3_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_3_EALO_SHIFT)) & XRDC_MRGD_W2_6_3_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_6_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_6_3_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_6_3_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_6_3_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_6_3_EAL_SHIFT)) & XRDC_MRGD_W3_6_3_EAL_MASK)

#define XRDC_MRGD_W3_6_3_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_6_3_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_6_3_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_6_3_CR_SHIFT)) & XRDC_MRGD_W3_6_3_CR_MASK)
/*! @} */

/*! @name MRGD_W4_6_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_6_3_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_6_3_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_6_3_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_3_ACCSET1_SHIFT)) & XRDC_MRGD_W4_6_3_ACCSET1_MASK)

#define XRDC_MRGD_W4_6_3_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_6_3_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_6_3_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_3_LKAS1_SHIFT)) & XRDC_MRGD_W4_6_3_LKAS1_MASK)

#define XRDC_MRGD_W4_6_3_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_6_3_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_6_3_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_3_ACCSET2_SHIFT)) & XRDC_MRGD_W4_6_3_ACCSET2_MASK)

#define XRDC_MRGD_W4_6_3_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_6_3_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_6_3_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_3_LKAS2_SHIFT)) & XRDC_MRGD_W4_6_3_LKAS2_MASK)

#define XRDC_MRGD_W4_6_3_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_6_3_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_6_3_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_3_LK2_SHIFT)) & XRDC_MRGD_W4_6_3_LK2_MASK)

#define XRDC_MRGD_W4_6_3_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_6_3_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_6_3_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_3_VLD_SHIFT)) & XRDC_MRGD_W4_6_3_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_6_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_6_4_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_6_4_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_6_4_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_6_4_SRTADDR_SHIFT)) & XRDC_MRGD_W0_6_4_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_6_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_6_4_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_6_4_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_6_4_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_6_4_ENDADDR_SHIFT)) & XRDC_MRGD_W1_6_4_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_6_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_6_4_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_6_4_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_6_4_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_4_D0SEL_SHIFT)) & XRDC_MRGD_W2_6_4_D0SEL_MASK)

#define XRDC_MRGD_W2_6_4_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_6_4_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_6_4_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_4_D1SEL_SHIFT)) & XRDC_MRGD_W2_6_4_D1SEL_MASK)

#define XRDC_MRGD_W2_6_4_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_6_4_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_6_4_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_4_D2SEL_SHIFT)) & XRDC_MRGD_W2_6_4_D2SEL_MASK)

#define XRDC_MRGD_W2_6_4_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_6_4_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_6_4_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_4_D3SEL_SHIFT)) & XRDC_MRGD_W2_6_4_D3SEL_MASK)

#define XRDC_MRGD_W2_6_4_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_6_4_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_6_4_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_4_D4SEL_SHIFT)) & XRDC_MRGD_W2_6_4_D4SEL_MASK)

#define XRDC_MRGD_W2_6_4_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_6_4_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_6_4_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_4_D5SEL_SHIFT)) & XRDC_MRGD_W2_6_4_D5SEL_MASK)

#define XRDC_MRGD_W2_6_4_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_6_4_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_6_4_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_4_D6SEL_SHIFT)) & XRDC_MRGD_W2_6_4_D6SEL_MASK)

#define XRDC_MRGD_W2_6_4_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_6_4_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_6_4_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_4_D7SEL_SHIFT)) & XRDC_MRGD_W2_6_4_D7SEL_MASK)

#define XRDC_MRGD_W2_6_4_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_6_4_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_6_4_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_4_EALO_SHIFT)) & XRDC_MRGD_W2_6_4_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_6_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_6_4_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_6_4_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_6_4_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_6_4_EAL_SHIFT)) & XRDC_MRGD_W3_6_4_EAL_MASK)

#define XRDC_MRGD_W3_6_4_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_6_4_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_6_4_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_6_4_CR_SHIFT)) & XRDC_MRGD_W3_6_4_CR_MASK)
/*! @} */

/*! @name MRGD_W4_6_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_6_4_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_6_4_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_6_4_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_4_ACCSET1_SHIFT)) & XRDC_MRGD_W4_6_4_ACCSET1_MASK)

#define XRDC_MRGD_W4_6_4_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_6_4_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_6_4_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_4_LKAS1_SHIFT)) & XRDC_MRGD_W4_6_4_LKAS1_MASK)

#define XRDC_MRGD_W4_6_4_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_6_4_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_6_4_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_4_ACCSET2_SHIFT)) & XRDC_MRGD_W4_6_4_ACCSET2_MASK)

#define XRDC_MRGD_W4_6_4_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_6_4_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_6_4_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_4_LKAS2_SHIFT)) & XRDC_MRGD_W4_6_4_LKAS2_MASK)

#define XRDC_MRGD_W4_6_4_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_6_4_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_6_4_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_4_LK2_SHIFT)) & XRDC_MRGD_W4_6_4_LK2_MASK)

#define XRDC_MRGD_W4_6_4_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_6_4_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_6_4_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_4_VLD_SHIFT)) & XRDC_MRGD_W4_6_4_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_6_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_6_5_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_6_5_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_6_5_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_6_5_SRTADDR_SHIFT)) & XRDC_MRGD_W0_6_5_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_6_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_6_5_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_6_5_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_6_5_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_6_5_ENDADDR_SHIFT)) & XRDC_MRGD_W1_6_5_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_6_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_6_5_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_6_5_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_6_5_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_5_D0SEL_SHIFT)) & XRDC_MRGD_W2_6_5_D0SEL_MASK)

#define XRDC_MRGD_W2_6_5_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_6_5_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_6_5_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_5_D1SEL_SHIFT)) & XRDC_MRGD_W2_6_5_D1SEL_MASK)

#define XRDC_MRGD_W2_6_5_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_6_5_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_6_5_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_5_D2SEL_SHIFT)) & XRDC_MRGD_W2_6_5_D2SEL_MASK)

#define XRDC_MRGD_W2_6_5_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_6_5_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_6_5_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_5_D3SEL_SHIFT)) & XRDC_MRGD_W2_6_5_D3SEL_MASK)

#define XRDC_MRGD_W2_6_5_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_6_5_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_6_5_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_5_D4SEL_SHIFT)) & XRDC_MRGD_W2_6_5_D4SEL_MASK)

#define XRDC_MRGD_W2_6_5_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_6_5_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_6_5_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_5_D5SEL_SHIFT)) & XRDC_MRGD_W2_6_5_D5SEL_MASK)

#define XRDC_MRGD_W2_6_5_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_6_5_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_6_5_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_5_D6SEL_SHIFT)) & XRDC_MRGD_W2_6_5_D6SEL_MASK)

#define XRDC_MRGD_W2_6_5_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_6_5_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_6_5_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_5_D7SEL_SHIFT)) & XRDC_MRGD_W2_6_5_D7SEL_MASK)

#define XRDC_MRGD_W2_6_5_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_6_5_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_6_5_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_5_EALO_SHIFT)) & XRDC_MRGD_W2_6_5_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_6_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_6_5_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_6_5_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_6_5_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_6_5_EAL_SHIFT)) & XRDC_MRGD_W3_6_5_EAL_MASK)

#define XRDC_MRGD_W3_6_5_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_6_5_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_6_5_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_6_5_CR_SHIFT)) & XRDC_MRGD_W3_6_5_CR_MASK)
/*! @} */

/*! @name MRGD_W4_6_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_6_5_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_6_5_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_6_5_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_5_ACCSET1_SHIFT)) & XRDC_MRGD_W4_6_5_ACCSET1_MASK)

#define XRDC_MRGD_W4_6_5_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_6_5_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_6_5_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_5_LKAS1_SHIFT)) & XRDC_MRGD_W4_6_5_LKAS1_MASK)

#define XRDC_MRGD_W4_6_5_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_6_5_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_6_5_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_5_ACCSET2_SHIFT)) & XRDC_MRGD_W4_6_5_ACCSET2_MASK)

#define XRDC_MRGD_W4_6_5_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_6_5_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_6_5_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_5_LKAS2_SHIFT)) & XRDC_MRGD_W4_6_5_LKAS2_MASK)

#define XRDC_MRGD_W4_6_5_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_6_5_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_6_5_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_5_LK2_SHIFT)) & XRDC_MRGD_W4_6_5_LK2_MASK)

#define XRDC_MRGD_W4_6_5_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_6_5_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_6_5_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_5_VLD_SHIFT)) & XRDC_MRGD_W4_6_5_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_6_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_6_6_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_6_6_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_6_6_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_6_6_SRTADDR_SHIFT)) & XRDC_MRGD_W0_6_6_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_6_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_6_6_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_6_6_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_6_6_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_6_6_ENDADDR_SHIFT)) & XRDC_MRGD_W1_6_6_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_6_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_6_6_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_6_6_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_6_6_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_6_D0SEL_SHIFT)) & XRDC_MRGD_W2_6_6_D0SEL_MASK)

#define XRDC_MRGD_W2_6_6_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_6_6_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_6_6_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_6_D1SEL_SHIFT)) & XRDC_MRGD_W2_6_6_D1SEL_MASK)

#define XRDC_MRGD_W2_6_6_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_6_6_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_6_6_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_6_D2SEL_SHIFT)) & XRDC_MRGD_W2_6_6_D2SEL_MASK)

#define XRDC_MRGD_W2_6_6_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_6_6_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_6_6_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_6_D3SEL_SHIFT)) & XRDC_MRGD_W2_6_6_D3SEL_MASK)

#define XRDC_MRGD_W2_6_6_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_6_6_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_6_6_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_6_D4SEL_SHIFT)) & XRDC_MRGD_W2_6_6_D4SEL_MASK)

#define XRDC_MRGD_W2_6_6_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_6_6_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_6_6_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_6_D5SEL_SHIFT)) & XRDC_MRGD_W2_6_6_D5SEL_MASK)

#define XRDC_MRGD_W2_6_6_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_6_6_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_6_6_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_6_D6SEL_SHIFT)) & XRDC_MRGD_W2_6_6_D6SEL_MASK)

#define XRDC_MRGD_W2_6_6_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_6_6_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_6_6_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_6_D7SEL_SHIFT)) & XRDC_MRGD_W2_6_6_D7SEL_MASK)

#define XRDC_MRGD_W2_6_6_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_6_6_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_6_6_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_6_EALO_SHIFT)) & XRDC_MRGD_W2_6_6_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_6_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_6_6_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_6_6_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_6_6_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_6_6_EAL_SHIFT)) & XRDC_MRGD_W3_6_6_EAL_MASK)

#define XRDC_MRGD_W3_6_6_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_6_6_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_6_6_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_6_6_CR_SHIFT)) & XRDC_MRGD_W3_6_6_CR_MASK)
/*! @} */

/*! @name MRGD_W4_6_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_6_6_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_6_6_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_6_6_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_6_ACCSET1_SHIFT)) & XRDC_MRGD_W4_6_6_ACCSET1_MASK)

#define XRDC_MRGD_W4_6_6_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_6_6_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_6_6_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_6_LKAS1_SHIFT)) & XRDC_MRGD_W4_6_6_LKAS1_MASK)

#define XRDC_MRGD_W4_6_6_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_6_6_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_6_6_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_6_ACCSET2_SHIFT)) & XRDC_MRGD_W4_6_6_ACCSET2_MASK)

#define XRDC_MRGD_W4_6_6_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_6_6_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_6_6_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_6_LKAS2_SHIFT)) & XRDC_MRGD_W4_6_6_LKAS2_MASK)

#define XRDC_MRGD_W4_6_6_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_6_6_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_6_6_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_6_LK2_SHIFT)) & XRDC_MRGD_W4_6_6_LK2_MASK)

#define XRDC_MRGD_W4_6_6_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_6_6_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_6_6_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_6_VLD_SHIFT)) & XRDC_MRGD_W4_6_6_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_6_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_6_7_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_6_7_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_6_7_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_6_7_SRTADDR_SHIFT)) & XRDC_MRGD_W0_6_7_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_6_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_6_7_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_6_7_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_6_7_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_6_7_ENDADDR_SHIFT)) & XRDC_MRGD_W1_6_7_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_6_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_6_7_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_6_7_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_6_7_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_7_D0SEL_SHIFT)) & XRDC_MRGD_W2_6_7_D0SEL_MASK)

#define XRDC_MRGD_W2_6_7_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_6_7_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_6_7_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_7_D1SEL_SHIFT)) & XRDC_MRGD_W2_6_7_D1SEL_MASK)

#define XRDC_MRGD_W2_6_7_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_6_7_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_6_7_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_7_D2SEL_SHIFT)) & XRDC_MRGD_W2_6_7_D2SEL_MASK)

#define XRDC_MRGD_W2_6_7_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_6_7_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_6_7_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_7_D3SEL_SHIFT)) & XRDC_MRGD_W2_6_7_D3SEL_MASK)

#define XRDC_MRGD_W2_6_7_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_6_7_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_6_7_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_7_D4SEL_SHIFT)) & XRDC_MRGD_W2_6_7_D4SEL_MASK)

#define XRDC_MRGD_W2_6_7_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_6_7_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_6_7_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_7_D5SEL_SHIFT)) & XRDC_MRGD_W2_6_7_D5SEL_MASK)

#define XRDC_MRGD_W2_6_7_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_6_7_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_6_7_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_7_D6SEL_SHIFT)) & XRDC_MRGD_W2_6_7_D6SEL_MASK)

#define XRDC_MRGD_W2_6_7_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_6_7_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_6_7_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_7_D7SEL_SHIFT)) & XRDC_MRGD_W2_6_7_D7SEL_MASK)

#define XRDC_MRGD_W2_6_7_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_6_7_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_6_7_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_6_7_EALO_SHIFT)) & XRDC_MRGD_W2_6_7_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_6_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_6_7_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_6_7_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_6_7_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_6_7_EAL_SHIFT)) & XRDC_MRGD_W3_6_7_EAL_MASK)

#define XRDC_MRGD_W3_6_7_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_6_7_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_6_7_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_6_7_CR_SHIFT)) & XRDC_MRGD_W3_6_7_CR_MASK)
/*! @} */

/*! @name MRGD_W4_6_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_6_7_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_6_7_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_6_7_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_7_ACCSET1_SHIFT)) & XRDC_MRGD_W4_6_7_ACCSET1_MASK)

#define XRDC_MRGD_W4_6_7_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_6_7_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_6_7_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_7_LKAS1_SHIFT)) & XRDC_MRGD_W4_6_7_LKAS1_MASK)

#define XRDC_MRGD_W4_6_7_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_6_7_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_6_7_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_7_ACCSET2_SHIFT)) & XRDC_MRGD_W4_6_7_ACCSET2_MASK)

#define XRDC_MRGD_W4_6_7_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_6_7_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_6_7_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_7_LKAS2_SHIFT)) & XRDC_MRGD_W4_6_7_LKAS2_MASK)

#define XRDC_MRGD_W4_6_7_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_6_7_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_6_7_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_7_LK2_SHIFT)) & XRDC_MRGD_W4_6_7_LK2_MASK)

#define XRDC_MRGD_W4_6_7_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_6_7_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_6_7_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_6_7_VLD_SHIFT)) & XRDC_MRGD_W4_6_7_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_7_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_7_0_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_7_0_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_7_0_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_7_0_SRTADDR_SHIFT)) & XRDC_MRGD_W0_7_0_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_7_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_7_0_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_7_0_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_7_0_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_7_0_ENDADDR_SHIFT)) & XRDC_MRGD_W1_7_0_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_7_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_7_0_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_7_0_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_7_0_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_0_D0SEL_SHIFT)) & XRDC_MRGD_W2_7_0_D0SEL_MASK)

#define XRDC_MRGD_W2_7_0_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_7_0_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_7_0_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_0_D1SEL_SHIFT)) & XRDC_MRGD_W2_7_0_D1SEL_MASK)

#define XRDC_MRGD_W2_7_0_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_7_0_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_7_0_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_0_D2SEL_SHIFT)) & XRDC_MRGD_W2_7_0_D2SEL_MASK)

#define XRDC_MRGD_W2_7_0_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_7_0_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_7_0_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_0_D3SEL_SHIFT)) & XRDC_MRGD_W2_7_0_D3SEL_MASK)

#define XRDC_MRGD_W2_7_0_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_7_0_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_7_0_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_0_D4SEL_SHIFT)) & XRDC_MRGD_W2_7_0_D4SEL_MASK)

#define XRDC_MRGD_W2_7_0_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_7_0_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_7_0_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_0_D5SEL_SHIFT)) & XRDC_MRGD_W2_7_0_D5SEL_MASK)

#define XRDC_MRGD_W2_7_0_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_7_0_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_7_0_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_0_D6SEL_SHIFT)) & XRDC_MRGD_W2_7_0_D6SEL_MASK)

#define XRDC_MRGD_W2_7_0_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_7_0_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_7_0_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_0_D7SEL_SHIFT)) & XRDC_MRGD_W2_7_0_D7SEL_MASK)

#define XRDC_MRGD_W2_7_0_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_7_0_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_7_0_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_0_EALO_SHIFT)) & XRDC_MRGD_W2_7_0_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_7_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_7_0_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_7_0_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_7_0_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_7_0_EAL_SHIFT)) & XRDC_MRGD_W3_7_0_EAL_MASK)

#define XRDC_MRGD_W3_7_0_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_7_0_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_7_0_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_7_0_CR_SHIFT)) & XRDC_MRGD_W3_7_0_CR_MASK)
/*! @} */

/*! @name MRGD_W4_7_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_7_0_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_7_0_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_7_0_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_0_ACCSET1_SHIFT)) & XRDC_MRGD_W4_7_0_ACCSET1_MASK)

#define XRDC_MRGD_W4_7_0_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_7_0_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_7_0_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_0_LKAS1_SHIFT)) & XRDC_MRGD_W4_7_0_LKAS1_MASK)

#define XRDC_MRGD_W4_7_0_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_7_0_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_7_0_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_0_ACCSET2_SHIFT)) & XRDC_MRGD_W4_7_0_ACCSET2_MASK)

#define XRDC_MRGD_W4_7_0_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_7_0_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_7_0_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_0_LKAS2_SHIFT)) & XRDC_MRGD_W4_7_0_LKAS2_MASK)

#define XRDC_MRGD_W4_7_0_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_7_0_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_7_0_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_0_LK2_SHIFT)) & XRDC_MRGD_W4_7_0_LK2_MASK)

#define XRDC_MRGD_W4_7_0_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_7_0_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_7_0_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_0_VLD_SHIFT)) & XRDC_MRGD_W4_7_0_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_7_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_7_1_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_7_1_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_7_1_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_7_1_SRTADDR_SHIFT)) & XRDC_MRGD_W0_7_1_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_7_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_7_1_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_7_1_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_7_1_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_7_1_ENDADDR_SHIFT)) & XRDC_MRGD_W1_7_1_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_7_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_7_1_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_7_1_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_7_1_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_1_D0SEL_SHIFT)) & XRDC_MRGD_W2_7_1_D0SEL_MASK)

#define XRDC_MRGD_W2_7_1_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_7_1_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_7_1_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_1_D1SEL_SHIFT)) & XRDC_MRGD_W2_7_1_D1SEL_MASK)

#define XRDC_MRGD_W2_7_1_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_7_1_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_7_1_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_1_D2SEL_SHIFT)) & XRDC_MRGD_W2_7_1_D2SEL_MASK)

#define XRDC_MRGD_W2_7_1_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_7_1_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_7_1_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_1_D3SEL_SHIFT)) & XRDC_MRGD_W2_7_1_D3SEL_MASK)

#define XRDC_MRGD_W2_7_1_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_7_1_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_7_1_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_1_D4SEL_SHIFT)) & XRDC_MRGD_W2_7_1_D4SEL_MASK)

#define XRDC_MRGD_W2_7_1_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_7_1_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_7_1_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_1_D5SEL_SHIFT)) & XRDC_MRGD_W2_7_1_D5SEL_MASK)

#define XRDC_MRGD_W2_7_1_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_7_1_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_7_1_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_1_D6SEL_SHIFT)) & XRDC_MRGD_W2_7_1_D6SEL_MASK)

#define XRDC_MRGD_W2_7_1_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_7_1_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_7_1_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_1_D7SEL_SHIFT)) & XRDC_MRGD_W2_7_1_D7SEL_MASK)

#define XRDC_MRGD_W2_7_1_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_7_1_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_7_1_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_1_EALO_SHIFT)) & XRDC_MRGD_W2_7_1_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_7_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_7_1_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_7_1_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_7_1_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_7_1_EAL_SHIFT)) & XRDC_MRGD_W3_7_1_EAL_MASK)

#define XRDC_MRGD_W3_7_1_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_7_1_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_7_1_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_7_1_CR_SHIFT)) & XRDC_MRGD_W3_7_1_CR_MASK)
/*! @} */

/*! @name MRGD_W4_7_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_7_1_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_7_1_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_7_1_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_1_ACCSET1_SHIFT)) & XRDC_MRGD_W4_7_1_ACCSET1_MASK)

#define XRDC_MRGD_W4_7_1_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_7_1_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_7_1_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_1_LKAS1_SHIFT)) & XRDC_MRGD_W4_7_1_LKAS1_MASK)

#define XRDC_MRGD_W4_7_1_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_7_1_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_7_1_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_1_ACCSET2_SHIFT)) & XRDC_MRGD_W4_7_1_ACCSET2_MASK)

#define XRDC_MRGD_W4_7_1_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_7_1_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_7_1_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_1_LKAS2_SHIFT)) & XRDC_MRGD_W4_7_1_LKAS2_MASK)

#define XRDC_MRGD_W4_7_1_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_7_1_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_7_1_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_1_LK2_SHIFT)) & XRDC_MRGD_W4_7_1_LK2_MASK)

#define XRDC_MRGD_W4_7_1_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_7_1_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_7_1_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_1_VLD_SHIFT)) & XRDC_MRGD_W4_7_1_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_7_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_7_2_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_7_2_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_7_2_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_7_2_SRTADDR_SHIFT)) & XRDC_MRGD_W0_7_2_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_7_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_7_2_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_7_2_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_7_2_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_7_2_ENDADDR_SHIFT)) & XRDC_MRGD_W1_7_2_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_7_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_7_2_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_7_2_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_7_2_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_2_D0SEL_SHIFT)) & XRDC_MRGD_W2_7_2_D0SEL_MASK)

#define XRDC_MRGD_W2_7_2_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_7_2_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_7_2_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_2_D1SEL_SHIFT)) & XRDC_MRGD_W2_7_2_D1SEL_MASK)

#define XRDC_MRGD_W2_7_2_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_7_2_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_7_2_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_2_D2SEL_SHIFT)) & XRDC_MRGD_W2_7_2_D2SEL_MASK)

#define XRDC_MRGD_W2_7_2_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_7_2_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_7_2_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_2_D3SEL_SHIFT)) & XRDC_MRGD_W2_7_2_D3SEL_MASK)

#define XRDC_MRGD_W2_7_2_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_7_2_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_7_2_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_2_D4SEL_SHIFT)) & XRDC_MRGD_W2_7_2_D4SEL_MASK)

#define XRDC_MRGD_W2_7_2_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_7_2_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_7_2_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_2_D5SEL_SHIFT)) & XRDC_MRGD_W2_7_2_D5SEL_MASK)

#define XRDC_MRGD_W2_7_2_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_7_2_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_7_2_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_2_D6SEL_SHIFT)) & XRDC_MRGD_W2_7_2_D6SEL_MASK)

#define XRDC_MRGD_W2_7_2_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_7_2_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_7_2_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_2_D7SEL_SHIFT)) & XRDC_MRGD_W2_7_2_D7SEL_MASK)

#define XRDC_MRGD_W2_7_2_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_7_2_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_7_2_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_2_EALO_SHIFT)) & XRDC_MRGD_W2_7_2_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_7_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_7_2_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_7_2_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_7_2_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_7_2_EAL_SHIFT)) & XRDC_MRGD_W3_7_2_EAL_MASK)

#define XRDC_MRGD_W3_7_2_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_7_2_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_7_2_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_7_2_CR_SHIFT)) & XRDC_MRGD_W3_7_2_CR_MASK)
/*! @} */

/*! @name MRGD_W4_7_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_7_2_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_7_2_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_7_2_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_2_ACCSET1_SHIFT)) & XRDC_MRGD_W4_7_2_ACCSET1_MASK)

#define XRDC_MRGD_W4_7_2_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_7_2_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_7_2_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_2_LKAS1_SHIFT)) & XRDC_MRGD_W4_7_2_LKAS1_MASK)

#define XRDC_MRGD_W4_7_2_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_7_2_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_7_2_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_2_ACCSET2_SHIFT)) & XRDC_MRGD_W4_7_2_ACCSET2_MASK)

#define XRDC_MRGD_W4_7_2_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_7_2_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_7_2_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_2_LKAS2_SHIFT)) & XRDC_MRGD_W4_7_2_LKAS2_MASK)

#define XRDC_MRGD_W4_7_2_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_7_2_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_7_2_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_2_LK2_SHIFT)) & XRDC_MRGD_W4_7_2_LK2_MASK)

#define XRDC_MRGD_W4_7_2_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_7_2_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_7_2_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_2_VLD_SHIFT)) & XRDC_MRGD_W4_7_2_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_7_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_7_3_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_7_3_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_7_3_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_7_3_SRTADDR_SHIFT)) & XRDC_MRGD_W0_7_3_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_7_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_7_3_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_7_3_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_7_3_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_7_3_ENDADDR_SHIFT)) & XRDC_MRGD_W1_7_3_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_7_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_7_3_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_7_3_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_7_3_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_3_D0SEL_SHIFT)) & XRDC_MRGD_W2_7_3_D0SEL_MASK)

#define XRDC_MRGD_W2_7_3_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_7_3_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_7_3_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_3_D1SEL_SHIFT)) & XRDC_MRGD_W2_7_3_D1SEL_MASK)

#define XRDC_MRGD_W2_7_3_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_7_3_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_7_3_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_3_D2SEL_SHIFT)) & XRDC_MRGD_W2_7_3_D2SEL_MASK)

#define XRDC_MRGD_W2_7_3_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_7_3_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_7_3_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_3_D3SEL_SHIFT)) & XRDC_MRGD_W2_7_3_D3SEL_MASK)

#define XRDC_MRGD_W2_7_3_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_7_3_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_7_3_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_3_D4SEL_SHIFT)) & XRDC_MRGD_W2_7_3_D4SEL_MASK)

#define XRDC_MRGD_W2_7_3_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_7_3_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_7_3_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_3_D5SEL_SHIFT)) & XRDC_MRGD_W2_7_3_D5SEL_MASK)

#define XRDC_MRGD_W2_7_3_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_7_3_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_7_3_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_3_D6SEL_SHIFT)) & XRDC_MRGD_W2_7_3_D6SEL_MASK)

#define XRDC_MRGD_W2_7_3_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_7_3_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_7_3_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_3_D7SEL_SHIFT)) & XRDC_MRGD_W2_7_3_D7SEL_MASK)

#define XRDC_MRGD_W2_7_3_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_7_3_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_7_3_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_3_EALO_SHIFT)) & XRDC_MRGD_W2_7_3_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_7_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_7_3_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_7_3_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_7_3_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_7_3_EAL_SHIFT)) & XRDC_MRGD_W3_7_3_EAL_MASK)

#define XRDC_MRGD_W3_7_3_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_7_3_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_7_3_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_7_3_CR_SHIFT)) & XRDC_MRGD_W3_7_3_CR_MASK)
/*! @} */

/*! @name MRGD_W4_7_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_7_3_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_7_3_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_7_3_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_3_ACCSET1_SHIFT)) & XRDC_MRGD_W4_7_3_ACCSET1_MASK)

#define XRDC_MRGD_W4_7_3_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_7_3_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_7_3_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_3_LKAS1_SHIFT)) & XRDC_MRGD_W4_7_3_LKAS1_MASK)

#define XRDC_MRGD_W4_7_3_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_7_3_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_7_3_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_3_ACCSET2_SHIFT)) & XRDC_MRGD_W4_7_3_ACCSET2_MASK)

#define XRDC_MRGD_W4_7_3_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_7_3_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_7_3_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_3_LKAS2_SHIFT)) & XRDC_MRGD_W4_7_3_LKAS2_MASK)

#define XRDC_MRGD_W4_7_3_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_7_3_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_7_3_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_3_LK2_SHIFT)) & XRDC_MRGD_W4_7_3_LK2_MASK)

#define XRDC_MRGD_W4_7_3_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_7_3_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_7_3_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_3_VLD_SHIFT)) & XRDC_MRGD_W4_7_3_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_7_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_7_4_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_7_4_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_7_4_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_7_4_SRTADDR_SHIFT)) & XRDC_MRGD_W0_7_4_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_7_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_7_4_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_7_4_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_7_4_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_7_4_ENDADDR_SHIFT)) & XRDC_MRGD_W1_7_4_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_7_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_7_4_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_7_4_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_7_4_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_4_D0SEL_SHIFT)) & XRDC_MRGD_W2_7_4_D0SEL_MASK)

#define XRDC_MRGD_W2_7_4_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_7_4_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_7_4_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_4_D1SEL_SHIFT)) & XRDC_MRGD_W2_7_4_D1SEL_MASK)

#define XRDC_MRGD_W2_7_4_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_7_4_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_7_4_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_4_D2SEL_SHIFT)) & XRDC_MRGD_W2_7_4_D2SEL_MASK)

#define XRDC_MRGD_W2_7_4_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_7_4_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_7_4_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_4_D3SEL_SHIFT)) & XRDC_MRGD_W2_7_4_D3SEL_MASK)

#define XRDC_MRGD_W2_7_4_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_7_4_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_7_4_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_4_D4SEL_SHIFT)) & XRDC_MRGD_W2_7_4_D4SEL_MASK)

#define XRDC_MRGD_W2_7_4_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_7_4_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_7_4_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_4_D5SEL_SHIFT)) & XRDC_MRGD_W2_7_4_D5SEL_MASK)

#define XRDC_MRGD_W2_7_4_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_7_4_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_7_4_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_4_D6SEL_SHIFT)) & XRDC_MRGD_W2_7_4_D6SEL_MASK)

#define XRDC_MRGD_W2_7_4_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_7_4_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_7_4_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_4_D7SEL_SHIFT)) & XRDC_MRGD_W2_7_4_D7SEL_MASK)

#define XRDC_MRGD_W2_7_4_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_7_4_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_7_4_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_4_EALO_SHIFT)) & XRDC_MRGD_W2_7_4_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_7_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_7_4_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_7_4_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_7_4_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_7_4_EAL_SHIFT)) & XRDC_MRGD_W3_7_4_EAL_MASK)

#define XRDC_MRGD_W3_7_4_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_7_4_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_7_4_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_7_4_CR_SHIFT)) & XRDC_MRGD_W3_7_4_CR_MASK)
/*! @} */

/*! @name MRGD_W4_7_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_7_4_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_7_4_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_7_4_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_4_ACCSET1_SHIFT)) & XRDC_MRGD_W4_7_4_ACCSET1_MASK)

#define XRDC_MRGD_W4_7_4_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_7_4_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_7_4_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_4_LKAS1_SHIFT)) & XRDC_MRGD_W4_7_4_LKAS1_MASK)

#define XRDC_MRGD_W4_7_4_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_7_4_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_7_4_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_4_ACCSET2_SHIFT)) & XRDC_MRGD_W4_7_4_ACCSET2_MASK)

#define XRDC_MRGD_W4_7_4_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_7_4_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_7_4_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_4_LKAS2_SHIFT)) & XRDC_MRGD_W4_7_4_LKAS2_MASK)

#define XRDC_MRGD_W4_7_4_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_7_4_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_7_4_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_4_LK2_SHIFT)) & XRDC_MRGD_W4_7_4_LK2_MASK)

#define XRDC_MRGD_W4_7_4_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_7_4_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_7_4_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_4_VLD_SHIFT)) & XRDC_MRGD_W4_7_4_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_7_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_7_5_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_7_5_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_7_5_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_7_5_SRTADDR_SHIFT)) & XRDC_MRGD_W0_7_5_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_7_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_7_5_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_7_5_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_7_5_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_7_5_ENDADDR_SHIFT)) & XRDC_MRGD_W1_7_5_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_7_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_7_5_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_7_5_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_7_5_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_5_D0SEL_SHIFT)) & XRDC_MRGD_W2_7_5_D0SEL_MASK)

#define XRDC_MRGD_W2_7_5_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_7_5_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_7_5_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_5_D1SEL_SHIFT)) & XRDC_MRGD_W2_7_5_D1SEL_MASK)

#define XRDC_MRGD_W2_7_5_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_7_5_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_7_5_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_5_D2SEL_SHIFT)) & XRDC_MRGD_W2_7_5_D2SEL_MASK)

#define XRDC_MRGD_W2_7_5_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_7_5_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_7_5_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_5_D3SEL_SHIFT)) & XRDC_MRGD_W2_7_5_D3SEL_MASK)

#define XRDC_MRGD_W2_7_5_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_7_5_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_7_5_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_5_D4SEL_SHIFT)) & XRDC_MRGD_W2_7_5_D4SEL_MASK)

#define XRDC_MRGD_W2_7_5_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_7_5_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_7_5_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_5_D5SEL_SHIFT)) & XRDC_MRGD_W2_7_5_D5SEL_MASK)

#define XRDC_MRGD_W2_7_5_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_7_5_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_7_5_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_5_D6SEL_SHIFT)) & XRDC_MRGD_W2_7_5_D6SEL_MASK)

#define XRDC_MRGD_W2_7_5_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_7_5_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_7_5_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_5_D7SEL_SHIFT)) & XRDC_MRGD_W2_7_5_D7SEL_MASK)

#define XRDC_MRGD_W2_7_5_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_7_5_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_7_5_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_5_EALO_SHIFT)) & XRDC_MRGD_W2_7_5_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_7_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_7_5_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_7_5_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_7_5_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_7_5_EAL_SHIFT)) & XRDC_MRGD_W3_7_5_EAL_MASK)

#define XRDC_MRGD_W3_7_5_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_7_5_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_7_5_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_7_5_CR_SHIFT)) & XRDC_MRGD_W3_7_5_CR_MASK)
/*! @} */

/*! @name MRGD_W4_7_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_7_5_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_7_5_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_7_5_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_5_ACCSET1_SHIFT)) & XRDC_MRGD_W4_7_5_ACCSET1_MASK)

#define XRDC_MRGD_W4_7_5_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_7_5_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_7_5_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_5_LKAS1_SHIFT)) & XRDC_MRGD_W4_7_5_LKAS1_MASK)

#define XRDC_MRGD_W4_7_5_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_7_5_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_7_5_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_5_ACCSET2_SHIFT)) & XRDC_MRGD_W4_7_5_ACCSET2_MASK)

#define XRDC_MRGD_W4_7_5_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_7_5_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_7_5_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_5_LKAS2_SHIFT)) & XRDC_MRGD_W4_7_5_LKAS2_MASK)

#define XRDC_MRGD_W4_7_5_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_7_5_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_7_5_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_5_LK2_SHIFT)) & XRDC_MRGD_W4_7_5_LK2_MASK)

#define XRDC_MRGD_W4_7_5_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_7_5_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_7_5_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_5_VLD_SHIFT)) & XRDC_MRGD_W4_7_5_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_7_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_7_6_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_7_6_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_7_6_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_7_6_SRTADDR_SHIFT)) & XRDC_MRGD_W0_7_6_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_7_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_7_6_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_7_6_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_7_6_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_7_6_ENDADDR_SHIFT)) & XRDC_MRGD_W1_7_6_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_7_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_7_6_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_7_6_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_7_6_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_6_D0SEL_SHIFT)) & XRDC_MRGD_W2_7_6_D0SEL_MASK)

#define XRDC_MRGD_W2_7_6_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_7_6_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_7_6_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_6_D1SEL_SHIFT)) & XRDC_MRGD_W2_7_6_D1SEL_MASK)

#define XRDC_MRGD_W2_7_6_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_7_6_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_7_6_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_6_D2SEL_SHIFT)) & XRDC_MRGD_W2_7_6_D2SEL_MASK)

#define XRDC_MRGD_W2_7_6_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_7_6_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_7_6_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_6_D3SEL_SHIFT)) & XRDC_MRGD_W2_7_6_D3SEL_MASK)

#define XRDC_MRGD_W2_7_6_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_7_6_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_7_6_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_6_D4SEL_SHIFT)) & XRDC_MRGD_W2_7_6_D4SEL_MASK)

#define XRDC_MRGD_W2_7_6_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_7_6_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_7_6_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_6_D5SEL_SHIFT)) & XRDC_MRGD_W2_7_6_D5SEL_MASK)

#define XRDC_MRGD_W2_7_6_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_7_6_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_7_6_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_6_D6SEL_SHIFT)) & XRDC_MRGD_W2_7_6_D6SEL_MASK)

#define XRDC_MRGD_W2_7_6_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_7_6_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_7_6_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_6_D7SEL_SHIFT)) & XRDC_MRGD_W2_7_6_D7SEL_MASK)

#define XRDC_MRGD_W2_7_6_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_7_6_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_7_6_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_6_EALO_SHIFT)) & XRDC_MRGD_W2_7_6_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_7_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_7_6_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_7_6_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_7_6_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_7_6_EAL_SHIFT)) & XRDC_MRGD_W3_7_6_EAL_MASK)

#define XRDC_MRGD_W3_7_6_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_7_6_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_7_6_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_7_6_CR_SHIFT)) & XRDC_MRGD_W3_7_6_CR_MASK)
/*! @} */

/*! @name MRGD_W4_7_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_7_6_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_7_6_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_7_6_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_6_ACCSET1_SHIFT)) & XRDC_MRGD_W4_7_6_ACCSET1_MASK)

#define XRDC_MRGD_W4_7_6_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_7_6_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_7_6_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_6_LKAS1_SHIFT)) & XRDC_MRGD_W4_7_6_LKAS1_MASK)

#define XRDC_MRGD_W4_7_6_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_7_6_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_7_6_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_6_ACCSET2_SHIFT)) & XRDC_MRGD_W4_7_6_ACCSET2_MASK)

#define XRDC_MRGD_W4_7_6_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_7_6_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_7_6_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_6_LKAS2_SHIFT)) & XRDC_MRGD_W4_7_6_LKAS2_MASK)

#define XRDC_MRGD_W4_7_6_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_7_6_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_7_6_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_6_LK2_SHIFT)) & XRDC_MRGD_W4_7_6_LK2_MASK)

#define XRDC_MRGD_W4_7_6_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_7_6_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_7_6_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_6_VLD_SHIFT)) & XRDC_MRGD_W4_7_6_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_7_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_7_7_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_7_7_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_7_7_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_7_7_SRTADDR_SHIFT)) & XRDC_MRGD_W0_7_7_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_7_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_7_7_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_7_7_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_7_7_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_7_7_ENDADDR_SHIFT)) & XRDC_MRGD_W1_7_7_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_7_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_7_7_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_7_7_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_7_7_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_7_D0SEL_SHIFT)) & XRDC_MRGD_W2_7_7_D0SEL_MASK)

#define XRDC_MRGD_W2_7_7_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_7_7_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_7_7_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_7_D1SEL_SHIFT)) & XRDC_MRGD_W2_7_7_D1SEL_MASK)

#define XRDC_MRGD_W2_7_7_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_7_7_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_7_7_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_7_D2SEL_SHIFT)) & XRDC_MRGD_W2_7_7_D2SEL_MASK)

#define XRDC_MRGD_W2_7_7_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_7_7_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_7_7_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_7_D3SEL_SHIFT)) & XRDC_MRGD_W2_7_7_D3SEL_MASK)

#define XRDC_MRGD_W2_7_7_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_7_7_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_7_7_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_7_D4SEL_SHIFT)) & XRDC_MRGD_W2_7_7_D4SEL_MASK)

#define XRDC_MRGD_W2_7_7_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_7_7_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_7_7_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_7_D5SEL_SHIFT)) & XRDC_MRGD_W2_7_7_D5SEL_MASK)

#define XRDC_MRGD_W2_7_7_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_7_7_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_7_7_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_7_D6SEL_SHIFT)) & XRDC_MRGD_W2_7_7_D6SEL_MASK)

#define XRDC_MRGD_W2_7_7_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_7_7_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_7_7_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_7_D7SEL_SHIFT)) & XRDC_MRGD_W2_7_7_D7SEL_MASK)

#define XRDC_MRGD_W2_7_7_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_7_7_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_7_7_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_7_7_EALO_SHIFT)) & XRDC_MRGD_W2_7_7_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_7_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_7_7_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_7_7_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_7_7_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_7_7_EAL_SHIFT)) & XRDC_MRGD_W3_7_7_EAL_MASK)

#define XRDC_MRGD_W3_7_7_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_7_7_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_7_7_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_7_7_CR_SHIFT)) & XRDC_MRGD_W3_7_7_CR_MASK)
/*! @} */

/*! @name MRGD_W4_7_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_7_7_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_7_7_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_7_7_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_7_ACCSET1_SHIFT)) & XRDC_MRGD_W4_7_7_ACCSET1_MASK)

#define XRDC_MRGD_W4_7_7_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_7_7_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_7_7_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_7_LKAS1_SHIFT)) & XRDC_MRGD_W4_7_7_LKAS1_MASK)

#define XRDC_MRGD_W4_7_7_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_7_7_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_7_7_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_7_ACCSET2_SHIFT)) & XRDC_MRGD_W4_7_7_ACCSET2_MASK)

#define XRDC_MRGD_W4_7_7_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_7_7_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_7_7_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_7_LKAS2_SHIFT)) & XRDC_MRGD_W4_7_7_LKAS2_MASK)

#define XRDC_MRGD_W4_7_7_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_7_7_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_7_7_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_7_LK2_SHIFT)) & XRDC_MRGD_W4_7_7_LK2_MASK)

#define XRDC_MRGD_W4_7_7_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_7_7_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_7_7_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_7_7_VLD_SHIFT)) & XRDC_MRGD_W4_7_7_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_8_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_8_0_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_8_0_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_8_0_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_8_0_SRTADDR_SHIFT)) & XRDC_MRGD_W0_8_0_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_8_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_8_0_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_8_0_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_8_0_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_8_0_ENDADDR_SHIFT)) & XRDC_MRGD_W1_8_0_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_8_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_8_0_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_8_0_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_8_0_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_0_D0SEL_SHIFT)) & XRDC_MRGD_W2_8_0_D0SEL_MASK)

#define XRDC_MRGD_W2_8_0_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_8_0_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_8_0_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_0_D1SEL_SHIFT)) & XRDC_MRGD_W2_8_0_D1SEL_MASK)

#define XRDC_MRGD_W2_8_0_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_8_0_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_8_0_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_0_D2SEL_SHIFT)) & XRDC_MRGD_W2_8_0_D2SEL_MASK)

#define XRDC_MRGD_W2_8_0_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_8_0_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_8_0_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_0_D3SEL_SHIFT)) & XRDC_MRGD_W2_8_0_D3SEL_MASK)

#define XRDC_MRGD_W2_8_0_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_8_0_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_8_0_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_0_D4SEL_SHIFT)) & XRDC_MRGD_W2_8_0_D4SEL_MASK)

#define XRDC_MRGD_W2_8_0_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_8_0_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_8_0_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_0_D5SEL_SHIFT)) & XRDC_MRGD_W2_8_0_D5SEL_MASK)

#define XRDC_MRGD_W2_8_0_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_8_0_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_8_0_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_0_D6SEL_SHIFT)) & XRDC_MRGD_W2_8_0_D6SEL_MASK)

#define XRDC_MRGD_W2_8_0_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_8_0_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_8_0_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_0_D7SEL_SHIFT)) & XRDC_MRGD_W2_8_0_D7SEL_MASK)

#define XRDC_MRGD_W2_8_0_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_8_0_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_8_0_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_0_EALO_SHIFT)) & XRDC_MRGD_W2_8_0_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_8_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_8_0_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_8_0_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_8_0_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_8_0_EAL_SHIFT)) & XRDC_MRGD_W3_8_0_EAL_MASK)

#define XRDC_MRGD_W3_8_0_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_8_0_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_8_0_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_8_0_CR_SHIFT)) & XRDC_MRGD_W3_8_0_CR_MASK)
/*! @} */

/*! @name MRGD_W4_8_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_8_0_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_8_0_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_8_0_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_8_0_ACCSET1_SHIFT)) & XRDC_MRGD_W4_8_0_ACCSET1_MASK)

#define XRDC_MRGD_W4_8_0_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_8_0_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_8_0_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_8_0_LKAS1_SHIFT)) & XRDC_MRGD_W4_8_0_LKAS1_MASK)

#define XRDC_MRGD_W4_8_0_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_8_0_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_8_0_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_8_0_ACCSET2_SHIFT)) & XRDC_MRGD_W4_8_0_ACCSET2_MASK)

#define XRDC_MRGD_W4_8_0_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_8_0_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_8_0_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_8_0_LKAS2_SHIFT)) & XRDC_MRGD_W4_8_0_LKAS2_MASK)

#define XRDC_MRGD_W4_8_0_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_8_0_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_8_0_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_8_0_LK2_SHIFT)) & XRDC_MRGD_W4_8_0_LK2_MASK)

#define XRDC_MRGD_W4_8_0_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_8_0_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_8_0_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_8_0_VLD_SHIFT)) & XRDC_MRGD_W4_8_0_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_8_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_8_1_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_8_1_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_8_1_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_8_1_SRTADDR_SHIFT)) & XRDC_MRGD_W0_8_1_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_8_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_8_1_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_8_1_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_8_1_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_8_1_ENDADDR_SHIFT)) & XRDC_MRGD_W1_8_1_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_8_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_8_1_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_8_1_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_8_1_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_1_D0SEL_SHIFT)) & XRDC_MRGD_W2_8_1_D0SEL_MASK)

#define XRDC_MRGD_W2_8_1_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_8_1_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_8_1_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_1_D1SEL_SHIFT)) & XRDC_MRGD_W2_8_1_D1SEL_MASK)

#define XRDC_MRGD_W2_8_1_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_8_1_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_8_1_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_1_D2SEL_SHIFT)) & XRDC_MRGD_W2_8_1_D2SEL_MASK)

#define XRDC_MRGD_W2_8_1_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_8_1_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_8_1_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_1_D3SEL_SHIFT)) & XRDC_MRGD_W2_8_1_D3SEL_MASK)

#define XRDC_MRGD_W2_8_1_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_8_1_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_8_1_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_1_D4SEL_SHIFT)) & XRDC_MRGD_W2_8_1_D4SEL_MASK)

#define XRDC_MRGD_W2_8_1_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_8_1_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_8_1_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_1_D5SEL_SHIFT)) & XRDC_MRGD_W2_8_1_D5SEL_MASK)

#define XRDC_MRGD_W2_8_1_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_8_1_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_8_1_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_1_D6SEL_SHIFT)) & XRDC_MRGD_W2_8_1_D6SEL_MASK)

#define XRDC_MRGD_W2_8_1_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_8_1_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_8_1_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_1_D7SEL_SHIFT)) & XRDC_MRGD_W2_8_1_D7SEL_MASK)

#define XRDC_MRGD_W2_8_1_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_8_1_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_8_1_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_1_EALO_SHIFT)) & XRDC_MRGD_W2_8_1_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_8_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_8_1_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_8_1_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_8_1_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_8_1_EAL_SHIFT)) & XRDC_MRGD_W3_8_1_EAL_MASK)

#define XRDC_MRGD_W3_8_1_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_8_1_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_8_1_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_8_1_CR_SHIFT)) & XRDC_MRGD_W3_8_1_CR_MASK)
/*! @} */

/*! @name MRGD_W4_8_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_8_1_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_8_1_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_8_1_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_8_1_ACCSET1_SHIFT)) & XRDC_MRGD_W4_8_1_ACCSET1_MASK)

#define XRDC_MRGD_W4_8_1_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_8_1_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_8_1_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_8_1_LKAS1_SHIFT)) & XRDC_MRGD_W4_8_1_LKAS1_MASK)

#define XRDC_MRGD_W4_8_1_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_8_1_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_8_1_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_8_1_ACCSET2_SHIFT)) & XRDC_MRGD_W4_8_1_ACCSET2_MASK)

#define XRDC_MRGD_W4_8_1_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_8_1_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_8_1_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_8_1_LKAS2_SHIFT)) & XRDC_MRGD_W4_8_1_LKAS2_MASK)

#define XRDC_MRGD_W4_8_1_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_8_1_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_8_1_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_8_1_LK2_SHIFT)) & XRDC_MRGD_W4_8_1_LK2_MASK)

#define XRDC_MRGD_W4_8_1_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_8_1_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_8_1_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_8_1_VLD_SHIFT)) & XRDC_MRGD_W4_8_1_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_8_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_8_2_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_8_2_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_8_2_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_8_2_SRTADDR_SHIFT)) & XRDC_MRGD_W0_8_2_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_8_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_8_2_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_8_2_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_8_2_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_8_2_ENDADDR_SHIFT)) & XRDC_MRGD_W1_8_2_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_8_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_8_2_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_8_2_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_8_2_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_2_D0SEL_SHIFT)) & XRDC_MRGD_W2_8_2_D0SEL_MASK)

#define XRDC_MRGD_W2_8_2_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_8_2_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_8_2_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_2_D1SEL_SHIFT)) & XRDC_MRGD_W2_8_2_D1SEL_MASK)

#define XRDC_MRGD_W2_8_2_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_8_2_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_8_2_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_2_D2SEL_SHIFT)) & XRDC_MRGD_W2_8_2_D2SEL_MASK)

#define XRDC_MRGD_W2_8_2_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_8_2_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_8_2_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_2_D3SEL_SHIFT)) & XRDC_MRGD_W2_8_2_D3SEL_MASK)

#define XRDC_MRGD_W2_8_2_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_8_2_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_8_2_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_2_D4SEL_SHIFT)) & XRDC_MRGD_W2_8_2_D4SEL_MASK)

#define XRDC_MRGD_W2_8_2_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_8_2_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_8_2_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_2_D5SEL_SHIFT)) & XRDC_MRGD_W2_8_2_D5SEL_MASK)

#define XRDC_MRGD_W2_8_2_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_8_2_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_8_2_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_2_D6SEL_SHIFT)) & XRDC_MRGD_W2_8_2_D6SEL_MASK)

#define XRDC_MRGD_W2_8_2_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_8_2_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_8_2_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_2_D7SEL_SHIFT)) & XRDC_MRGD_W2_8_2_D7SEL_MASK)

#define XRDC_MRGD_W2_8_2_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_8_2_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_8_2_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_2_EALO_SHIFT)) & XRDC_MRGD_W2_8_2_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_8_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_8_2_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_8_2_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_8_2_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_8_2_EAL_SHIFT)) & XRDC_MRGD_W3_8_2_EAL_MASK)

#define XRDC_MRGD_W3_8_2_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_8_2_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_8_2_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_8_2_CR_SHIFT)) & XRDC_MRGD_W3_8_2_CR_MASK)
/*! @} */

/*! @name MRGD_W4_8_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_8_2_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_8_2_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_8_2_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_8_2_ACCSET1_SHIFT)) & XRDC_MRGD_W4_8_2_ACCSET1_MASK)

#define XRDC_MRGD_W4_8_2_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_8_2_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_8_2_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_8_2_LKAS1_SHIFT)) & XRDC_MRGD_W4_8_2_LKAS1_MASK)

#define XRDC_MRGD_W4_8_2_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_8_2_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_8_2_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_8_2_ACCSET2_SHIFT)) & XRDC_MRGD_W4_8_2_ACCSET2_MASK)

#define XRDC_MRGD_W4_8_2_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_8_2_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_8_2_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_8_2_LKAS2_SHIFT)) & XRDC_MRGD_W4_8_2_LKAS2_MASK)

#define XRDC_MRGD_W4_8_2_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_8_2_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_8_2_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_8_2_LK2_SHIFT)) & XRDC_MRGD_W4_8_2_LK2_MASK)

#define XRDC_MRGD_W4_8_2_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_8_2_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_8_2_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_8_2_VLD_SHIFT)) & XRDC_MRGD_W4_8_2_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_8_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_8_3_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_8_3_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_8_3_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_8_3_SRTADDR_SHIFT)) & XRDC_MRGD_W0_8_3_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_8_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_8_3_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_8_3_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_8_3_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_8_3_ENDADDR_SHIFT)) & XRDC_MRGD_W1_8_3_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_8_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_8_3_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_8_3_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_8_3_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_3_D0SEL_SHIFT)) & XRDC_MRGD_W2_8_3_D0SEL_MASK)

#define XRDC_MRGD_W2_8_3_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_8_3_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_8_3_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_3_D1SEL_SHIFT)) & XRDC_MRGD_W2_8_3_D1SEL_MASK)

#define XRDC_MRGD_W2_8_3_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_8_3_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_8_3_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_3_D2SEL_SHIFT)) & XRDC_MRGD_W2_8_3_D2SEL_MASK)

#define XRDC_MRGD_W2_8_3_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_8_3_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_8_3_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_3_D3SEL_SHIFT)) & XRDC_MRGD_W2_8_3_D3SEL_MASK)

#define XRDC_MRGD_W2_8_3_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_8_3_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_8_3_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_3_D4SEL_SHIFT)) & XRDC_MRGD_W2_8_3_D4SEL_MASK)

#define XRDC_MRGD_W2_8_3_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_8_3_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_8_3_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_3_D5SEL_SHIFT)) & XRDC_MRGD_W2_8_3_D5SEL_MASK)

#define XRDC_MRGD_W2_8_3_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_8_3_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_8_3_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_3_D6SEL_SHIFT)) & XRDC_MRGD_W2_8_3_D6SEL_MASK)

#define XRDC_MRGD_W2_8_3_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_8_3_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_8_3_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_3_D7SEL_SHIFT)) & XRDC_MRGD_W2_8_3_D7SEL_MASK)

#define XRDC_MRGD_W2_8_3_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_8_3_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_8_3_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_8_3_EALO_SHIFT)) & XRDC_MRGD_W2_8_3_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_8_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_8_3_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_8_3_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_8_3_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_8_3_EAL_SHIFT)) & XRDC_MRGD_W3_8_3_EAL_MASK)

#define XRDC_MRGD_W3_8_3_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_8_3_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_8_3_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_8_3_CR_SHIFT)) & XRDC_MRGD_W3_8_3_CR_MASK)
/*! @} */

/*! @name MRGD_W4_8_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_8_3_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_8_3_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_8_3_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_8_3_ACCSET1_SHIFT)) & XRDC_MRGD_W4_8_3_ACCSET1_MASK)

#define XRDC_MRGD_W4_8_3_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_8_3_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_8_3_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_8_3_LKAS1_SHIFT)) & XRDC_MRGD_W4_8_3_LKAS1_MASK)

#define XRDC_MRGD_W4_8_3_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_8_3_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_8_3_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_8_3_ACCSET2_SHIFT)) & XRDC_MRGD_W4_8_3_ACCSET2_MASK)

#define XRDC_MRGD_W4_8_3_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_8_3_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_8_3_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_8_3_LKAS2_SHIFT)) & XRDC_MRGD_W4_8_3_LKAS2_MASK)

#define XRDC_MRGD_W4_8_3_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_8_3_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_8_3_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_8_3_LK2_SHIFT)) & XRDC_MRGD_W4_8_3_LK2_MASK)

#define XRDC_MRGD_W4_8_3_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_8_3_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_8_3_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_8_3_VLD_SHIFT)) & XRDC_MRGD_W4_8_3_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_9_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_9_0_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_9_0_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_9_0_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_9_0_SRTADDR_SHIFT)) & XRDC_MRGD_W0_9_0_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_9_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_9_0_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_9_0_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_9_0_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_9_0_ENDADDR_SHIFT)) & XRDC_MRGD_W1_9_0_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_9_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_9_0_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_9_0_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_9_0_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_0_D0SEL_SHIFT)) & XRDC_MRGD_W2_9_0_D0SEL_MASK)

#define XRDC_MRGD_W2_9_0_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_9_0_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_9_0_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_0_D1SEL_SHIFT)) & XRDC_MRGD_W2_9_0_D1SEL_MASK)

#define XRDC_MRGD_W2_9_0_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_9_0_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_9_0_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_0_D2SEL_SHIFT)) & XRDC_MRGD_W2_9_0_D2SEL_MASK)

#define XRDC_MRGD_W2_9_0_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_9_0_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_9_0_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_0_D3SEL_SHIFT)) & XRDC_MRGD_W2_9_0_D3SEL_MASK)

#define XRDC_MRGD_W2_9_0_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_9_0_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_9_0_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_0_D4SEL_SHIFT)) & XRDC_MRGD_W2_9_0_D4SEL_MASK)

#define XRDC_MRGD_W2_9_0_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_9_0_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_9_0_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_0_D5SEL_SHIFT)) & XRDC_MRGD_W2_9_0_D5SEL_MASK)

#define XRDC_MRGD_W2_9_0_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_9_0_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_9_0_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_0_D6SEL_SHIFT)) & XRDC_MRGD_W2_9_0_D6SEL_MASK)

#define XRDC_MRGD_W2_9_0_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_9_0_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_9_0_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_0_D7SEL_SHIFT)) & XRDC_MRGD_W2_9_0_D7SEL_MASK)

#define XRDC_MRGD_W2_9_0_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_9_0_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_9_0_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_0_EALO_SHIFT)) & XRDC_MRGD_W2_9_0_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_9_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_9_0_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_9_0_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_9_0_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_9_0_EAL_SHIFT)) & XRDC_MRGD_W3_9_0_EAL_MASK)

#define XRDC_MRGD_W3_9_0_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_9_0_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_9_0_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_9_0_CR_SHIFT)) & XRDC_MRGD_W3_9_0_CR_MASK)
/*! @} */

/*! @name MRGD_W4_9_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_9_0_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_9_0_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_9_0_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_0_ACCSET1_SHIFT)) & XRDC_MRGD_W4_9_0_ACCSET1_MASK)

#define XRDC_MRGD_W4_9_0_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_9_0_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_9_0_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_0_LKAS1_SHIFT)) & XRDC_MRGD_W4_9_0_LKAS1_MASK)

#define XRDC_MRGD_W4_9_0_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_9_0_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_9_0_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_0_ACCSET2_SHIFT)) & XRDC_MRGD_W4_9_0_ACCSET2_MASK)

#define XRDC_MRGD_W4_9_0_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_9_0_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_9_0_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_0_LKAS2_SHIFT)) & XRDC_MRGD_W4_9_0_LKAS2_MASK)

#define XRDC_MRGD_W4_9_0_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_9_0_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_9_0_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_0_LK2_SHIFT)) & XRDC_MRGD_W4_9_0_LK2_MASK)

#define XRDC_MRGD_W4_9_0_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_9_0_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_9_0_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_0_VLD_SHIFT)) & XRDC_MRGD_W4_9_0_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_9_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_9_1_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_9_1_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_9_1_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_9_1_SRTADDR_SHIFT)) & XRDC_MRGD_W0_9_1_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_9_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_9_1_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_9_1_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_9_1_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_9_1_ENDADDR_SHIFT)) & XRDC_MRGD_W1_9_1_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_9_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_9_1_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_9_1_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_9_1_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_1_D0SEL_SHIFT)) & XRDC_MRGD_W2_9_1_D0SEL_MASK)

#define XRDC_MRGD_W2_9_1_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_9_1_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_9_1_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_1_D1SEL_SHIFT)) & XRDC_MRGD_W2_9_1_D1SEL_MASK)

#define XRDC_MRGD_W2_9_1_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_9_1_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_9_1_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_1_D2SEL_SHIFT)) & XRDC_MRGD_W2_9_1_D2SEL_MASK)

#define XRDC_MRGD_W2_9_1_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_9_1_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_9_1_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_1_D3SEL_SHIFT)) & XRDC_MRGD_W2_9_1_D3SEL_MASK)

#define XRDC_MRGD_W2_9_1_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_9_1_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_9_1_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_1_D4SEL_SHIFT)) & XRDC_MRGD_W2_9_1_D4SEL_MASK)

#define XRDC_MRGD_W2_9_1_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_9_1_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_9_1_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_1_D5SEL_SHIFT)) & XRDC_MRGD_W2_9_1_D5SEL_MASK)

#define XRDC_MRGD_W2_9_1_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_9_1_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_9_1_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_1_D6SEL_SHIFT)) & XRDC_MRGD_W2_9_1_D6SEL_MASK)

#define XRDC_MRGD_W2_9_1_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_9_1_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_9_1_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_1_D7SEL_SHIFT)) & XRDC_MRGD_W2_9_1_D7SEL_MASK)

#define XRDC_MRGD_W2_9_1_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_9_1_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_9_1_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_1_EALO_SHIFT)) & XRDC_MRGD_W2_9_1_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_9_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_9_1_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_9_1_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_9_1_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_9_1_EAL_SHIFT)) & XRDC_MRGD_W3_9_1_EAL_MASK)

#define XRDC_MRGD_W3_9_1_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_9_1_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_9_1_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_9_1_CR_SHIFT)) & XRDC_MRGD_W3_9_1_CR_MASK)
/*! @} */

/*! @name MRGD_W4_9_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_9_1_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_9_1_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_9_1_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_1_ACCSET1_SHIFT)) & XRDC_MRGD_W4_9_1_ACCSET1_MASK)

#define XRDC_MRGD_W4_9_1_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_9_1_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_9_1_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_1_LKAS1_SHIFT)) & XRDC_MRGD_W4_9_1_LKAS1_MASK)

#define XRDC_MRGD_W4_9_1_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_9_1_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_9_1_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_1_ACCSET2_SHIFT)) & XRDC_MRGD_W4_9_1_ACCSET2_MASK)

#define XRDC_MRGD_W4_9_1_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_9_1_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_9_1_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_1_LKAS2_SHIFT)) & XRDC_MRGD_W4_9_1_LKAS2_MASK)

#define XRDC_MRGD_W4_9_1_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_9_1_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_9_1_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_1_LK2_SHIFT)) & XRDC_MRGD_W4_9_1_LK2_MASK)

#define XRDC_MRGD_W4_9_1_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_9_1_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_9_1_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_1_VLD_SHIFT)) & XRDC_MRGD_W4_9_1_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_9_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_9_2_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_9_2_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_9_2_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_9_2_SRTADDR_SHIFT)) & XRDC_MRGD_W0_9_2_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_9_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_9_2_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_9_2_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_9_2_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_9_2_ENDADDR_SHIFT)) & XRDC_MRGD_W1_9_2_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_9_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_9_2_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_9_2_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_9_2_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_2_D0SEL_SHIFT)) & XRDC_MRGD_W2_9_2_D0SEL_MASK)

#define XRDC_MRGD_W2_9_2_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_9_2_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_9_2_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_2_D1SEL_SHIFT)) & XRDC_MRGD_W2_9_2_D1SEL_MASK)

#define XRDC_MRGD_W2_9_2_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_9_2_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_9_2_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_2_D2SEL_SHIFT)) & XRDC_MRGD_W2_9_2_D2SEL_MASK)

#define XRDC_MRGD_W2_9_2_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_9_2_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_9_2_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_2_D3SEL_SHIFT)) & XRDC_MRGD_W2_9_2_D3SEL_MASK)

#define XRDC_MRGD_W2_9_2_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_9_2_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_9_2_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_2_D4SEL_SHIFT)) & XRDC_MRGD_W2_9_2_D4SEL_MASK)

#define XRDC_MRGD_W2_9_2_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_9_2_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_9_2_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_2_D5SEL_SHIFT)) & XRDC_MRGD_W2_9_2_D5SEL_MASK)

#define XRDC_MRGD_W2_9_2_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_9_2_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_9_2_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_2_D6SEL_SHIFT)) & XRDC_MRGD_W2_9_2_D6SEL_MASK)

#define XRDC_MRGD_W2_9_2_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_9_2_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_9_2_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_2_D7SEL_SHIFT)) & XRDC_MRGD_W2_9_2_D7SEL_MASK)

#define XRDC_MRGD_W2_9_2_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_9_2_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_9_2_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_2_EALO_SHIFT)) & XRDC_MRGD_W2_9_2_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_9_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_9_2_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_9_2_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_9_2_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_9_2_EAL_SHIFT)) & XRDC_MRGD_W3_9_2_EAL_MASK)

#define XRDC_MRGD_W3_9_2_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_9_2_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_9_2_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_9_2_CR_SHIFT)) & XRDC_MRGD_W3_9_2_CR_MASK)
/*! @} */

/*! @name MRGD_W4_9_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_9_2_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_9_2_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_9_2_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_2_ACCSET1_SHIFT)) & XRDC_MRGD_W4_9_2_ACCSET1_MASK)

#define XRDC_MRGD_W4_9_2_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_9_2_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_9_2_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_2_LKAS1_SHIFT)) & XRDC_MRGD_W4_9_2_LKAS1_MASK)

#define XRDC_MRGD_W4_9_2_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_9_2_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_9_2_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_2_ACCSET2_SHIFT)) & XRDC_MRGD_W4_9_2_ACCSET2_MASK)

#define XRDC_MRGD_W4_9_2_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_9_2_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_9_2_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_2_LKAS2_SHIFT)) & XRDC_MRGD_W4_9_2_LKAS2_MASK)

#define XRDC_MRGD_W4_9_2_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_9_2_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_9_2_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_2_LK2_SHIFT)) & XRDC_MRGD_W4_9_2_LK2_MASK)

#define XRDC_MRGD_W4_9_2_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_9_2_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_9_2_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_2_VLD_SHIFT)) & XRDC_MRGD_W4_9_2_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_9_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_9_3_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_9_3_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_9_3_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_9_3_SRTADDR_SHIFT)) & XRDC_MRGD_W0_9_3_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_9_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_9_3_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_9_3_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_9_3_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_9_3_ENDADDR_SHIFT)) & XRDC_MRGD_W1_9_3_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_9_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_9_3_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_9_3_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_9_3_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_3_D0SEL_SHIFT)) & XRDC_MRGD_W2_9_3_D0SEL_MASK)

#define XRDC_MRGD_W2_9_3_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_9_3_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_9_3_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_3_D1SEL_SHIFT)) & XRDC_MRGD_W2_9_3_D1SEL_MASK)

#define XRDC_MRGD_W2_9_3_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_9_3_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_9_3_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_3_D2SEL_SHIFT)) & XRDC_MRGD_W2_9_3_D2SEL_MASK)

#define XRDC_MRGD_W2_9_3_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_9_3_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_9_3_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_3_D3SEL_SHIFT)) & XRDC_MRGD_W2_9_3_D3SEL_MASK)

#define XRDC_MRGD_W2_9_3_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_9_3_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_9_3_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_3_D4SEL_SHIFT)) & XRDC_MRGD_W2_9_3_D4SEL_MASK)

#define XRDC_MRGD_W2_9_3_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_9_3_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_9_3_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_3_D5SEL_SHIFT)) & XRDC_MRGD_W2_9_3_D5SEL_MASK)

#define XRDC_MRGD_W2_9_3_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_9_3_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_9_3_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_3_D6SEL_SHIFT)) & XRDC_MRGD_W2_9_3_D6SEL_MASK)

#define XRDC_MRGD_W2_9_3_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_9_3_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_9_3_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_3_D7SEL_SHIFT)) & XRDC_MRGD_W2_9_3_D7SEL_MASK)

#define XRDC_MRGD_W2_9_3_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_9_3_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_9_3_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_3_EALO_SHIFT)) & XRDC_MRGD_W2_9_3_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_9_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_9_3_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_9_3_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_9_3_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_9_3_EAL_SHIFT)) & XRDC_MRGD_W3_9_3_EAL_MASK)

#define XRDC_MRGD_W3_9_3_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_9_3_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_9_3_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_9_3_CR_SHIFT)) & XRDC_MRGD_W3_9_3_CR_MASK)
/*! @} */

/*! @name MRGD_W4_9_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_9_3_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_9_3_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_9_3_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_3_ACCSET1_SHIFT)) & XRDC_MRGD_W4_9_3_ACCSET1_MASK)

#define XRDC_MRGD_W4_9_3_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_9_3_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_9_3_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_3_LKAS1_SHIFT)) & XRDC_MRGD_W4_9_3_LKAS1_MASK)

#define XRDC_MRGD_W4_9_3_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_9_3_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_9_3_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_3_ACCSET2_SHIFT)) & XRDC_MRGD_W4_9_3_ACCSET2_MASK)

#define XRDC_MRGD_W4_9_3_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_9_3_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_9_3_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_3_LKAS2_SHIFT)) & XRDC_MRGD_W4_9_3_LKAS2_MASK)

#define XRDC_MRGD_W4_9_3_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_9_3_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_9_3_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_3_LK2_SHIFT)) & XRDC_MRGD_W4_9_3_LK2_MASK)

#define XRDC_MRGD_W4_9_3_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_9_3_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_9_3_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_3_VLD_SHIFT)) & XRDC_MRGD_W4_9_3_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_9_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_9_4_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_9_4_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_9_4_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_9_4_SRTADDR_SHIFT)) & XRDC_MRGD_W0_9_4_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_9_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_9_4_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_9_4_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_9_4_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_9_4_ENDADDR_SHIFT)) & XRDC_MRGD_W1_9_4_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_9_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_9_4_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_9_4_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_9_4_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_4_D0SEL_SHIFT)) & XRDC_MRGD_W2_9_4_D0SEL_MASK)

#define XRDC_MRGD_W2_9_4_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_9_4_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_9_4_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_4_D1SEL_SHIFT)) & XRDC_MRGD_W2_9_4_D1SEL_MASK)

#define XRDC_MRGD_W2_9_4_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_9_4_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_9_4_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_4_D2SEL_SHIFT)) & XRDC_MRGD_W2_9_4_D2SEL_MASK)

#define XRDC_MRGD_W2_9_4_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_9_4_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_9_4_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_4_D3SEL_SHIFT)) & XRDC_MRGD_W2_9_4_D3SEL_MASK)

#define XRDC_MRGD_W2_9_4_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_9_4_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_9_4_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_4_D4SEL_SHIFT)) & XRDC_MRGD_W2_9_4_D4SEL_MASK)

#define XRDC_MRGD_W2_9_4_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_9_4_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_9_4_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_4_D5SEL_SHIFT)) & XRDC_MRGD_W2_9_4_D5SEL_MASK)

#define XRDC_MRGD_W2_9_4_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_9_4_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_9_4_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_4_D6SEL_SHIFT)) & XRDC_MRGD_W2_9_4_D6SEL_MASK)

#define XRDC_MRGD_W2_9_4_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_9_4_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_9_4_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_4_D7SEL_SHIFT)) & XRDC_MRGD_W2_9_4_D7SEL_MASK)

#define XRDC_MRGD_W2_9_4_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_9_4_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_9_4_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_4_EALO_SHIFT)) & XRDC_MRGD_W2_9_4_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_9_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_9_4_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_9_4_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_9_4_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_9_4_EAL_SHIFT)) & XRDC_MRGD_W3_9_4_EAL_MASK)

#define XRDC_MRGD_W3_9_4_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_9_4_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_9_4_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_9_4_CR_SHIFT)) & XRDC_MRGD_W3_9_4_CR_MASK)
/*! @} */

/*! @name MRGD_W4_9_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_9_4_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_9_4_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_9_4_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_4_ACCSET1_SHIFT)) & XRDC_MRGD_W4_9_4_ACCSET1_MASK)

#define XRDC_MRGD_W4_9_4_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_9_4_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_9_4_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_4_LKAS1_SHIFT)) & XRDC_MRGD_W4_9_4_LKAS1_MASK)

#define XRDC_MRGD_W4_9_4_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_9_4_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_9_4_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_4_ACCSET2_SHIFT)) & XRDC_MRGD_W4_9_4_ACCSET2_MASK)

#define XRDC_MRGD_W4_9_4_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_9_4_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_9_4_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_4_LKAS2_SHIFT)) & XRDC_MRGD_W4_9_4_LKAS2_MASK)

#define XRDC_MRGD_W4_9_4_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_9_4_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_9_4_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_4_LK2_SHIFT)) & XRDC_MRGD_W4_9_4_LK2_MASK)

#define XRDC_MRGD_W4_9_4_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_9_4_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_9_4_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_4_VLD_SHIFT)) & XRDC_MRGD_W4_9_4_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_9_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_9_5_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_9_5_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_9_5_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_9_5_SRTADDR_SHIFT)) & XRDC_MRGD_W0_9_5_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_9_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_9_5_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_9_5_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_9_5_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_9_5_ENDADDR_SHIFT)) & XRDC_MRGD_W1_9_5_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_9_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_9_5_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_9_5_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_9_5_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_5_D0SEL_SHIFT)) & XRDC_MRGD_W2_9_5_D0SEL_MASK)

#define XRDC_MRGD_W2_9_5_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_9_5_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_9_5_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_5_D1SEL_SHIFT)) & XRDC_MRGD_W2_9_5_D1SEL_MASK)

#define XRDC_MRGD_W2_9_5_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_9_5_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_9_5_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_5_D2SEL_SHIFT)) & XRDC_MRGD_W2_9_5_D2SEL_MASK)

#define XRDC_MRGD_W2_9_5_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_9_5_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_9_5_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_5_D3SEL_SHIFT)) & XRDC_MRGD_W2_9_5_D3SEL_MASK)

#define XRDC_MRGD_W2_9_5_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_9_5_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_9_5_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_5_D4SEL_SHIFT)) & XRDC_MRGD_W2_9_5_D4SEL_MASK)

#define XRDC_MRGD_W2_9_5_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_9_5_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_9_5_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_5_D5SEL_SHIFT)) & XRDC_MRGD_W2_9_5_D5SEL_MASK)

#define XRDC_MRGD_W2_9_5_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_9_5_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_9_5_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_5_D6SEL_SHIFT)) & XRDC_MRGD_W2_9_5_D6SEL_MASK)

#define XRDC_MRGD_W2_9_5_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_9_5_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_9_5_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_5_D7SEL_SHIFT)) & XRDC_MRGD_W2_9_5_D7SEL_MASK)

#define XRDC_MRGD_W2_9_5_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_9_5_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_9_5_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_5_EALO_SHIFT)) & XRDC_MRGD_W2_9_5_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_9_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_9_5_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_9_5_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_9_5_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_9_5_EAL_SHIFT)) & XRDC_MRGD_W3_9_5_EAL_MASK)

#define XRDC_MRGD_W3_9_5_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_9_5_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_9_5_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_9_5_CR_SHIFT)) & XRDC_MRGD_W3_9_5_CR_MASK)
/*! @} */

/*! @name MRGD_W4_9_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_9_5_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_9_5_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_9_5_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_5_ACCSET1_SHIFT)) & XRDC_MRGD_W4_9_5_ACCSET1_MASK)

#define XRDC_MRGD_W4_9_5_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_9_5_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_9_5_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_5_LKAS1_SHIFT)) & XRDC_MRGD_W4_9_5_LKAS1_MASK)

#define XRDC_MRGD_W4_9_5_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_9_5_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_9_5_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_5_ACCSET2_SHIFT)) & XRDC_MRGD_W4_9_5_ACCSET2_MASK)

#define XRDC_MRGD_W4_9_5_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_9_5_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_9_5_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_5_LKAS2_SHIFT)) & XRDC_MRGD_W4_9_5_LKAS2_MASK)

#define XRDC_MRGD_W4_9_5_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_9_5_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_9_5_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_5_LK2_SHIFT)) & XRDC_MRGD_W4_9_5_LK2_MASK)

#define XRDC_MRGD_W4_9_5_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_9_5_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_9_5_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_5_VLD_SHIFT)) & XRDC_MRGD_W4_9_5_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_9_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_9_6_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_9_6_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_9_6_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_9_6_SRTADDR_SHIFT)) & XRDC_MRGD_W0_9_6_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_9_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_9_6_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_9_6_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_9_6_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_9_6_ENDADDR_SHIFT)) & XRDC_MRGD_W1_9_6_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_9_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_9_6_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_9_6_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_9_6_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_6_D0SEL_SHIFT)) & XRDC_MRGD_W2_9_6_D0SEL_MASK)

#define XRDC_MRGD_W2_9_6_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_9_6_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_9_6_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_6_D1SEL_SHIFT)) & XRDC_MRGD_W2_9_6_D1SEL_MASK)

#define XRDC_MRGD_W2_9_6_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_9_6_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_9_6_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_6_D2SEL_SHIFT)) & XRDC_MRGD_W2_9_6_D2SEL_MASK)

#define XRDC_MRGD_W2_9_6_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_9_6_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_9_6_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_6_D3SEL_SHIFT)) & XRDC_MRGD_W2_9_6_D3SEL_MASK)

#define XRDC_MRGD_W2_9_6_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_9_6_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_9_6_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_6_D4SEL_SHIFT)) & XRDC_MRGD_W2_9_6_D4SEL_MASK)

#define XRDC_MRGD_W2_9_6_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_9_6_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_9_6_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_6_D5SEL_SHIFT)) & XRDC_MRGD_W2_9_6_D5SEL_MASK)

#define XRDC_MRGD_W2_9_6_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_9_6_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_9_6_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_6_D6SEL_SHIFT)) & XRDC_MRGD_W2_9_6_D6SEL_MASK)

#define XRDC_MRGD_W2_9_6_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_9_6_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_9_6_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_6_D7SEL_SHIFT)) & XRDC_MRGD_W2_9_6_D7SEL_MASK)

#define XRDC_MRGD_W2_9_6_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_9_6_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_9_6_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_6_EALO_SHIFT)) & XRDC_MRGD_W2_9_6_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_9_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_9_6_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_9_6_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_9_6_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_9_6_EAL_SHIFT)) & XRDC_MRGD_W3_9_6_EAL_MASK)

#define XRDC_MRGD_W3_9_6_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_9_6_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_9_6_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_9_6_CR_SHIFT)) & XRDC_MRGD_W3_9_6_CR_MASK)
/*! @} */

/*! @name MRGD_W4_9_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_9_6_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_9_6_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_9_6_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_6_ACCSET1_SHIFT)) & XRDC_MRGD_W4_9_6_ACCSET1_MASK)

#define XRDC_MRGD_W4_9_6_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_9_6_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_9_6_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_6_LKAS1_SHIFT)) & XRDC_MRGD_W4_9_6_LKAS1_MASK)

#define XRDC_MRGD_W4_9_6_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_9_6_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_9_6_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_6_ACCSET2_SHIFT)) & XRDC_MRGD_W4_9_6_ACCSET2_MASK)

#define XRDC_MRGD_W4_9_6_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_9_6_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_9_6_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_6_LKAS2_SHIFT)) & XRDC_MRGD_W4_9_6_LKAS2_MASK)

#define XRDC_MRGD_W4_9_6_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_9_6_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_9_6_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_6_LK2_SHIFT)) & XRDC_MRGD_W4_9_6_LK2_MASK)

#define XRDC_MRGD_W4_9_6_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_9_6_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_9_6_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_6_VLD_SHIFT)) & XRDC_MRGD_W4_9_6_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_9_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_9_7_SRTADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W0_9_7_SRTADDR_SHIFT           (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_9_7_SRTADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_9_7_SRTADDR_SHIFT)) & XRDC_MRGD_W0_9_7_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_9_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_9_7_ENDADDR_MASK            (0xFFFFFFE0U)
#define XRDC_MRGD_W1_9_7_ENDADDR_SHIFT           (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_9_7_ENDADDR(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_9_7_ENDADDR_SHIFT)) & XRDC_MRGD_W1_9_7_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_9_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_9_7_D0SEL_MASK              (0x7U)
#define XRDC_MRGD_W2_9_7_D0SEL_SHIFT             (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_9_7_D0SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_7_D0SEL_SHIFT)) & XRDC_MRGD_W2_9_7_D0SEL_MASK)

#define XRDC_MRGD_W2_9_7_D1SEL_MASK              (0x38U)
#define XRDC_MRGD_W2_9_7_D1SEL_SHIFT             (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_9_7_D1SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_7_D1SEL_SHIFT)) & XRDC_MRGD_W2_9_7_D1SEL_MASK)

#define XRDC_MRGD_W2_9_7_D2SEL_MASK              (0x1C0U)
#define XRDC_MRGD_W2_9_7_D2SEL_SHIFT             (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_9_7_D2SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_7_D2SEL_SHIFT)) & XRDC_MRGD_W2_9_7_D2SEL_MASK)

#define XRDC_MRGD_W2_9_7_D3SEL_MASK              (0xE00U)
#define XRDC_MRGD_W2_9_7_D3SEL_SHIFT             (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_9_7_D3SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_7_D3SEL_SHIFT)) & XRDC_MRGD_W2_9_7_D3SEL_MASK)

#define XRDC_MRGD_W2_9_7_D4SEL_MASK              (0x7000U)
#define XRDC_MRGD_W2_9_7_D4SEL_SHIFT             (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_9_7_D4SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_7_D4SEL_SHIFT)) & XRDC_MRGD_W2_9_7_D4SEL_MASK)

#define XRDC_MRGD_W2_9_7_D5SEL_MASK              (0x38000U)
#define XRDC_MRGD_W2_9_7_D5SEL_SHIFT             (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_9_7_D5SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_7_D5SEL_SHIFT)) & XRDC_MRGD_W2_9_7_D5SEL_MASK)

#define XRDC_MRGD_W2_9_7_D6SEL_MASK              (0x1C0000U)
#define XRDC_MRGD_W2_9_7_D6SEL_SHIFT             (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_9_7_D6SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_7_D6SEL_SHIFT)) & XRDC_MRGD_W2_9_7_D6SEL_MASK)

#define XRDC_MRGD_W2_9_7_D7SEL_MASK              (0xE00000U)
#define XRDC_MRGD_W2_9_7_D7SEL_SHIFT             (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_9_7_D7SEL(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_7_D7SEL_SHIFT)) & XRDC_MRGD_W2_9_7_D7SEL_MASK)

#define XRDC_MRGD_W2_9_7_EALO_MASK               (0xF000000U)
#define XRDC_MRGD_W2_9_7_EALO_SHIFT              (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_9_7_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_9_7_EALO_SHIFT)) & XRDC_MRGD_W2_9_7_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_9_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_9_7_EAL_MASK                (0x3000000U)
#define XRDC_MRGD_W3_9_7_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_9_7_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_9_7_EAL_SHIFT)) & XRDC_MRGD_W3_9_7_EAL_MASK)

#define XRDC_MRGD_W3_9_7_CR_MASK                 (0x80000000U)
#define XRDC_MRGD_W3_9_7_CR_SHIFT                (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_9_7_CR(x)                   (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_9_7_CR_SHIFT)) & XRDC_MRGD_W3_9_7_CR_MASK)
/*! @} */

/*! @name MRGD_W4_9_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_9_7_ACCSET1_MASK            (0xFFFU)
#define XRDC_MRGD_W4_9_7_ACCSET1_SHIFT           (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_9_7_ACCSET1(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_7_ACCSET1_SHIFT)) & XRDC_MRGD_W4_9_7_ACCSET1_MASK)

#define XRDC_MRGD_W4_9_7_LKAS1_MASK              (0x1000U)
#define XRDC_MRGD_W4_9_7_LKAS1_SHIFT             (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_9_7_LKAS1(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_7_LKAS1_SHIFT)) & XRDC_MRGD_W4_9_7_LKAS1_MASK)

#define XRDC_MRGD_W4_9_7_ACCSET2_MASK            (0xFFF0000U)
#define XRDC_MRGD_W4_9_7_ACCSET2_SHIFT           (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_9_7_ACCSET2(x)              (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_7_ACCSET2_SHIFT)) & XRDC_MRGD_W4_9_7_ACCSET2_MASK)

#define XRDC_MRGD_W4_9_7_LKAS2_MASK              (0x10000000U)
#define XRDC_MRGD_W4_9_7_LKAS2_SHIFT             (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_9_7_LKAS2(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_7_LKAS2_SHIFT)) & XRDC_MRGD_W4_9_7_LKAS2_MASK)

#define XRDC_MRGD_W4_9_7_LK2_MASK                (0x60000000U)
#define XRDC_MRGD_W4_9_7_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_9_7_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_7_LK2_SHIFT)) & XRDC_MRGD_W4_9_7_LK2_MASK)

#define XRDC_MRGD_W4_9_7_VLD_MASK                (0x80000000U)
#define XRDC_MRGD_W4_9_7_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_9_7_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_9_7_VLD_SHIFT)) & XRDC_MRGD_W4_9_7_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_10_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_10_0_SRTADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W0_10_0_SRTADDR_SHIFT          (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_10_0_SRTADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_10_0_SRTADDR_SHIFT)) & XRDC_MRGD_W0_10_0_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_10_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_10_0_ENDADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W1_10_0_ENDADDR_SHIFT          (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_10_0_ENDADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_10_0_ENDADDR_SHIFT)) & XRDC_MRGD_W1_10_0_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_10_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_10_0_D0SEL_MASK             (0x7U)
#define XRDC_MRGD_W2_10_0_D0SEL_SHIFT            (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_10_0_D0SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_0_D0SEL_SHIFT)) & XRDC_MRGD_W2_10_0_D0SEL_MASK)

#define XRDC_MRGD_W2_10_0_D1SEL_MASK             (0x38U)
#define XRDC_MRGD_W2_10_0_D1SEL_SHIFT            (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_10_0_D1SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_0_D1SEL_SHIFT)) & XRDC_MRGD_W2_10_0_D1SEL_MASK)

#define XRDC_MRGD_W2_10_0_D2SEL_MASK             (0x1C0U)
#define XRDC_MRGD_W2_10_0_D2SEL_SHIFT            (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_10_0_D2SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_0_D2SEL_SHIFT)) & XRDC_MRGD_W2_10_0_D2SEL_MASK)

#define XRDC_MRGD_W2_10_0_D3SEL_MASK             (0xE00U)
#define XRDC_MRGD_W2_10_0_D3SEL_SHIFT            (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_10_0_D3SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_0_D3SEL_SHIFT)) & XRDC_MRGD_W2_10_0_D3SEL_MASK)

#define XRDC_MRGD_W2_10_0_D4SEL_MASK             (0x7000U)
#define XRDC_MRGD_W2_10_0_D4SEL_SHIFT            (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_10_0_D4SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_0_D4SEL_SHIFT)) & XRDC_MRGD_W2_10_0_D4SEL_MASK)

#define XRDC_MRGD_W2_10_0_D5SEL_MASK             (0x38000U)
#define XRDC_MRGD_W2_10_0_D5SEL_SHIFT            (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_10_0_D5SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_0_D5SEL_SHIFT)) & XRDC_MRGD_W2_10_0_D5SEL_MASK)

#define XRDC_MRGD_W2_10_0_D6SEL_MASK             (0x1C0000U)
#define XRDC_MRGD_W2_10_0_D6SEL_SHIFT            (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_10_0_D6SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_0_D6SEL_SHIFT)) & XRDC_MRGD_W2_10_0_D6SEL_MASK)

#define XRDC_MRGD_W2_10_0_D7SEL_MASK             (0xE00000U)
#define XRDC_MRGD_W2_10_0_D7SEL_SHIFT            (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_10_0_D7SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_0_D7SEL_SHIFT)) & XRDC_MRGD_W2_10_0_D7SEL_MASK)

#define XRDC_MRGD_W2_10_0_EALO_MASK              (0xF000000U)
#define XRDC_MRGD_W2_10_0_EALO_SHIFT             (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_10_0_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_0_EALO_SHIFT)) & XRDC_MRGD_W2_10_0_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_10_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_10_0_EAL_MASK               (0x3000000U)
#define XRDC_MRGD_W3_10_0_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_10_0_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_10_0_EAL_SHIFT)) & XRDC_MRGD_W3_10_0_EAL_MASK)

#define XRDC_MRGD_W3_10_0_CR_MASK                (0x80000000U)
#define XRDC_MRGD_W3_10_0_CR_SHIFT               (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_10_0_CR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_10_0_CR_SHIFT)) & XRDC_MRGD_W3_10_0_CR_MASK)
/*! @} */

/*! @name MRGD_W4_10_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_10_0_ACCSET1_MASK           (0xFFFU)
#define XRDC_MRGD_W4_10_0_ACCSET1_SHIFT          (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_10_0_ACCSET1(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_0_ACCSET1_SHIFT)) & XRDC_MRGD_W4_10_0_ACCSET1_MASK)

#define XRDC_MRGD_W4_10_0_LKAS1_MASK             (0x1000U)
#define XRDC_MRGD_W4_10_0_LKAS1_SHIFT            (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_10_0_LKAS1(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_0_LKAS1_SHIFT)) & XRDC_MRGD_W4_10_0_LKAS1_MASK)

#define XRDC_MRGD_W4_10_0_ACCSET2_MASK           (0xFFF0000U)
#define XRDC_MRGD_W4_10_0_ACCSET2_SHIFT          (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_10_0_ACCSET2(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_0_ACCSET2_SHIFT)) & XRDC_MRGD_W4_10_0_ACCSET2_MASK)

#define XRDC_MRGD_W4_10_0_LKAS2_MASK             (0x10000000U)
#define XRDC_MRGD_W4_10_0_LKAS2_SHIFT            (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_10_0_LKAS2(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_0_LKAS2_SHIFT)) & XRDC_MRGD_W4_10_0_LKAS2_MASK)

#define XRDC_MRGD_W4_10_0_LK2_MASK               (0x60000000U)
#define XRDC_MRGD_W4_10_0_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_10_0_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_0_LK2_SHIFT)) & XRDC_MRGD_W4_10_0_LK2_MASK)

#define XRDC_MRGD_W4_10_0_VLD_MASK               (0x80000000U)
#define XRDC_MRGD_W4_10_0_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_10_0_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_0_VLD_SHIFT)) & XRDC_MRGD_W4_10_0_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_10_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_10_1_SRTADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W0_10_1_SRTADDR_SHIFT          (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_10_1_SRTADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_10_1_SRTADDR_SHIFT)) & XRDC_MRGD_W0_10_1_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_10_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_10_1_ENDADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W1_10_1_ENDADDR_SHIFT          (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_10_1_ENDADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_10_1_ENDADDR_SHIFT)) & XRDC_MRGD_W1_10_1_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_10_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_10_1_D0SEL_MASK             (0x7U)
#define XRDC_MRGD_W2_10_1_D0SEL_SHIFT            (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_10_1_D0SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_1_D0SEL_SHIFT)) & XRDC_MRGD_W2_10_1_D0SEL_MASK)

#define XRDC_MRGD_W2_10_1_D1SEL_MASK             (0x38U)
#define XRDC_MRGD_W2_10_1_D1SEL_SHIFT            (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_10_1_D1SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_1_D1SEL_SHIFT)) & XRDC_MRGD_W2_10_1_D1SEL_MASK)

#define XRDC_MRGD_W2_10_1_D2SEL_MASK             (0x1C0U)
#define XRDC_MRGD_W2_10_1_D2SEL_SHIFT            (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_10_1_D2SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_1_D2SEL_SHIFT)) & XRDC_MRGD_W2_10_1_D2SEL_MASK)

#define XRDC_MRGD_W2_10_1_D3SEL_MASK             (0xE00U)
#define XRDC_MRGD_W2_10_1_D3SEL_SHIFT            (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_10_1_D3SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_1_D3SEL_SHIFT)) & XRDC_MRGD_W2_10_1_D3SEL_MASK)

#define XRDC_MRGD_W2_10_1_D4SEL_MASK             (0x7000U)
#define XRDC_MRGD_W2_10_1_D4SEL_SHIFT            (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_10_1_D4SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_1_D4SEL_SHIFT)) & XRDC_MRGD_W2_10_1_D4SEL_MASK)

#define XRDC_MRGD_W2_10_1_D5SEL_MASK             (0x38000U)
#define XRDC_MRGD_W2_10_1_D5SEL_SHIFT            (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_10_1_D5SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_1_D5SEL_SHIFT)) & XRDC_MRGD_W2_10_1_D5SEL_MASK)

#define XRDC_MRGD_W2_10_1_D6SEL_MASK             (0x1C0000U)
#define XRDC_MRGD_W2_10_1_D6SEL_SHIFT            (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_10_1_D6SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_1_D6SEL_SHIFT)) & XRDC_MRGD_W2_10_1_D6SEL_MASK)

#define XRDC_MRGD_W2_10_1_D7SEL_MASK             (0xE00000U)
#define XRDC_MRGD_W2_10_1_D7SEL_SHIFT            (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_10_1_D7SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_1_D7SEL_SHIFT)) & XRDC_MRGD_W2_10_1_D7SEL_MASK)

#define XRDC_MRGD_W2_10_1_EALO_MASK              (0xF000000U)
#define XRDC_MRGD_W2_10_1_EALO_SHIFT             (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_10_1_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_1_EALO_SHIFT)) & XRDC_MRGD_W2_10_1_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_10_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_10_1_EAL_MASK               (0x3000000U)
#define XRDC_MRGD_W3_10_1_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_10_1_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_10_1_EAL_SHIFT)) & XRDC_MRGD_W3_10_1_EAL_MASK)

#define XRDC_MRGD_W3_10_1_CR_MASK                (0x80000000U)
#define XRDC_MRGD_W3_10_1_CR_SHIFT               (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_10_1_CR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_10_1_CR_SHIFT)) & XRDC_MRGD_W3_10_1_CR_MASK)
/*! @} */

/*! @name MRGD_W4_10_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_10_1_ACCSET1_MASK           (0xFFFU)
#define XRDC_MRGD_W4_10_1_ACCSET1_SHIFT          (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_10_1_ACCSET1(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_1_ACCSET1_SHIFT)) & XRDC_MRGD_W4_10_1_ACCSET1_MASK)

#define XRDC_MRGD_W4_10_1_LKAS1_MASK             (0x1000U)
#define XRDC_MRGD_W4_10_1_LKAS1_SHIFT            (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_10_1_LKAS1(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_1_LKAS1_SHIFT)) & XRDC_MRGD_W4_10_1_LKAS1_MASK)

#define XRDC_MRGD_W4_10_1_ACCSET2_MASK           (0xFFF0000U)
#define XRDC_MRGD_W4_10_1_ACCSET2_SHIFT          (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_10_1_ACCSET2(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_1_ACCSET2_SHIFT)) & XRDC_MRGD_W4_10_1_ACCSET2_MASK)

#define XRDC_MRGD_W4_10_1_LKAS2_MASK             (0x10000000U)
#define XRDC_MRGD_W4_10_1_LKAS2_SHIFT            (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_10_1_LKAS2(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_1_LKAS2_SHIFT)) & XRDC_MRGD_W4_10_1_LKAS2_MASK)

#define XRDC_MRGD_W4_10_1_LK2_MASK               (0x60000000U)
#define XRDC_MRGD_W4_10_1_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_10_1_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_1_LK2_SHIFT)) & XRDC_MRGD_W4_10_1_LK2_MASK)

#define XRDC_MRGD_W4_10_1_VLD_MASK               (0x80000000U)
#define XRDC_MRGD_W4_10_1_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_10_1_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_1_VLD_SHIFT)) & XRDC_MRGD_W4_10_1_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_10_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_10_2_SRTADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W0_10_2_SRTADDR_SHIFT          (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_10_2_SRTADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_10_2_SRTADDR_SHIFT)) & XRDC_MRGD_W0_10_2_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_10_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_10_2_ENDADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W1_10_2_ENDADDR_SHIFT          (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_10_2_ENDADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_10_2_ENDADDR_SHIFT)) & XRDC_MRGD_W1_10_2_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_10_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_10_2_D0SEL_MASK             (0x7U)
#define XRDC_MRGD_W2_10_2_D0SEL_SHIFT            (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_10_2_D0SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_2_D0SEL_SHIFT)) & XRDC_MRGD_W2_10_2_D0SEL_MASK)

#define XRDC_MRGD_W2_10_2_D1SEL_MASK             (0x38U)
#define XRDC_MRGD_W2_10_2_D1SEL_SHIFT            (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_10_2_D1SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_2_D1SEL_SHIFT)) & XRDC_MRGD_W2_10_2_D1SEL_MASK)

#define XRDC_MRGD_W2_10_2_D2SEL_MASK             (0x1C0U)
#define XRDC_MRGD_W2_10_2_D2SEL_SHIFT            (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_10_2_D2SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_2_D2SEL_SHIFT)) & XRDC_MRGD_W2_10_2_D2SEL_MASK)

#define XRDC_MRGD_W2_10_2_D3SEL_MASK             (0xE00U)
#define XRDC_MRGD_W2_10_2_D3SEL_SHIFT            (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_10_2_D3SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_2_D3SEL_SHIFT)) & XRDC_MRGD_W2_10_2_D3SEL_MASK)

#define XRDC_MRGD_W2_10_2_D4SEL_MASK             (0x7000U)
#define XRDC_MRGD_W2_10_2_D4SEL_SHIFT            (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_10_2_D4SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_2_D4SEL_SHIFT)) & XRDC_MRGD_W2_10_2_D4SEL_MASK)

#define XRDC_MRGD_W2_10_2_D5SEL_MASK             (0x38000U)
#define XRDC_MRGD_W2_10_2_D5SEL_SHIFT            (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_10_2_D5SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_2_D5SEL_SHIFT)) & XRDC_MRGD_W2_10_2_D5SEL_MASK)

#define XRDC_MRGD_W2_10_2_D6SEL_MASK             (0x1C0000U)
#define XRDC_MRGD_W2_10_2_D6SEL_SHIFT            (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_10_2_D6SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_2_D6SEL_SHIFT)) & XRDC_MRGD_W2_10_2_D6SEL_MASK)

#define XRDC_MRGD_W2_10_2_D7SEL_MASK             (0xE00000U)
#define XRDC_MRGD_W2_10_2_D7SEL_SHIFT            (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_10_2_D7SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_2_D7SEL_SHIFT)) & XRDC_MRGD_W2_10_2_D7SEL_MASK)

#define XRDC_MRGD_W2_10_2_EALO_MASK              (0xF000000U)
#define XRDC_MRGD_W2_10_2_EALO_SHIFT             (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_10_2_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_2_EALO_SHIFT)) & XRDC_MRGD_W2_10_2_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_10_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_10_2_EAL_MASK               (0x3000000U)
#define XRDC_MRGD_W3_10_2_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_10_2_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_10_2_EAL_SHIFT)) & XRDC_MRGD_W3_10_2_EAL_MASK)

#define XRDC_MRGD_W3_10_2_CR_MASK                (0x80000000U)
#define XRDC_MRGD_W3_10_2_CR_SHIFT               (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_10_2_CR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_10_2_CR_SHIFT)) & XRDC_MRGD_W3_10_2_CR_MASK)
/*! @} */

/*! @name MRGD_W4_10_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_10_2_ACCSET1_MASK           (0xFFFU)
#define XRDC_MRGD_W4_10_2_ACCSET1_SHIFT          (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_10_2_ACCSET1(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_2_ACCSET1_SHIFT)) & XRDC_MRGD_W4_10_2_ACCSET1_MASK)

#define XRDC_MRGD_W4_10_2_LKAS1_MASK             (0x1000U)
#define XRDC_MRGD_W4_10_2_LKAS1_SHIFT            (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_10_2_LKAS1(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_2_LKAS1_SHIFT)) & XRDC_MRGD_W4_10_2_LKAS1_MASK)

#define XRDC_MRGD_W4_10_2_ACCSET2_MASK           (0xFFF0000U)
#define XRDC_MRGD_W4_10_2_ACCSET2_SHIFT          (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_10_2_ACCSET2(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_2_ACCSET2_SHIFT)) & XRDC_MRGD_W4_10_2_ACCSET2_MASK)

#define XRDC_MRGD_W4_10_2_LKAS2_MASK             (0x10000000U)
#define XRDC_MRGD_W4_10_2_LKAS2_SHIFT            (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_10_2_LKAS2(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_2_LKAS2_SHIFT)) & XRDC_MRGD_W4_10_2_LKAS2_MASK)

#define XRDC_MRGD_W4_10_2_LK2_MASK               (0x60000000U)
#define XRDC_MRGD_W4_10_2_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_10_2_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_2_LK2_SHIFT)) & XRDC_MRGD_W4_10_2_LK2_MASK)

#define XRDC_MRGD_W4_10_2_VLD_MASK               (0x80000000U)
#define XRDC_MRGD_W4_10_2_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_10_2_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_2_VLD_SHIFT)) & XRDC_MRGD_W4_10_2_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_10_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_10_3_SRTADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W0_10_3_SRTADDR_SHIFT          (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_10_3_SRTADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_10_3_SRTADDR_SHIFT)) & XRDC_MRGD_W0_10_3_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_10_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_10_3_ENDADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W1_10_3_ENDADDR_SHIFT          (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_10_3_ENDADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_10_3_ENDADDR_SHIFT)) & XRDC_MRGD_W1_10_3_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_10_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_10_3_D0SEL_MASK             (0x7U)
#define XRDC_MRGD_W2_10_3_D0SEL_SHIFT            (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_10_3_D0SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_3_D0SEL_SHIFT)) & XRDC_MRGD_W2_10_3_D0SEL_MASK)

#define XRDC_MRGD_W2_10_3_D1SEL_MASK             (0x38U)
#define XRDC_MRGD_W2_10_3_D1SEL_SHIFT            (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_10_3_D1SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_3_D1SEL_SHIFT)) & XRDC_MRGD_W2_10_3_D1SEL_MASK)

#define XRDC_MRGD_W2_10_3_D2SEL_MASK             (0x1C0U)
#define XRDC_MRGD_W2_10_3_D2SEL_SHIFT            (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_10_3_D2SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_3_D2SEL_SHIFT)) & XRDC_MRGD_W2_10_3_D2SEL_MASK)

#define XRDC_MRGD_W2_10_3_D3SEL_MASK             (0xE00U)
#define XRDC_MRGD_W2_10_3_D3SEL_SHIFT            (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_10_3_D3SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_3_D3SEL_SHIFT)) & XRDC_MRGD_W2_10_3_D3SEL_MASK)

#define XRDC_MRGD_W2_10_3_D4SEL_MASK             (0x7000U)
#define XRDC_MRGD_W2_10_3_D4SEL_SHIFT            (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_10_3_D4SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_3_D4SEL_SHIFT)) & XRDC_MRGD_W2_10_3_D4SEL_MASK)

#define XRDC_MRGD_W2_10_3_D5SEL_MASK             (0x38000U)
#define XRDC_MRGD_W2_10_3_D5SEL_SHIFT            (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_10_3_D5SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_3_D5SEL_SHIFT)) & XRDC_MRGD_W2_10_3_D5SEL_MASK)

#define XRDC_MRGD_W2_10_3_D6SEL_MASK             (0x1C0000U)
#define XRDC_MRGD_W2_10_3_D6SEL_SHIFT            (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_10_3_D6SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_3_D6SEL_SHIFT)) & XRDC_MRGD_W2_10_3_D6SEL_MASK)

#define XRDC_MRGD_W2_10_3_D7SEL_MASK             (0xE00000U)
#define XRDC_MRGD_W2_10_3_D7SEL_SHIFT            (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_10_3_D7SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_3_D7SEL_SHIFT)) & XRDC_MRGD_W2_10_3_D7SEL_MASK)

#define XRDC_MRGD_W2_10_3_EALO_MASK              (0xF000000U)
#define XRDC_MRGD_W2_10_3_EALO_SHIFT             (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_10_3_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_3_EALO_SHIFT)) & XRDC_MRGD_W2_10_3_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_10_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_10_3_EAL_MASK               (0x3000000U)
#define XRDC_MRGD_W3_10_3_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_10_3_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_10_3_EAL_SHIFT)) & XRDC_MRGD_W3_10_3_EAL_MASK)

#define XRDC_MRGD_W3_10_3_CR_MASK                (0x80000000U)
#define XRDC_MRGD_W3_10_3_CR_SHIFT               (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_10_3_CR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_10_3_CR_SHIFT)) & XRDC_MRGD_W3_10_3_CR_MASK)
/*! @} */

/*! @name MRGD_W4_10_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_10_3_ACCSET1_MASK           (0xFFFU)
#define XRDC_MRGD_W4_10_3_ACCSET1_SHIFT          (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_10_3_ACCSET1(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_3_ACCSET1_SHIFT)) & XRDC_MRGD_W4_10_3_ACCSET1_MASK)

#define XRDC_MRGD_W4_10_3_LKAS1_MASK             (0x1000U)
#define XRDC_MRGD_W4_10_3_LKAS1_SHIFT            (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_10_3_LKAS1(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_3_LKAS1_SHIFT)) & XRDC_MRGD_W4_10_3_LKAS1_MASK)

#define XRDC_MRGD_W4_10_3_ACCSET2_MASK           (0xFFF0000U)
#define XRDC_MRGD_W4_10_3_ACCSET2_SHIFT          (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_10_3_ACCSET2(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_3_ACCSET2_SHIFT)) & XRDC_MRGD_W4_10_3_ACCSET2_MASK)

#define XRDC_MRGD_W4_10_3_LKAS2_MASK             (0x10000000U)
#define XRDC_MRGD_W4_10_3_LKAS2_SHIFT            (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_10_3_LKAS2(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_3_LKAS2_SHIFT)) & XRDC_MRGD_W4_10_3_LKAS2_MASK)

#define XRDC_MRGD_W4_10_3_LK2_MASK               (0x60000000U)
#define XRDC_MRGD_W4_10_3_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_10_3_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_3_LK2_SHIFT)) & XRDC_MRGD_W4_10_3_LK2_MASK)

#define XRDC_MRGD_W4_10_3_VLD_MASK               (0x80000000U)
#define XRDC_MRGD_W4_10_3_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_10_3_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_3_VLD_SHIFT)) & XRDC_MRGD_W4_10_3_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_10_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_10_4_SRTADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W0_10_4_SRTADDR_SHIFT          (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_10_4_SRTADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_10_4_SRTADDR_SHIFT)) & XRDC_MRGD_W0_10_4_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_10_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_10_4_ENDADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W1_10_4_ENDADDR_SHIFT          (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_10_4_ENDADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_10_4_ENDADDR_SHIFT)) & XRDC_MRGD_W1_10_4_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_10_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_10_4_D0SEL_MASK             (0x7U)
#define XRDC_MRGD_W2_10_4_D0SEL_SHIFT            (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_10_4_D0SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_4_D0SEL_SHIFT)) & XRDC_MRGD_W2_10_4_D0SEL_MASK)

#define XRDC_MRGD_W2_10_4_D1SEL_MASK             (0x38U)
#define XRDC_MRGD_W2_10_4_D1SEL_SHIFT            (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_10_4_D1SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_4_D1SEL_SHIFT)) & XRDC_MRGD_W2_10_4_D1SEL_MASK)

#define XRDC_MRGD_W2_10_4_D2SEL_MASK             (0x1C0U)
#define XRDC_MRGD_W2_10_4_D2SEL_SHIFT            (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_10_4_D2SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_4_D2SEL_SHIFT)) & XRDC_MRGD_W2_10_4_D2SEL_MASK)

#define XRDC_MRGD_W2_10_4_D3SEL_MASK             (0xE00U)
#define XRDC_MRGD_W2_10_4_D3SEL_SHIFT            (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_10_4_D3SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_4_D3SEL_SHIFT)) & XRDC_MRGD_W2_10_4_D3SEL_MASK)

#define XRDC_MRGD_W2_10_4_D4SEL_MASK             (0x7000U)
#define XRDC_MRGD_W2_10_4_D4SEL_SHIFT            (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_10_4_D4SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_4_D4SEL_SHIFT)) & XRDC_MRGD_W2_10_4_D4SEL_MASK)

#define XRDC_MRGD_W2_10_4_D5SEL_MASK             (0x38000U)
#define XRDC_MRGD_W2_10_4_D5SEL_SHIFT            (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_10_4_D5SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_4_D5SEL_SHIFT)) & XRDC_MRGD_W2_10_4_D5SEL_MASK)

#define XRDC_MRGD_W2_10_4_D6SEL_MASK             (0x1C0000U)
#define XRDC_MRGD_W2_10_4_D6SEL_SHIFT            (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_10_4_D6SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_4_D6SEL_SHIFT)) & XRDC_MRGD_W2_10_4_D6SEL_MASK)

#define XRDC_MRGD_W2_10_4_D7SEL_MASK             (0xE00000U)
#define XRDC_MRGD_W2_10_4_D7SEL_SHIFT            (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_10_4_D7SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_4_D7SEL_SHIFT)) & XRDC_MRGD_W2_10_4_D7SEL_MASK)

#define XRDC_MRGD_W2_10_4_EALO_MASK              (0xF000000U)
#define XRDC_MRGD_W2_10_4_EALO_SHIFT             (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_10_4_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_4_EALO_SHIFT)) & XRDC_MRGD_W2_10_4_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_10_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_10_4_EAL_MASK               (0x3000000U)
#define XRDC_MRGD_W3_10_4_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_10_4_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_10_4_EAL_SHIFT)) & XRDC_MRGD_W3_10_4_EAL_MASK)

#define XRDC_MRGD_W3_10_4_CR_MASK                (0x80000000U)
#define XRDC_MRGD_W3_10_4_CR_SHIFT               (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_10_4_CR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_10_4_CR_SHIFT)) & XRDC_MRGD_W3_10_4_CR_MASK)
/*! @} */

/*! @name MRGD_W4_10_4 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_10_4_ACCSET1_MASK           (0xFFFU)
#define XRDC_MRGD_W4_10_4_ACCSET1_SHIFT          (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_10_4_ACCSET1(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_4_ACCSET1_SHIFT)) & XRDC_MRGD_W4_10_4_ACCSET1_MASK)

#define XRDC_MRGD_W4_10_4_LKAS1_MASK             (0x1000U)
#define XRDC_MRGD_W4_10_4_LKAS1_SHIFT            (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_10_4_LKAS1(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_4_LKAS1_SHIFT)) & XRDC_MRGD_W4_10_4_LKAS1_MASK)

#define XRDC_MRGD_W4_10_4_ACCSET2_MASK           (0xFFF0000U)
#define XRDC_MRGD_W4_10_4_ACCSET2_SHIFT          (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_10_4_ACCSET2(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_4_ACCSET2_SHIFT)) & XRDC_MRGD_W4_10_4_ACCSET2_MASK)

#define XRDC_MRGD_W4_10_4_LKAS2_MASK             (0x10000000U)
#define XRDC_MRGD_W4_10_4_LKAS2_SHIFT            (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_10_4_LKAS2(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_4_LKAS2_SHIFT)) & XRDC_MRGD_W4_10_4_LKAS2_MASK)

#define XRDC_MRGD_W4_10_4_LK2_MASK               (0x60000000U)
#define XRDC_MRGD_W4_10_4_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_10_4_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_4_LK2_SHIFT)) & XRDC_MRGD_W4_10_4_LK2_MASK)

#define XRDC_MRGD_W4_10_4_VLD_MASK               (0x80000000U)
#define XRDC_MRGD_W4_10_4_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_10_4_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_4_VLD_SHIFT)) & XRDC_MRGD_W4_10_4_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_10_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_10_5_SRTADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W0_10_5_SRTADDR_SHIFT          (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_10_5_SRTADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_10_5_SRTADDR_SHIFT)) & XRDC_MRGD_W0_10_5_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_10_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_10_5_ENDADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W1_10_5_ENDADDR_SHIFT          (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_10_5_ENDADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_10_5_ENDADDR_SHIFT)) & XRDC_MRGD_W1_10_5_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_10_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_10_5_D0SEL_MASK             (0x7U)
#define XRDC_MRGD_W2_10_5_D0SEL_SHIFT            (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_10_5_D0SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_5_D0SEL_SHIFT)) & XRDC_MRGD_W2_10_5_D0SEL_MASK)

#define XRDC_MRGD_W2_10_5_D1SEL_MASK             (0x38U)
#define XRDC_MRGD_W2_10_5_D1SEL_SHIFT            (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_10_5_D1SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_5_D1SEL_SHIFT)) & XRDC_MRGD_W2_10_5_D1SEL_MASK)

#define XRDC_MRGD_W2_10_5_D2SEL_MASK             (0x1C0U)
#define XRDC_MRGD_W2_10_5_D2SEL_SHIFT            (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_10_5_D2SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_5_D2SEL_SHIFT)) & XRDC_MRGD_W2_10_5_D2SEL_MASK)

#define XRDC_MRGD_W2_10_5_D3SEL_MASK             (0xE00U)
#define XRDC_MRGD_W2_10_5_D3SEL_SHIFT            (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_10_5_D3SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_5_D3SEL_SHIFT)) & XRDC_MRGD_W2_10_5_D3SEL_MASK)

#define XRDC_MRGD_W2_10_5_D4SEL_MASK             (0x7000U)
#define XRDC_MRGD_W2_10_5_D4SEL_SHIFT            (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_10_5_D4SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_5_D4SEL_SHIFT)) & XRDC_MRGD_W2_10_5_D4SEL_MASK)

#define XRDC_MRGD_W2_10_5_D5SEL_MASK             (0x38000U)
#define XRDC_MRGD_W2_10_5_D5SEL_SHIFT            (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_10_5_D5SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_5_D5SEL_SHIFT)) & XRDC_MRGD_W2_10_5_D5SEL_MASK)

#define XRDC_MRGD_W2_10_5_D6SEL_MASK             (0x1C0000U)
#define XRDC_MRGD_W2_10_5_D6SEL_SHIFT            (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_10_5_D6SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_5_D6SEL_SHIFT)) & XRDC_MRGD_W2_10_5_D6SEL_MASK)

#define XRDC_MRGD_W2_10_5_D7SEL_MASK             (0xE00000U)
#define XRDC_MRGD_W2_10_5_D7SEL_SHIFT            (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_10_5_D7SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_5_D7SEL_SHIFT)) & XRDC_MRGD_W2_10_5_D7SEL_MASK)

#define XRDC_MRGD_W2_10_5_EALO_MASK              (0xF000000U)
#define XRDC_MRGD_W2_10_5_EALO_SHIFT             (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_10_5_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_5_EALO_SHIFT)) & XRDC_MRGD_W2_10_5_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_10_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_10_5_EAL_MASK               (0x3000000U)
#define XRDC_MRGD_W3_10_5_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_10_5_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_10_5_EAL_SHIFT)) & XRDC_MRGD_W3_10_5_EAL_MASK)

#define XRDC_MRGD_W3_10_5_CR_MASK                (0x80000000U)
#define XRDC_MRGD_W3_10_5_CR_SHIFT               (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_10_5_CR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_10_5_CR_SHIFT)) & XRDC_MRGD_W3_10_5_CR_MASK)
/*! @} */

/*! @name MRGD_W4_10_5 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_10_5_ACCSET1_MASK           (0xFFFU)
#define XRDC_MRGD_W4_10_5_ACCSET1_SHIFT          (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_10_5_ACCSET1(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_5_ACCSET1_SHIFT)) & XRDC_MRGD_W4_10_5_ACCSET1_MASK)

#define XRDC_MRGD_W4_10_5_LKAS1_MASK             (0x1000U)
#define XRDC_MRGD_W4_10_5_LKAS1_SHIFT            (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_10_5_LKAS1(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_5_LKAS1_SHIFT)) & XRDC_MRGD_W4_10_5_LKAS1_MASK)

#define XRDC_MRGD_W4_10_5_ACCSET2_MASK           (0xFFF0000U)
#define XRDC_MRGD_W4_10_5_ACCSET2_SHIFT          (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_10_5_ACCSET2(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_5_ACCSET2_SHIFT)) & XRDC_MRGD_W4_10_5_ACCSET2_MASK)

#define XRDC_MRGD_W4_10_5_LKAS2_MASK             (0x10000000U)
#define XRDC_MRGD_W4_10_5_LKAS2_SHIFT            (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_10_5_LKAS2(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_5_LKAS2_SHIFT)) & XRDC_MRGD_W4_10_5_LKAS2_MASK)

#define XRDC_MRGD_W4_10_5_LK2_MASK               (0x60000000U)
#define XRDC_MRGD_W4_10_5_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_10_5_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_5_LK2_SHIFT)) & XRDC_MRGD_W4_10_5_LK2_MASK)

#define XRDC_MRGD_W4_10_5_VLD_MASK               (0x80000000U)
#define XRDC_MRGD_W4_10_5_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_10_5_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_5_VLD_SHIFT)) & XRDC_MRGD_W4_10_5_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_10_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_10_6_SRTADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W0_10_6_SRTADDR_SHIFT          (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_10_6_SRTADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_10_6_SRTADDR_SHIFT)) & XRDC_MRGD_W0_10_6_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_10_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_10_6_ENDADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W1_10_6_ENDADDR_SHIFT          (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_10_6_ENDADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_10_6_ENDADDR_SHIFT)) & XRDC_MRGD_W1_10_6_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_10_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_10_6_D0SEL_MASK             (0x7U)
#define XRDC_MRGD_W2_10_6_D0SEL_SHIFT            (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_10_6_D0SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_6_D0SEL_SHIFT)) & XRDC_MRGD_W2_10_6_D0SEL_MASK)

#define XRDC_MRGD_W2_10_6_D1SEL_MASK             (0x38U)
#define XRDC_MRGD_W2_10_6_D1SEL_SHIFT            (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_10_6_D1SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_6_D1SEL_SHIFT)) & XRDC_MRGD_W2_10_6_D1SEL_MASK)

#define XRDC_MRGD_W2_10_6_D2SEL_MASK             (0x1C0U)
#define XRDC_MRGD_W2_10_6_D2SEL_SHIFT            (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_10_6_D2SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_6_D2SEL_SHIFT)) & XRDC_MRGD_W2_10_6_D2SEL_MASK)

#define XRDC_MRGD_W2_10_6_D3SEL_MASK             (0xE00U)
#define XRDC_MRGD_W2_10_6_D3SEL_SHIFT            (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_10_6_D3SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_6_D3SEL_SHIFT)) & XRDC_MRGD_W2_10_6_D3SEL_MASK)

#define XRDC_MRGD_W2_10_6_D4SEL_MASK             (0x7000U)
#define XRDC_MRGD_W2_10_6_D4SEL_SHIFT            (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_10_6_D4SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_6_D4SEL_SHIFT)) & XRDC_MRGD_W2_10_6_D4SEL_MASK)

#define XRDC_MRGD_W2_10_6_D5SEL_MASK             (0x38000U)
#define XRDC_MRGD_W2_10_6_D5SEL_SHIFT            (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_10_6_D5SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_6_D5SEL_SHIFT)) & XRDC_MRGD_W2_10_6_D5SEL_MASK)

#define XRDC_MRGD_W2_10_6_D6SEL_MASK             (0x1C0000U)
#define XRDC_MRGD_W2_10_6_D6SEL_SHIFT            (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_10_6_D6SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_6_D6SEL_SHIFT)) & XRDC_MRGD_W2_10_6_D6SEL_MASK)

#define XRDC_MRGD_W2_10_6_D7SEL_MASK             (0xE00000U)
#define XRDC_MRGD_W2_10_6_D7SEL_SHIFT            (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_10_6_D7SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_6_D7SEL_SHIFT)) & XRDC_MRGD_W2_10_6_D7SEL_MASK)

#define XRDC_MRGD_W2_10_6_EALO_MASK              (0xF000000U)
#define XRDC_MRGD_W2_10_6_EALO_SHIFT             (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_10_6_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_6_EALO_SHIFT)) & XRDC_MRGD_W2_10_6_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_10_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_10_6_EAL_MASK               (0x3000000U)
#define XRDC_MRGD_W3_10_6_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_10_6_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_10_6_EAL_SHIFT)) & XRDC_MRGD_W3_10_6_EAL_MASK)

#define XRDC_MRGD_W3_10_6_CR_MASK                (0x80000000U)
#define XRDC_MRGD_W3_10_6_CR_SHIFT               (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_10_6_CR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_10_6_CR_SHIFT)) & XRDC_MRGD_W3_10_6_CR_MASK)
/*! @} */

/*! @name MRGD_W4_10_6 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_10_6_ACCSET1_MASK           (0xFFFU)
#define XRDC_MRGD_W4_10_6_ACCSET1_SHIFT          (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_10_6_ACCSET1(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_6_ACCSET1_SHIFT)) & XRDC_MRGD_W4_10_6_ACCSET1_MASK)

#define XRDC_MRGD_W4_10_6_LKAS1_MASK             (0x1000U)
#define XRDC_MRGD_W4_10_6_LKAS1_SHIFT            (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_10_6_LKAS1(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_6_LKAS1_SHIFT)) & XRDC_MRGD_W4_10_6_LKAS1_MASK)

#define XRDC_MRGD_W4_10_6_ACCSET2_MASK           (0xFFF0000U)
#define XRDC_MRGD_W4_10_6_ACCSET2_SHIFT          (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_10_6_ACCSET2(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_6_ACCSET2_SHIFT)) & XRDC_MRGD_W4_10_6_ACCSET2_MASK)

#define XRDC_MRGD_W4_10_6_LKAS2_MASK             (0x10000000U)
#define XRDC_MRGD_W4_10_6_LKAS2_SHIFT            (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_10_6_LKAS2(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_6_LKAS2_SHIFT)) & XRDC_MRGD_W4_10_6_LKAS2_MASK)

#define XRDC_MRGD_W4_10_6_LK2_MASK               (0x60000000U)
#define XRDC_MRGD_W4_10_6_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_10_6_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_6_LK2_SHIFT)) & XRDC_MRGD_W4_10_6_LK2_MASK)

#define XRDC_MRGD_W4_10_6_VLD_MASK               (0x80000000U)
#define XRDC_MRGD_W4_10_6_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_10_6_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_6_VLD_SHIFT)) & XRDC_MRGD_W4_10_6_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_10_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_10_7_SRTADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W0_10_7_SRTADDR_SHIFT          (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_10_7_SRTADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_10_7_SRTADDR_SHIFT)) & XRDC_MRGD_W0_10_7_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_10_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_10_7_ENDADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W1_10_7_ENDADDR_SHIFT          (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_10_7_ENDADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_10_7_ENDADDR_SHIFT)) & XRDC_MRGD_W1_10_7_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_10_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_10_7_D0SEL_MASK             (0x7U)
#define XRDC_MRGD_W2_10_7_D0SEL_SHIFT            (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_10_7_D0SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_7_D0SEL_SHIFT)) & XRDC_MRGD_W2_10_7_D0SEL_MASK)

#define XRDC_MRGD_W2_10_7_D1SEL_MASK             (0x38U)
#define XRDC_MRGD_W2_10_7_D1SEL_SHIFT            (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_10_7_D1SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_7_D1SEL_SHIFT)) & XRDC_MRGD_W2_10_7_D1SEL_MASK)

#define XRDC_MRGD_W2_10_7_D2SEL_MASK             (0x1C0U)
#define XRDC_MRGD_W2_10_7_D2SEL_SHIFT            (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_10_7_D2SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_7_D2SEL_SHIFT)) & XRDC_MRGD_W2_10_7_D2SEL_MASK)

#define XRDC_MRGD_W2_10_7_D3SEL_MASK             (0xE00U)
#define XRDC_MRGD_W2_10_7_D3SEL_SHIFT            (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_10_7_D3SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_7_D3SEL_SHIFT)) & XRDC_MRGD_W2_10_7_D3SEL_MASK)

#define XRDC_MRGD_W2_10_7_D4SEL_MASK             (0x7000U)
#define XRDC_MRGD_W2_10_7_D4SEL_SHIFT            (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_10_7_D4SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_7_D4SEL_SHIFT)) & XRDC_MRGD_W2_10_7_D4SEL_MASK)

#define XRDC_MRGD_W2_10_7_D5SEL_MASK             (0x38000U)
#define XRDC_MRGD_W2_10_7_D5SEL_SHIFT            (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_10_7_D5SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_7_D5SEL_SHIFT)) & XRDC_MRGD_W2_10_7_D5SEL_MASK)

#define XRDC_MRGD_W2_10_7_D6SEL_MASK             (0x1C0000U)
#define XRDC_MRGD_W2_10_7_D6SEL_SHIFT            (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_10_7_D6SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_7_D6SEL_SHIFT)) & XRDC_MRGD_W2_10_7_D6SEL_MASK)

#define XRDC_MRGD_W2_10_7_D7SEL_MASK             (0xE00000U)
#define XRDC_MRGD_W2_10_7_D7SEL_SHIFT            (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_10_7_D7SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_7_D7SEL_SHIFT)) & XRDC_MRGD_W2_10_7_D7SEL_MASK)

#define XRDC_MRGD_W2_10_7_EALO_MASK              (0xF000000U)
#define XRDC_MRGD_W2_10_7_EALO_SHIFT             (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_10_7_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_10_7_EALO_SHIFT)) & XRDC_MRGD_W2_10_7_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_10_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_10_7_EAL_MASK               (0x3000000U)
#define XRDC_MRGD_W3_10_7_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_10_7_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_10_7_EAL_SHIFT)) & XRDC_MRGD_W3_10_7_EAL_MASK)

#define XRDC_MRGD_W3_10_7_CR_MASK                (0x80000000U)
#define XRDC_MRGD_W3_10_7_CR_SHIFT               (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_10_7_CR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_10_7_CR_SHIFT)) & XRDC_MRGD_W3_10_7_CR_MASK)
/*! @} */

/*! @name MRGD_W4_10_7 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_10_7_ACCSET1_MASK           (0xFFFU)
#define XRDC_MRGD_W4_10_7_ACCSET1_SHIFT          (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_10_7_ACCSET1(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_7_ACCSET1_SHIFT)) & XRDC_MRGD_W4_10_7_ACCSET1_MASK)

#define XRDC_MRGD_W4_10_7_LKAS1_MASK             (0x1000U)
#define XRDC_MRGD_W4_10_7_LKAS1_SHIFT            (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_10_7_LKAS1(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_7_LKAS1_SHIFT)) & XRDC_MRGD_W4_10_7_LKAS1_MASK)

#define XRDC_MRGD_W4_10_7_ACCSET2_MASK           (0xFFF0000U)
#define XRDC_MRGD_W4_10_7_ACCSET2_SHIFT          (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_10_7_ACCSET2(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_7_ACCSET2_SHIFT)) & XRDC_MRGD_W4_10_7_ACCSET2_MASK)

#define XRDC_MRGD_W4_10_7_LKAS2_MASK             (0x10000000U)
#define XRDC_MRGD_W4_10_7_LKAS2_SHIFT            (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_10_7_LKAS2(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_7_LKAS2_SHIFT)) & XRDC_MRGD_W4_10_7_LKAS2_MASK)

#define XRDC_MRGD_W4_10_7_LK2_MASK               (0x60000000U)
#define XRDC_MRGD_W4_10_7_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_10_7_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_7_LK2_SHIFT)) & XRDC_MRGD_W4_10_7_LK2_MASK)

#define XRDC_MRGD_W4_10_7_VLD_MASK               (0x80000000U)
#define XRDC_MRGD_W4_10_7_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_10_7_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_10_7_VLD_SHIFT)) & XRDC_MRGD_W4_10_7_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_11_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_11_0_SRTADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W0_11_0_SRTADDR_SHIFT          (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_11_0_SRTADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_11_0_SRTADDR_SHIFT)) & XRDC_MRGD_W0_11_0_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_11_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_11_0_ENDADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W1_11_0_ENDADDR_SHIFT          (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_11_0_ENDADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_11_0_ENDADDR_SHIFT)) & XRDC_MRGD_W1_11_0_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_11_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_11_0_D0SEL_MASK             (0x7U)
#define XRDC_MRGD_W2_11_0_D0SEL_SHIFT            (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_11_0_D0SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_0_D0SEL_SHIFT)) & XRDC_MRGD_W2_11_0_D0SEL_MASK)

#define XRDC_MRGD_W2_11_0_D1SEL_MASK             (0x38U)
#define XRDC_MRGD_W2_11_0_D1SEL_SHIFT            (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_11_0_D1SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_0_D1SEL_SHIFT)) & XRDC_MRGD_W2_11_0_D1SEL_MASK)

#define XRDC_MRGD_W2_11_0_D2SEL_MASK             (0x1C0U)
#define XRDC_MRGD_W2_11_0_D2SEL_SHIFT            (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_11_0_D2SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_0_D2SEL_SHIFT)) & XRDC_MRGD_W2_11_0_D2SEL_MASK)

#define XRDC_MRGD_W2_11_0_D3SEL_MASK             (0xE00U)
#define XRDC_MRGD_W2_11_0_D3SEL_SHIFT            (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_11_0_D3SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_0_D3SEL_SHIFT)) & XRDC_MRGD_W2_11_0_D3SEL_MASK)

#define XRDC_MRGD_W2_11_0_D4SEL_MASK             (0x7000U)
#define XRDC_MRGD_W2_11_0_D4SEL_SHIFT            (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_11_0_D4SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_0_D4SEL_SHIFT)) & XRDC_MRGD_W2_11_0_D4SEL_MASK)

#define XRDC_MRGD_W2_11_0_D5SEL_MASK             (0x38000U)
#define XRDC_MRGD_W2_11_0_D5SEL_SHIFT            (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_11_0_D5SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_0_D5SEL_SHIFT)) & XRDC_MRGD_W2_11_0_D5SEL_MASK)

#define XRDC_MRGD_W2_11_0_D6SEL_MASK             (0x1C0000U)
#define XRDC_MRGD_W2_11_0_D6SEL_SHIFT            (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_11_0_D6SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_0_D6SEL_SHIFT)) & XRDC_MRGD_W2_11_0_D6SEL_MASK)

#define XRDC_MRGD_W2_11_0_D7SEL_MASK             (0xE00000U)
#define XRDC_MRGD_W2_11_0_D7SEL_SHIFT            (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_11_0_D7SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_0_D7SEL_SHIFT)) & XRDC_MRGD_W2_11_0_D7SEL_MASK)

#define XRDC_MRGD_W2_11_0_EALO_MASK              (0xF000000U)
#define XRDC_MRGD_W2_11_0_EALO_SHIFT             (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_11_0_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_0_EALO_SHIFT)) & XRDC_MRGD_W2_11_0_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_11_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_11_0_EAL_MASK               (0x3000000U)
#define XRDC_MRGD_W3_11_0_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_11_0_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_11_0_EAL_SHIFT)) & XRDC_MRGD_W3_11_0_EAL_MASK)

#define XRDC_MRGD_W3_11_0_CR_MASK                (0x80000000U)
#define XRDC_MRGD_W3_11_0_CR_SHIFT               (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_11_0_CR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_11_0_CR_SHIFT)) & XRDC_MRGD_W3_11_0_CR_MASK)
/*! @} */

/*! @name MRGD_W4_11_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_11_0_ACCSET1_MASK           (0xFFFU)
#define XRDC_MRGD_W4_11_0_ACCSET1_SHIFT          (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_11_0_ACCSET1(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_11_0_ACCSET1_SHIFT)) & XRDC_MRGD_W4_11_0_ACCSET1_MASK)

#define XRDC_MRGD_W4_11_0_LKAS1_MASK             (0x1000U)
#define XRDC_MRGD_W4_11_0_LKAS1_SHIFT            (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_11_0_LKAS1(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_11_0_LKAS1_SHIFT)) & XRDC_MRGD_W4_11_0_LKAS1_MASK)

#define XRDC_MRGD_W4_11_0_ACCSET2_MASK           (0xFFF0000U)
#define XRDC_MRGD_W4_11_0_ACCSET2_SHIFT          (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_11_0_ACCSET2(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_11_0_ACCSET2_SHIFT)) & XRDC_MRGD_W4_11_0_ACCSET2_MASK)

#define XRDC_MRGD_W4_11_0_LKAS2_MASK             (0x10000000U)
#define XRDC_MRGD_W4_11_0_LKAS2_SHIFT            (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_11_0_LKAS2(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_11_0_LKAS2_SHIFT)) & XRDC_MRGD_W4_11_0_LKAS2_MASK)

#define XRDC_MRGD_W4_11_0_LK2_MASK               (0x60000000U)
#define XRDC_MRGD_W4_11_0_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_11_0_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_11_0_LK2_SHIFT)) & XRDC_MRGD_W4_11_0_LK2_MASK)

#define XRDC_MRGD_W4_11_0_VLD_MASK               (0x80000000U)
#define XRDC_MRGD_W4_11_0_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_11_0_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_11_0_VLD_SHIFT)) & XRDC_MRGD_W4_11_0_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_11_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_11_1_SRTADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W0_11_1_SRTADDR_SHIFT          (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_11_1_SRTADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_11_1_SRTADDR_SHIFT)) & XRDC_MRGD_W0_11_1_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_11_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_11_1_ENDADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W1_11_1_ENDADDR_SHIFT          (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_11_1_ENDADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_11_1_ENDADDR_SHIFT)) & XRDC_MRGD_W1_11_1_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_11_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_11_1_D0SEL_MASK             (0x7U)
#define XRDC_MRGD_W2_11_1_D0SEL_SHIFT            (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_11_1_D0SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_1_D0SEL_SHIFT)) & XRDC_MRGD_W2_11_1_D0SEL_MASK)

#define XRDC_MRGD_W2_11_1_D1SEL_MASK             (0x38U)
#define XRDC_MRGD_W2_11_1_D1SEL_SHIFT            (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_11_1_D1SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_1_D1SEL_SHIFT)) & XRDC_MRGD_W2_11_1_D1SEL_MASK)

#define XRDC_MRGD_W2_11_1_D2SEL_MASK             (0x1C0U)
#define XRDC_MRGD_W2_11_1_D2SEL_SHIFT            (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_11_1_D2SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_1_D2SEL_SHIFT)) & XRDC_MRGD_W2_11_1_D2SEL_MASK)

#define XRDC_MRGD_W2_11_1_D3SEL_MASK             (0xE00U)
#define XRDC_MRGD_W2_11_1_D3SEL_SHIFT            (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_11_1_D3SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_1_D3SEL_SHIFT)) & XRDC_MRGD_W2_11_1_D3SEL_MASK)

#define XRDC_MRGD_W2_11_1_D4SEL_MASK             (0x7000U)
#define XRDC_MRGD_W2_11_1_D4SEL_SHIFT            (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_11_1_D4SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_1_D4SEL_SHIFT)) & XRDC_MRGD_W2_11_1_D4SEL_MASK)

#define XRDC_MRGD_W2_11_1_D5SEL_MASK             (0x38000U)
#define XRDC_MRGD_W2_11_1_D5SEL_SHIFT            (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_11_1_D5SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_1_D5SEL_SHIFT)) & XRDC_MRGD_W2_11_1_D5SEL_MASK)

#define XRDC_MRGD_W2_11_1_D6SEL_MASK             (0x1C0000U)
#define XRDC_MRGD_W2_11_1_D6SEL_SHIFT            (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_11_1_D6SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_1_D6SEL_SHIFT)) & XRDC_MRGD_W2_11_1_D6SEL_MASK)

#define XRDC_MRGD_W2_11_1_D7SEL_MASK             (0xE00000U)
#define XRDC_MRGD_W2_11_1_D7SEL_SHIFT            (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_11_1_D7SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_1_D7SEL_SHIFT)) & XRDC_MRGD_W2_11_1_D7SEL_MASK)

#define XRDC_MRGD_W2_11_1_EALO_MASK              (0xF000000U)
#define XRDC_MRGD_W2_11_1_EALO_SHIFT             (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_11_1_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_1_EALO_SHIFT)) & XRDC_MRGD_W2_11_1_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_11_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_11_1_EAL_MASK               (0x3000000U)
#define XRDC_MRGD_W3_11_1_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_11_1_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_11_1_EAL_SHIFT)) & XRDC_MRGD_W3_11_1_EAL_MASK)

#define XRDC_MRGD_W3_11_1_CR_MASK                (0x80000000U)
#define XRDC_MRGD_W3_11_1_CR_SHIFT               (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_11_1_CR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_11_1_CR_SHIFT)) & XRDC_MRGD_W3_11_1_CR_MASK)
/*! @} */

/*! @name MRGD_W4_11_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_11_1_ACCSET1_MASK           (0xFFFU)
#define XRDC_MRGD_W4_11_1_ACCSET1_SHIFT          (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_11_1_ACCSET1(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_11_1_ACCSET1_SHIFT)) & XRDC_MRGD_W4_11_1_ACCSET1_MASK)

#define XRDC_MRGD_W4_11_1_LKAS1_MASK             (0x1000U)
#define XRDC_MRGD_W4_11_1_LKAS1_SHIFT            (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_11_1_LKAS1(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_11_1_LKAS1_SHIFT)) & XRDC_MRGD_W4_11_1_LKAS1_MASK)

#define XRDC_MRGD_W4_11_1_ACCSET2_MASK           (0xFFF0000U)
#define XRDC_MRGD_W4_11_1_ACCSET2_SHIFT          (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_11_1_ACCSET2(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_11_1_ACCSET2_SHIFT)) & XRDC_MRGD_W4_11_1_ACCSET2_MASK)

#define XRDC_MRGD_W4_11_1_LKAS2_MASK             (0x10000000U)
#define XRDC_MRGD_W4_11_1_LKAS2_SHIFT            (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_11_1_LKAS2(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_11_1_LKAS2_SHIFT)) & XRDC_MRGD_W4_11_1_LKAS2_MASK)

#define XRDC_MRGD_W4_11_1_LK2_MASK               (0x60000000U)
#define XRDC_MRGD_W4_11_1_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_11_1_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_11_1_LK2_SHIFT)) & XRDC_MRGD_W4_11_1_LK2_MASK)

#define XRDC_MRGD_W4_11_1_VLD_MASK               (0x80000000U)
#define XRDC_MRGD_W4_11_1_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_11_1_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_11_1_VLD_SHIFT)) & XRDC_MRGD_W4_11_1_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_11_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_11_2_SRTADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W0_11_2_SRTADDR_SHIFT          (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_11_2_SRTADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_11_2_SRTADDR_SHIFT)) & XRDC_MRGD_W0_11_2_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_11_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_11_2_ENDADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W1_11_2_ENDADDR_SHIFT          (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_11_2_ENDADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_11_2_ENDADDR_SHIFT)) & XRDC_MRGD_W1_11_2_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_11_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_11_2_D0SEL_MASK             (0x7U)
#define XRDC_MRGD_W2_11_2_D0SEL_SHIFT            (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_11_2_D0SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_2_D0SEL_SHIFT)) & XRDC_MRGD_W2_11_2_D0SEL_MASK)

#define XRDC_MRGD_W2_11_2_D1SEL_MASK             (0x38U)
#define XRDC_MRGD_W2_11_2_D1SEL_SHIFT            (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_11_2_D1SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_2_D1SEL_SHIFT)) & XRDC_MRGD_W2_11_2_D1SEL_MASK)

#define XRDC_MRGD_W2_11_2_D2SEL_MASK             (0x1C0U)
#define XRDC_MRGD_W2_11_2_D2SEL_SHIFT            (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_11_2_D2SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_2_D2SEL_SHIFT)) & XRDC_MRGD_W2_11_2_D2SEL_MASK)

#define XRDC_MRGD_W2_11_2_D3SEL_MASK             (0xE00U)
#define XRDC_MRGD_W2_11_2_D3SEL_SHIFT            (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_11_2_D3SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_2_D3SEL_SHIFT)) & XRDC_MRGD_W2_11_2_D3SEL_MASK)

#define XRDC_MRGD_W2_11_2_D4SEL_MASK             (0x7000U)
#define XRDC_MRGD_W2_11_2_D4SEL_SHIFT            (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_11_2_D4SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_2_D4SEL_SHIFT)) & XRDC_MRGD_W2_11_2_D4SEL_MASK)

#define XRDC_MRGD_W2_11_2_D5SEL_MASK             (0x38000U)
#define XRDC_MRGD_W2_11_2_D5SEL_SHIFT            (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_11_2_D5SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_2_D5SEL_SHIFT)) & XRDC_MRGD_W2_11_2_D5SEL_MASK)

#define XRDC_MRGD_W2_11_2_D6SEL_MASK             (0x1C0000U)
#define XRDC_MRGD_W2_11_2_D6SEL_SHIFT            (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_11_2_D6SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_2_D6SEL_SHIFT)) & XRDC_MRGD_W2_11_2_D6SEL_MASK)

#define XRDC_MRGD_W2_11_2_D7SEL_MASK             (0xE00000U)
#define XRDC_MRGD_W2_11_2_D7SEL_SHIFT            (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_11_2_D7SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_2_D7SEL_SHIFT)) & XRDC_MRGD_W2_11_2_D7SEL_MASK)

#define XRDC_MRGD_W2_11_2_EALO_MASK              (0xF000000U)
#define XRDC_MRGD_W2_11_2_EALO_SHIFT             (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_11_2_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_2_EALO_SHIFT)) & XRDC_MRGD_W2_11_2_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_11_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_11_2_EAL_MASK               (0x3000000U)
#define XRDC_MRGD_W3_11_2_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_11_2_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_11_2_EAL_SHIFT)) & XRDC_MRGD_W3_11_2_EAL_MASK)

#define XRDC_MRGD_W3_11_2_CR_MASK                (0x80000000U)
#define XRDC_MRGD_W3_11_2_CR_SHIFT               (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_11_2_CR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_11_2_CR_SHIFT)) & XRDC_MRGD_W3_11_2_CR_MASK)
/*! @} */

/*! @name MRGD_W4_11_2 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_11_2_ACCSET1_MASK           (0xFFFU)
#define XRDC_MRGD_W4_11_2_ACCSET1_SHIFT          (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_11_2_ACCSET1(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_11_2_ACCSET1_SHIFT)) & XRDC_MRGD_W4_11_2_ACCSET1_MASK)

#define XRDC_MRGD_W4_11_2_LKAS1_MASK             (0x1000U)
#define XRDC_MRGD_W4_11_2_LKAS1_SHIFT            (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_11_2_LKAS1(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_11_2_LKAS1_SHIFT)) & XRDC_MRGD_W4_11_2_LKAS1_MASK)

#define XRDC_MRGD_W4_11_2_ACCSET2_MASK           (0xFFF0000U)
#define XRDC_MRGD_W4_11_2_ACCSET2_SHIFT          (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_11_2_ACCSET2(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_11_2_ACCSET2_SHIFT)) & XRDC_MRGD_W4_11_2_ACCSET2_MASK)

#define XRDC_MRGD_W4_11_2_LKAS2_MASK             (0x10000000U)
#define XRDC_MRGD_W4_11_2_LKAS2_SHIFT            (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_11_2_LKAS2(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_11_2_LKAS2_SHIFT)) & XRDC_MRGD_W4_11_2_LKAS2_MASK)

#define XRDC_MRGD_W4_11_2_LK2_MASK               (0x60000000U)
#define XRDC_MRGD_W4_11_2_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_11_2_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_11_2_LK2_SHIFT)) & XRDC_MRGD_W4_11_2_LK2_MASK)

#define XRDC_MRGD_W4_11_2_VLD_MASK               (0x80000000U)
#define XRDC_MRGD_W4_11_2_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_11_2_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_11_2_VLD_SHIFT)) & XRDC_MRGD_W4_11_2_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_11_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_11_3_SRTADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W0_11_3_SRTADDR_SHIFT          (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_11_3_SRTADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_11_3_SRTADDR_SHIFT)) & XRDC_MRGD_W0_11_3_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_11_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_11_3_ENDADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W1_11_3_ENDADDR_SHIFT          (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_11_3_ENDADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_11_3_ENDADDR_SHIFT)) & XRDC_MRGD_W1_11_3_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_11_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_11_3_D0SEL_MASK             (0x7U)
#define XRDC_MRGD_W2_11_3_D0SEL_SHIFT            (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_11_3_D0SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_3_D0SEL_SHIFT)) & XRDC_MRGD_W2_11_3_D0SEL_MASK)

#define XRDC_MRGD_W2_11_3_D1SEL_MASK             (0x38U)
#define XRDC_MRGD_W2_11_3_D1SEL_SHIFT            (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_11_3_D1SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_3_D1SEL_SHIFT)) & XRDC_MRGD_W2_11_3_D1SEL_MASK)

#define XRDC_MRGD_W2_11_3_D2SEL_MASK             (0x1C0U)
#define XRDC_MRGD_W2_11_3_D2SEL_SHIFT            (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_11_3_D2SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_3_D2SEL_SHIFT)) & XRDC_MRGD_W2_11_3_D2SEL_MASK)

#define XRDC_MRGD_W2_11_3_D3SEL_MASK             (0xE00U)
#define XRDC_MRGD_W2_11_3_D3SEL_SHIFT            (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_11_3_D3SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_3_D3SEL_SHIFT)) & XRDC_MRGD_W2_11_3_D3SEL_MASK)

#define XRDC_MRGD_W2_11_3_D4SEL_MASK             (0x7000U)
#define XRDC_MRGD_W2_11_3_D4SEL_SHIFT            (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_11_3_D4SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_3_D4SEL_SHIFT)) & XRDC_MRGD_W2_11_3_D4SEL_MASK)

#define XRDC_MRGD_W2_11_3_D5SEL_MASK             (0x38000U)
#define XRDC_MRGD_W2_11_3_D5SEL_SHIFT            (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_11_3_D5SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_3_D5SEL_SHIFT)) & XRDC_MRGD_W2_11_3_D5SEL_MASK)

#define XRDC_MRGD_W2_11_3_D6SEL_MASK             (0x1C0000U)
#define XRDC_MRGD_W2_11_3_D6SEL_SHIFT            (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_11_3_D6SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_3_D6SEL_SHIFT)) & XRDC_MRGD_W2_11_3_D6SEL_MASK)

#define XRDC_MRGD_W2_11_3_D7SEL_MASK             (0xE00000U)
#define XRDC_MRGD_W2_11_3_D7SEL_SHIFT            (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_11_3_D7SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_3_D7SEL_SHIFT)) & XRDC_MRGD_W2_11_3_D7SEL_MASK)

#define XRDC_MRGD_W2_11_3_EALO_MASK              (0xF000000U)
#define XRDC_MRGD_W2_11_3_EALO_SHIFT             (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_11_3_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_11_3_EALO_SHIFT)) & XRDC_MRGD_W2_11_3_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_11_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_11_3_EAL_MASK               (0x3000000U)
#define XRDC_MRGD_W3_11_3_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_11_3_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_11_3_EAL_SHIFT)) & XRDC_MRGD_W3_11_3_EAL_MASK)

#define XRDC_MRGD_W3_11_3_CR_MASK                (0x80000000U)
#define XRDC_MRGD_W3_11_3_CR_SHIFT               (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_11_3_CR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_11_3_CR_SHIFT)) & XRDC_MRGD_W3_11_3_CR_MASK)
/*! @} */

/*! @name MRGD_W4_11_3 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_11_3_ACCSET1_MASK           (0xFFFU)
#define XRDC_MRGD_W4_11_3_ACCSET1_SHIFT          (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_11_3_ACCSET1(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_11_3_ACCSET1_SHIFT)) & XRDC_MRGD_W4_11_3_ACCSET1_MASK)

#define XRDC_MRGD_W4_11_3_LKAS1_MASK             (0x1000U)
#define XRDC_MRGD_W4_11_3_LKAS1_SHIFT            (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_11_3_LKAS1(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_11_3_LKAS1_SHIFT)) & XRDC_MRGD_W4_11_3_LKAS1_MASK)

#define XRDC_MRGD_W4_11_3_ACCSET2_MASK           (0xFFF0000U)
#define XRDC_MRGD_W4_11_3_ACCSET2_SHIFT          (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_11_3_ACCSET2(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_11_3_ACCSET2_SHIFT)) & XRDC_MRGD_W4_11_3_ACCSET2_MASK)

#define XRDC_MRGD_W4_11_3_LKAS2_MASK             (0x10000000U)
#define XRDC_MRGD_W4_11_3_LKAS2_SHIFT            (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_11_3_LKAS2(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_11_3_LKAS2_SHIFT)) & XRDC_MRGD_W4_11_3_LKAS2_MASK)

#define XRDC_MRGD_W4_11_3_LK2_MASK               (0x60000000U)
#define XRDC_MRGD_W4_11_3_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_11_3_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_11_3_LK2_SHIFT)) & XRDC_MRGD_W4_11_3_LK2_MASK)

#define XRDC_MRGD_W4_11_3_VLD_MASK               (0x80000000U)
#define XRDC_MRGD_W4_11_3_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_11_3_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_11_3_VLD_SHIFT)) & XRDC_MRGD_W4_11_3_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_12_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_12_0_SRTADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W0_12_0_SRTADDR_SHIFT          (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_12_0_SRTADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_12_0_SRTADDR_SHIFT)) & XRDC_MRGD_W0_12_0_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_12_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_12_0_ENDADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W1_12_0_ENDADDR_SHIFT          (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_12_0_ENDADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_12_0_ENDADDR_SHIFT)) & XRDC_MRGD_W1_12_0_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_12_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_12_0_D0SEL_MASK             (0x7U)
#define XRDC_MRGD_W2_12_0_D0SEL_SHIFT            (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_12_0_D0SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_12_0_D0SEL_SHIFT)) & XRDC_MRGD_W2_12_0_D0SEL_MASK)

#define XRDC_MRGD_W2_12_0_D1SEL_MASK             (0x38U)
#define XRDC_MRGD_W2_12_0_D1SEL_SHIFT            (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_12_0_D1SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_12_0_D1SEL_SHIFT)) & XRDC_MRGD_W2_12_0_D1SEL_MASK)

#define XRDC_MRGD_W2_12_0_D2SEL_MASK             (0x1C0U)
#define XRDC_MRGD_W2_12_0_D2SEL_SHIFT            (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_12_0_D2SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_12_0_D2SEL_SHIFT)) & XRDC_MRGD_W2_12_0_D2SEL_MASK)

#define XRDC_MRGD_W2_12_0_D3SEL_MASK             (0xE00U)
#define XRDC_MRGD_W2_12_0_D3SEL_SHIFT            (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_12_0_D3SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_12_0_D3SEL_SHIFT)) & XRDC_MRGD_W2_12_0_D3SEL_MASK)

#define XRDC_MRGD_W2_12_0_D4SEL_MASK             (0x7000U)
#define XRDC_MRGD_W2_12_0_D4SEL_SHIFT            (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_12_0_D4SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_12_0_D4SEL_SHIFT)) & XRDC_MRGD_W2_12_0_D4SEL_MASK)

#define XRDC_MRGD_W2_12_0_D5SEL_MASK             (0x38000U)
#define XRDC_MRGD_W2_12_0_D5SEL_SHIFT            (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_12_0_D5SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_12_0_D5SEL_SHIFT)) & XRDC_MRGD_W2_12_0_D5SEL_MASK)

#define XRDC_MRGD_W2_12_0_D6SEL_MASK             (0x1C0000U)
#define XRDC_MRGD_W2_12_0_D6SEL_SHIFT            (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_12_0_D6SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_12_0_D6SEL_SHIFT)) & XRDC_MRGD_W2_12_0_D6SEL_MASK)

#define XRDC_MRGD_W2_12_0_D7SEL_MASK             (0xE00000U)
#define XRDC_MRGD_W2_12_0_D7SEL_SHIFT            (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_12_0_D7SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_12_0_D7SEL_SHIFT)) & XRDC_MRGD_W2_12_0_D7SEL_MASK)

#define XRDC_MRGD_W2_12_0_EALO_MASK              (0xF000000U)
#define XRDC_MRGD_W2_12_0_EALO_SHIFT             (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_12_0_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_12_0_EALO_SHIFT)) & XRDC_MRGD_W2_12_0_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_12_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_12_0_EAL_MASK               (0x3000000U)
#define XRDC_MRGD_W3_12_0_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_12_0_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_12_0_EAL_SHIFT)) & XRDC_MRGD_W3_12_0_EAL_MASK)

#define XRDC_MRGD_W3_12_0_CR_MASK                (0x80000000U)
#define XRDC_MRGD_W3_12_0_CR_SHIFT               (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_12_0_CR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_12_0_CR_SHIFT)) & XRDC_MRGD_W3_12_0_CR_MASK)
/*! @} */

/*! @name MRGD_W4_12_0 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_12_0_ACCSET1_MASK           (0xFFFU)
#define XRDC_MRGD_W4_12_0_ACCSET1_SHIFT          (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_12_0_ACCSET1(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_12_0_ACCSET1_SHIFT)) & XRDC_MRGD_W4_12_0_ACCSET1_MASK)

#define XRDC_MRGD_W4_12_0_LKAS1_MASK             (0x1000U)
#define XRDC_MRGD_W4_12_0_LKAS1_SHIFT            (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_12_0_LKAS1(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_12_0_LKAS1_SHIFT)) & XRDC_MRGD_W4_12_0_LKAS1_MASK)

#define XRDC_MRGD_W4_12_0_ACCSET2_MASK           (0xFFF0000U)
#define XRDC_MRGD_W4_12_0_ACCSET2_SHIFT          (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_12_0_ACCSET2(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_12_0_ACCSET2_SHIFT)) & XRDC_MRGD_W4_12_0_ACCSET2_MASK)

#define XRDC_MRGD_W4_12_0_LKAS2_MASK             (0x10000000U)
#define XRDC_MRGD_W4_12_0_LKAS2_SHIFT            (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_12_0_LKAS2(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_12_0_LKAS2_SHIFT)) & XRDC_MRGD_W4_12_0_LKAS2_MASK)

#define XRDC_MRGD_W4_12_0_LK2_MASK               (0x60000000U)
#define XRDC_MRGD_W4_12_0_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_12_0_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_12_0_LK2_SHIFT)) & XRDC_MRGD_W4_12_0_LK2_MASK)

#define XRDC_MRGD_W4_12_0_VLD_MASK               (0x80000000U)
#define XRDC_MRGD_W4_12_0_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_12_0_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_12_0_VLD_SHIFT)) & XRDC_MRGD_W4_12_0_VLD_MASK)
/*! @} */

/*! @name MRGD_W0_12_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W0_12_1_SRTADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W0_12_1_SRTADDR_SHIFT          (5U)
/*! SRTADDR - Start Address */
#define XRDC_MRGD_W0_12_1_SRTADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W0_12_1_SRTADDR_SHIFT)) & XRDC_MRGD_W0_12_1_SRTADDR_MASK)
/*! @} */

/*! @name MRGD_W1_12_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W1_12_1_ENDADDR_MASK           (0xFFFFFFE0U)
#define XRDC_MRGD_W1_12_1_ENDADDR_SHIFT          (5U)
/*! ENDADDR - End Address */
#define XRDC_MRGD_W1_12_1_ENDADDR(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W1_12_1_ENDADDR_SHIFT)) & XRDC_MRGD_W1_12_1_ENDADDR_MASK)
/*! @} */

/*! @name MRGD_W2_12_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W2_12_1_D0SEL_MASK             (0x7U)
#define XRDC_MRGD_W2_12_1_D0SEL_SHIFT            (0U)
/*! D0SEL - Domain 0 select */
#define XRDC_MRGD_W2_12_1_D0SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_12_1_D0SEL_SHIFT)) & XRDC_MRGD_W2_12_1_D0SEL_MASK)

#define XRDC_MRGD_W2_12_1_D1SEL_MASK             (0x38U)
#define XRDC_MRGD_W2_12_1_D1SEL_SHIFT            (3U)
/*! D1SEL - Domain 1 select */
#define XRDC_MRGD_W2_12_1_D1SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_12_1_D1SEL_SHIFT)) & XRDC_MRGD_W2_12_1_D1SEL_MASK)

#define XRDC_MRGD_W2_12_1_D2SEL_MASK             (0x1C0U)
#define XRDC_MRGD_W2_12_1_D2SEL_SHIFT            (6U)
/*! D2SEL - Domain 2 select */
#define XRDC_MRGD_W2_12_1_D2SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_12_1_D2SEL_SHIFT)) & XRDC_MRGD_W2_12_1_D2SEL_MASK)

#define XRDC_MRGD_W2_12_1_D3SEL_MASK             (0xE00U)
#define XRDC_MRGD_W2_12_1_D3SEL_SHIFT            (9U)
/*! D3SEL - Domain 3 select */
#define XRDC_MRGD_W2_12_1_D3SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_12_1_D3SEL_SHIFT)) & XRDC_MRGD_W2_12_1_D3SEL_MASK)

#define XRDC_MRGD_W2_12_1_D4SEL_MASK             (0x7000U)
#define XRDC_MRGD_W2_12_1_D4SEL_SHIFT            (12U)
/*! D4SEL - Domain 4 select */
#define XRDC_MRGD_W2_12_1_D4SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_12_1_D4SEL_SHIFT)) & XRDC_MRGD_W2_12_1_D4SEL_MASK)

#define XRDC_MRGD_W2_12_1_D5SEL_MASK             (0x38000U)
#define XRDC_MRGD_W2_12_1_D5SEL_SHIFT            (15U)
/*! D5SEL - Domain 5 select */
#define XRDC_MRGD_W2_12_1_D5SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_12_1_D5SEL_SHIFT)) & XRDC_MRGD_W2_12_1_D5SEL_MASK)

#define XRDC_MRGD_W2_12_1_D6SEL_MASK             (0x1C0000U)
#define XRDC_MRGD_W2_12_1_D6SEL_SHIFT            (18U)
/*! D6SEL - Domain 6 select */
#define XRDC_MRGD_W2_12_1_D6SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_12_1_D6SEL_SHIFT)) & XRDC_MRGD_W2_12_1_D6SEL_MASK)

#define XRDC_MRGD_W2_12_1_D7SEL_MASK             (0xE00000U)
#define XRDC_MRGD_W2_12_1_D7SEL_SHIFT            (21U)
/*! D7SEL - Domain 7 select */
#define XRDC_MRGD_W2_12_1_D7SEL(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_12_1_D7SEL_SHIFT)) & XRDC_MRGD_W2_12_1_D7SEL_MASK)

#define XRDC_MRGD_W2_12_1_EALO_MASK              (0xF000000U)
#define XRDC_MRGD_W2_12_1_EALO_SHIFT             (24U)
/*! EALO - Exclusive Access Lock Owner */
#define XRDC_MRGD_W2_12_1_EALO(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W2_12_1_EALO_SHIFT)) & XRDC_MRGD_W2_12_1_EALO_MASK)
/*! @} */

/*! @name MRGD_W3_12_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W3_12_1_EAL_MASK               (0x3000000U)
#define XRDC_MRGD_W3_12_1_EAL_SHIFT              (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MRGD_W3_12_1_EAL(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_12_1_EAL_SHIFT)) & XRDC_MRGD_W3_12_1_EAL_MASK)

#define XRDC_MRGD_W3_12_1_CR_MASK                (0x80000000U)
#define XRDC_MRGD_W3_12_1_CR_SHIFT               (31U)
/*! CR - Code Region Indicator */
#define XRDC_MRGD_W3_12_1_CR(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W3_12_1_CR_SHIFT)) & XRDC_MRGD_W3_12_1_CR_MASK)
/*! @} */

/*! @name MRGD_W4_12_1 - Memory Region Descriptor */
/*! @{ */

#define XRDC_MRGD_W4_12_1_ACCSET1_MASK           (0xFFFU)
#define XRDC_MRGD_W4_12_1_ACCSET1_SHIFT          (0U)
/*! ACCSET1 - SET 1 of Programmable access flags. */
#define XRDC_MRGD_W4_12_1_ACCSET1(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_12_1_ACCSET1_SHIFT)) & XRDC_MRGD_W4_12_1_ACCSET1_MASK)

#define XRDC_MRGD_W4_12_1_LKAS1_MASK             (0x1000U)
#define XRDC_MRGD_W4_12_1_LKAS1_SHIFT            (12U)
/*! LKAS1 - Lock ACCSET1
 *  0b0..Writes to ACCSET1 affect lesser modes
 *  0b1..ACCSET1 cannot be modified
 */
#define XRDC_MRGD_W4_12_1_LKAS1(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_12_1_LKAS1_SHIFT)) & XRDC_MRGD_W4_12_1_LKAS1_MASK)

#define XRDC_MRGD_W4_12_1_ACCSET2_MASK           (0xFFF0000U)
#define XRDC_MRGD_W4_12_1_ACCSET2_SHIFT          (16U)
/*! ACCSET2 - SET 2 of Programmable access flags. */
#define XRDC_MRGD_W4_12_1_ACCSET2(x)             (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_12_1_ACCSET2_SHIFT)) & XRDC_MRGD_W4_12_1_ACCSET2_MASK)

#define XRDC_MRGD_W4_12_1_LKAS2_MASK             (0x10000000U)
#define XRDC_MRGD_W4_12_1_LKAS2_SHIFT            (28U)
/*! LKAS2 - Lock ACCSET2
 *  0b0..Writes to ACCSET2 affect lesser modes
 *  0b1..ACCSET2 cannot be modified
 */
#define XRDC_MRGD_W4_12_1_LKAS2(x)               (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_12_1_LKAS2_SHIFT)) & XRDC_MRGD_W4_12_1_LKAS2_MASK)

#define XRDC_MRGD_W4_12_1_LK2_MASK               (0x60000000U)
#define XRDC_MRGD_W4_12_1_LK2_SHIFT              (29U)
/*! LK2 - Lock
 *  0b00..Entire MRGDn can be written.
 *  0b01..Entire MRGDn can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MRGDn fields can be written.
 *  0b11..MRGDn is locked (read-only) until the next reset.
 */
#define XRDC_MRGD_W4_12_1_LK2(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_12_1_LK2_SHIFT)) & XRDC_MRGD_W4_12_1_LK2_MASK)

#define XRDC_MRGD_W4_12_1_VLD_MASK               (0x80000000U)
#define XRDC_MRGD_W4_12_1_VLD_SHIFT              (31U)
/*! VLD - Valid
 *  0b0..The MRGDn assignment is invalid.
 *  0b1..The MRGDn assignment is valid.
 */
#define XRDC_MRGD_W4_12_1_VLD(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MRGD_W4_12_1_VLD_SHIFT)) & XRDC_MRGD_W4_12_1_VLD_MASK)
/*! @} */

/*! @name MSAC_W0_0_0 - Memory Slot Access Control */
/*! @{ */

#define XRDC_MSAC_W0_0_0_D0ACP_MASK              (0x7U)
#define XRDC_MSAC_W0_0_0_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_MSAC_W0_0_0_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_0_0_D0ACP_SHIFT)) & XRDC_MSAC_W0_0_0_D0ACP_MASK)

#define XRDC_MSAC_W0_0_0_D1ACP_MASK              (0x38U)
#define XRDC_MSAC_W0_0_0_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_MSAC_W0_0_0_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_0_0_D1ACP_SHIFT)) & XRDC_MSAC_W0_0_0_D1ACP_MASK)

#define XRDC_MSAC_W0_0_0_D2ACP_MASK              (0x1C0U)
#define XRDC_MSAC_W0_0_0_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_MSAC_W0_0_0_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_0_0_D2ACP_SHIFT)) & XRDC_MSAC_W0_0_0_D2ACP_MASK)

#define XRDC_MSAC_W0_0_0_D3ACP_MASK              (0xE00U)
#define XRDC_MSAC_W0_0_0_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_MSAC_W0_0_0_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_0_0_D3ACP_SHIFT)) & XRDC_MSAC_W0_0_0_D3ACP_MASK)

#define XRDC_MSAC_W0_0_0_D4ACP_MASK              (0x7000U)
#define XRDC_MSAC_W0_0_0_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_MSAC_W0_0_0_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_0_0_D4ACP_SHIFT)) & XRDC_MSAC_W0_0_0_D4ACP_MASK)

#define XRDC_MSAC_W0_0_0_D5ACP_MASK              (0x38000U)
#define XRDC_MSAC_W0_0_0_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_MSAC_W0_0_0_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_0_0_D5ACP_SHIFT)) & XRDC_MSAC_W0_0_0_D5ACP_MASK)

#define XRDC_MSAC_W0_0_0_D6ACP_MASK              (0x1C0000U)
#define XRDC_MSAC_W0_0_0_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_MSAC_W0_0_0_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_0_0_D6ACP_SHIFT)) & XRDC_MSAC_W0_0_0_D6ACP_MASK)

#define XRDC_MSAC_W0_0_0_D7ACP_MASK              (0xE00000U)
#define XRDC_MSAC_W0_0_0_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_MSAC_W0_0_0_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_0_0_D7ACP_SHIFT)) & XRDC_MSAC_W0_0_0_D7ACP_MASK)

#define XRDC_MSAC_W0_0_0_EALO_MASK               (0xF000000U)
#define XRDC_MSAC_W0_0_0_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_MSAC_W0_0_0_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_0_0_EALO_SHIFT)) & XRDC_MSAC_W0_0_0_EALO_MASK)
/*! @} */

/*! @name MSAC_W1_0_0 - Memory Slot Access Control */
/*! @{ */

#define XRDC_MSAC_W1_0_0_EAL_MASK                (0x3000000U)
#define XRDC_MSAC_W1_0_0_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MSAC_W1_0_0_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_0_0_EAL_SHIFT)) & XRDC_MSAC_W1_0_0_EAL_MASK)

#define XRDC_MSAC_W1_0_0_LK2_MASK                (0x60000000U)
#define XRDC_MSAC_W1_0_0_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MSACs can be written.
 *  0b01..Entire MSACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MSACs fields can be written.
 *  0b11..MSACs is locked (read-only) until the next reset.
 */
#define XRDC_MSAC_W1_0_0_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_0_0_LK2_SHIFT)) & XRDC_MSAC_W1_0_0_LK2_MASK)

#define XRDC_MSAC_W1_0_0_VLD_MASK                (0x80000000U)
#define XRDC_MSAC_W1_0_0_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MSACs assignment is invalid.
 *  0b1..The MSACs assignment is valid.
 */
#define XRDC_MSAC_W1_0_0_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_0_0_VLD_SHIFT)) & XRDC_MSAC_W1_0_0_VLD_MASK)
/*! @} */

/*! @name MSAC_W0_0_1 - Memory Slot Access Control */
/*! @{ */

#define XRDC_MSAC_W0_0_1_D0ACP_MASK              (0x7U)
#define XRDC_MSAC_W0_0_1_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_MSAC_W0_0_1_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_0_1_D0ACP_SHIFT)) & XRDC_MSAC_W0_0_1_D0ACP_MASK)

#define XRDC_MSAC_W0_0_1_D1ACP_MASK              (0x38U)
#define XRDC_MSAC_W0_0_1_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_MSAC_W0_0_1_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_0_1_D1ACP_SHIFT)) & XRDC_MSAC_W0_0_1_D1ACP_MASK)

#define XRDC_MSAC_W0_0_1_D2ACP_MASK              (0x1C0U)
#define XRDC_MSAC_W0_0_1_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_MSAC_W0_0_1_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_0_1_D2ACP_SHIFT)) & XRDC_MSAC_W0_0_1_D2ACP_MASK)

#define XRDC_MSAC_W0_0_1_D3ACP_MASK              (0xE00U)
#define XRDC_MSAC_W0_0_1_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_MSAC_W0_0_1_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_0_1_D3ACP_SHIFT)) & XRDC_MSAC_W0_0_1_D3ACP_MASK)

#define XRDC_MSAC_W0_0_1_D4ACP_MASK              (0x7000U)
#define XRDC_MSAC_W0_0_1_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_MSAC_W0_0_1_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_0_1_D4ACP_SHIFT)) & XRDC_MSAC_W0_0_1_D4ACP_MASK)

#define XRDC_MSAC_W0_0_1_D5ACP_MASK              (0x38000U)
#define XRDC_MSAC_W0_0_1_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_MSAC_W0_0_1_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_0_1_D5ACP_SHIFT)) & XRDC_MSAC_W0_0_1_D5ACP_MASK)

#define XRDC_MSAC_W0_0_1_D6ACP_MASK              (0x1C0000U)
#define XRDC_MSAC_W0_0_1_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_MSAC_W0_0_1_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_0_1_D6ACP_SHIFT)) & XRDC_MSAC_W0_0_1_D6ACP_MASK)

#define XRDC_MSAC_W0_0_1_D7ACP_MASK              (0xE00000U)
#define XRDC_MSAC_W0_0_1_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_MSAC_W0_0_1_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_0_1_D7ACP_SHIFT)) & XRDC_MSAC_W0_0_1_D7ACP_MASK)

#define XRDC_MSAC_W0_0_1_EALO_MASK               (0xF000000U)
#define XRDC_MSAC_W0_0_1_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_MSAC_W0_0_1_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_0_1_EALO_SHIFT)) & XRDC_MSAC_W0_0_1_EALO_MASK)
/*! @} */

/*! @name MSAC_W1_0_1 - Memory Slot Access Control */
/*! @{ */

#define XRDC_MSAC_W1_0_1_EAL_MASK                (0x3000000U)
#define XRDC_MSAC_W1_0_1_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MSAC_W1_0_1_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_0_1_EAL_SHIFT)) & XRDC_MSAC_W1_0_1_EAL_MASK)

#define XRDC_MSAC_W1_0_1_LK2_MASK                (0x60000000U)
#define XRDC_MSAC_W1_0_1_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MSACs can be written.
 *  0b01..Entire MSACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MSACs fields can be written.
 *  0b11..MSACs is locked (read-only) until the next reset.
 */
#define XRDC_MSAC_W1_0_1_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_0_1_LK2_SHIFT)) & XRDC_MSAC_W1_0_1_LK2_MASK)

#define XRDC_MSAC_W1_0_1_VLD_MASK                (0x80000000U)
#define XRDC_MSAC_W1_0_1_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MSACs assignment is invalid.
 *  0b1..The MSACs assignment is valid.
 */
#define XRDC_MSAC_W1_0_1_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_0_1_VLD_SHIFT)) & XRDC_MSAC_W1_0_1_VLD_MASK)
/*! @} */

/*! @name MSAC_W0_1_0 - Memory Slot Access Control */
/*! @{ */

#define XRDC_MSAC_W0_1_0_D0ACP_MASK              (0x7U)
#define XRDC_MSAC_W0_1_0_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_MSAC_W0_1_0_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_1_0_D0ACP_SHIFT)) & XRDC_MSAC_W0_1_0_D0ACP_MASK)

#define XRDC_MSAC_W0_1_0_D1ACP_MASK              (0x38U)
#define XRDC_MSAC_W0_1_0_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_MSAC_W0_1_0_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_1_0_D1ACP_SHIFT)) & XRDC_MSAC_W0_1_0_D1ACP_MASK)

#define XRDC_MSAC_W0_1_0_D2ACP_MASK              (0x1C0U)
#define XRDC_MSAC_W0_1_0_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_MSAC_W0_1_0_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_1_0_D2ACP_SHIFT)) & XRDC_MSAC_W0_1_0_D2ACP_MASK)

#define XRDC_MSAC_W0_1_0_D3ACP_MASK              (0xE00U)
#define XRDC_MSAC_W0_1_0_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_MSAC_W0_1_0_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_1_0_D3ACP_SHIFT)) & XRDC_MSAC_W0_1_0_D3ACP_MASK)

#define XRDC_MSAC_W0_1_0_D4ACP_MASK              (0x7000U)
#define XRDC_MSAC_W0_1_0_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_MSAC_W0_1_0_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_1_0_D4ACP_SHIFT)) & XRDC_MSAC_W0_1_0_D4ACP_MASK)

#define XRDC_MSAC_W0_1_0_D5ACP_MASK              (0x38000U)
#define XRDC_MSAC_W0_1_0_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_MSAC_W0_1_0_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_1_0_D5ACP_SHIFT)) & XRDC_MSAC_W0_1_0_D5ACP_MASK)

#define XRDC_MSAC_W0_1_0_D6ACP_MASK              (0x1C0000U)
#define XRDC_MSAC_W0_1_0_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_MSAC_W0_1_0_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_1_0_D6ACP_SHIFT)) & XRDC_MSAC_W0_1_0_D6ACP_MASK)

#define XRDC_MSAC_W0_1_0_D7ACP_MASK              (0xE00000U)
#define XRDC_MSAC_W0_1_0_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_MSAC_W0_1_0_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_1_0_D7ACP_SHIFT)) & XRDC_MSAC_W0_1_0_D7ACP_MASK)

#define XRDC_MSAC_W0_1_0_EALO_MASK               (0xF000000U)
#define XRDC_MSAC_W0_1_0_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_MSAC_W0_1_0_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_1_0_EALO_SHIFT)) & XRDC_MSAC_W0_1_0_EALO_MASK)
/*! @} */

/*! @name MSAC_W1_1_0 - Memory Slot Access Control */
/*! @{ */

#define XRDC_MSAC_W1_1_0_EAL_MASK                (0x3000000U)
#define XRDC_MSAC_W1_1_0_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MSAC_W1_1_0_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_1_0_EAL_SHIFT)) & XRDC_MSAC_W1_1_0_EAL_MASK)

#define XRDC_MSAC_W1_1_0_LK2_MASK                (0x60000000U)
#define XRDC_MSAC_W1_1_0_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MSACs can be written.
 *  0b01..Entire MSACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MSACs fields can be written.
 *  0b11..MSACs is locked (read-only) until the next reset.
 */
#define XRDC_MSAC_W1_1_0_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_1_0_LK2_SHIFT)) & XRDC_MSAC_W1_1_0_LK2_MASK)

#define XRDC_MSAC_W1_1_0_VLD_MASK                (0x80000000U)
#define XRDC_MSAC_W1_1_0_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MSACs assignment is invalid.
 *  0b1..The MSACs assignment is valid.
 */
#define XRDC_MSAC_W1_1_0_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_1_0_VLD_SHIFT)) & XRDC_MSAC_W1_1_0_VLD_MASK)
/*! @} */

/*! @name MSAC_W0_2_0 - Memory Slot Access Control */
/*! @{ */

#define XRDC_MSAC_W0_2_0_D0ACP_MASK              (0x7U)
#define XRDC_MSAC_W0_2_0_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_MSAC_W0_2_0_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_0_D0ACP_SHIFT)) & XRDC_MSAC_W0_2_0_D0ACP_MASK)

#define XRDC_MSAC_W0_2_0_D1ACP_MASK              (0x38U)
#define XRDC_MSAC_W0_2_0_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_MSAC_W0_2_0_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_0_D1ACP_SHIFT)) & XRDC_MSAC_W0_2_0_D1ACP_MASK)

#define XRDC_MSAC_W0_2_0_D2ACP_MASK              (0x1C0U)
#define XRDC_MSAC_W0_2_0_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_MSAC_W0_2_0_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_0_D2ACP_SHIFT)) & XRDC_MSAC_W0_2_0_D2ACP_MASK)

#define XRDC_MSAC_W0_2_0_D3ACP_MASK              (0xE00U)
#define XRDC_MSAC_W0_2_0_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_MSAC_W0_2_0_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_0_D3ACP_SHIFT)) & XRDC_MSAC_W0_2_0_D3ACP_MASK)

#define XRDC_MSAC_W0_2_0_D4ACP_MASK              (0x7000U)
#define XRDC_MSAC_W0_2_0_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_MSAC_W0_2_0_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_0_D4ACP_SHIFT)) & XRDC_MSAC_W0_2_0_D4ACP_MASK)

#define XRDC_MSAC_W0_2_0_D5ACP_MASK              (0x38000U)
#define XRDC_MSAC_W0_2_0_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_MSAC_W0_2_0_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_0_D5ACP_SHIFT)) & XRDC_MSAC_W0_2_0_D5ACP_MASK)

#define XRDC_MSAC_W0_2_0_D6ACP_MASK              (0x1C0000U)
#define XRDC_MSAC_W0_2_0_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_MSAC_W0_2_0_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_0_D6ACP_SHIFT)) & XRDC_MSAC_W0_2_0_D6ACP_MASK)

#define XRDC_MSAC_W0_2_0_D7ACP_MASK              (0xE00000U)
#define XRDC_MSAC_W0_2_0_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_MSAC_W0_2_0_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_0_D7ACP_SHIFT)) & XRDC_MSAC_W0_2_0_D7ACP_MASK)

#define XRDC_MSAC_W0_2_0_EALO_MASK               (0xF000000U)
#define XRDC_MSAC_W0_2_0_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_MSAC_W0_2_0_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_0_EALO_SHIFT)) & XRDC_MSAC_W0_2_0_EALO_MASK)
/*! @} */

/*! @name MSAC_W1_2_0 - Memory Slot Access Control */
/*! @{ */

#define XRDC_MSAC_W1_2_0_EAL_MASK                (0x3000000U)
#define XRDC_MSAC_W1_2_0_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MSAC_W1_2_0_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_2_0_EAL_SHIFT)) & XRDC_MSAC_W1_2_0_EAL_MASK)

#define XRDC_MSAC_W1_2_0_LK2_MASK                (0x60000000U)
#define XRDC_MSAC_W1_2_0_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MSACs can be written.
 *  0b01..Entire MSACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MSACs fields can be written.
 *  0b11..MSACs is locked (read-only) until the next reset.
 */
#define XRDC_MSAC_W1_2_0_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_2_0_LK2_SHIFT)) & XRDC_MSAC_W1_2_0_LK2_MASK)

#define XRDC_MSAC_W1_2_0_VLD_MASK                (0x80000000U)
#define XRDC_MSAC_W1_2_0_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MSACs assignment is invalid.
 *  0b1..The MSACs assignment is valid.
 */
#define XRDC_MSAC_W1_2_0_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_2_0_VLD_SHIFT)) & XRDC_MSAC_W1_2_0_VLD_MASK)
/*! @} */

/*! @name MSAC_W0_2_1 - Memory Slot Access Control */
/*! @{ */

#define XRDC_MSAC_W0_2_1_D0ACP_MASK              (0x7U)
#define XRDC_MSAC_W0_2_1_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_MSAC_W0_2_1_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_1_D0ACP_SHIFT)) & XRDC_MSAC_W0_2_1_D0ACP_MASK)

#define XRDC_MSAC_W0_2_1_D1ACP_MASK              (0x38U)
#define XRDC_MSAC_W0_2_1_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_MSAC_W0_2_1_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_1_D1ACP_SHIFT)) & XRDC_MSAC_W0_2_1_D1ACP_MASK)

#define XRDC_MSAC_W0_2_1_D2ACP_MASK              (0x1C0U)
#define XRDC_MSAC_W0_2_1_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_MSAC_W0_2_1_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_1_D2ACP_SHIFT)) & XRDC_MSAC_W0_2_1_D2ACP_MASK)

#define XRDC_MSAC_W0_2_1_D3ACP_MASK              (0xE00U)
#define XRDC_MSAC_W0_2_1_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_MSAC_W0_2_1_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_1_D3ACP_SHIFT)) & XRDC_MSAC_W0_2_1_D3ACP_MASK)

#define XRDC_MSAC_W0_2_1_D4ACP_MASK              (0x7000U)
#define XRDC_MSAC_W0_2_1_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_MSAC_W0_2_1_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_1_D4ACP_SHIFT)) & XRDC_MSAC_W0_2_1_D4ACP_MASK)

#define XRDC_MSAC_W0_2_1_D5ACP_MASK              (0x38000U)
#define XRDC_MSAC_W0_2_1_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_MSAC_W0_2_1_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_1_D5ACP_SHIFT)) & XRDC_MSAC_W0_2_1_D5ACP_MASK)

#define XRDC_MSAC_W0_2_1_D6ACP_MASK              (0x1C0000U)
#define XRDC_MSAC_W0_2_1_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_MSAC_W0_2_1_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_1_D6ACP_SHIFT)) & XRDC_MSAC_W0_2_1_D6ACP_MASK)

#define XRDC_MSAC_W0_2_1_D7ACP_MASK              (0xE00000U)
#define XRDC_MSAC_W0_2_1_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_MSAC_W0_2_1_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_1_D7ACP_SHIFT)) & XRDC_MSAC_W0_2_1_D7ACP_MASK)

#define XRDC_MSAC_W0_2_1_EALO_MASK               (0xF000000U)
#define XRDC_MSAC_W0_2_1_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_MSAC_W0_2_1_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_1_EALO_SHIFT)) & XRDC_MSAC_W0_2_1_EALO_MASK)
/*! @} */

/*! @name MSAC_W1_2_1 - Memory Slot Access Control */
/*! @{ */

#define XRDC_MSAC_W1_2_1_EAL_MASK                (0x3000000U)
#define XRDC_MSAC_W1_2_1_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MSAC_W1_2_1_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_2_1_EAL_SHIFT)) & XRDC_MSAC_W1_2_1_EAL_MASK)

#define XRDC_MSAC_W1_2_1_LK2_MASK                (0x60000000U)
#define XRDC_MSAC_W1_2_1_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MSACs can be written.
 *  0b01..Entire MSACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MSACs fields can be written.
 *  0b11..MSACs is locked (read-only) until the next reset.
 */
#define XRDC_MSAC_W1_2_1_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_2_1_LK2_SHIFT)) & XRDC_MSAC_W1_2_1_LK2_MASK)

#define XRDC_MSAC_W1_2_1_VLD_MASK                (0x80000000U)
#define XRDC_MSAC_W1_2_1_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MSACs assignment is invalid.
 *  0b1..The MSACs assignment is valid.
 */
#define XRDC_MSAC_W1_2_1_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_2_1_VLD_SHIFT)) & XRDC_MSAC_W1_2_1_VLD_MASK)
/*! @} */

/*! @name MSAC_W0_2_2 - Memory Slot Access Control */
/*! @{ */

#define XRDC_MSAC_W0_2_2_D0ACP_MASK              (0x7U)
#define XRDC_MSAC_W0_2_2_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_MSAC_W0_2_2_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_2_D0ACP_SHIFT)) & XRDC_MSAC_W0_2_2_D0ACP_MASK)

#define XRDC_MSAC_W0_2_2_D1ACP_MASK              (0x38U)
#define XRDC_MSAC_W0_2_2_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_MSAC_W0_2_2_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_2_D1ACP_SHIFT)) & XRDC_MSAC_W0_2_2_D1ACP_MASK)

#define XRDC_MSAC_W0_2_2_D2ACP_MASK              (0x1C0U)
#define XRDC_MSAC_W0_2_2_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_MSAC_W0_2_2_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_2_D2ACP_SHIFT)) & XRDC_MSAC_W0_2_2_D2ACP_MASK)

#define XRDC_MSAC_W0_2_2_D3ACP_MASK              (0xE00U)
#define XRDC_MSAC_W0_2_2_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_MSAC_W0_2_2_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_2_D3ACP_SHIFT)) & XRDC_MSAC_W0_2_2_D3ACP_MASK)

#define XRDC_MSAC_W0_2_2_D4ACP_MASK              (0x7000U)
#define XRDC_MSAC_W0_2_2_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_MSAC_W0_2_2_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_2_D4ACP_SHIFT)) & XRDC_MSAC_W0_2_2_D4ACP_MASK)

#define XRDC_MSAC_W0_2_2_D5ACP_MASK              (0x38000U)
#define XRDC_MSAC_W0_2_2_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_MSAC_W0_2_2_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_2_D5ACP_SHIFT)) & XRDC_MSAC_W0_2_2_D5ACP_MASK)

#define XRDC_MSAC_W0_2_2_D6ACP_MASK              (0x1C0000U)
#define XRDC_MSAC_W0_2_2_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_MSAC_W0_2_2_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_2_D6ACP_SHIFT)) & XRDC_MSAC_W0_2_2_D6ACP_MASK)

#define XRDC_MSAC_W0_2_2_D7ACP_MASK              (0xE00000U)
#define XRDC_MSAC_W0_2_2_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_MSAC_W0_2_2_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_2_D7ACP_SHIFT)) & XRDC_MSAC_W0_2_2_D7ACP_MASK)

#define XRDC_MSAC_W0_2_2_EALO_MASK               (0xF000000U)
#define XRDC_MSAC_W0_2_2_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_MSAC_W0_2_2_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_2_EALO_SHIFT)) & XRDC_MSAC_W0_2_2_EALO_MASK)
/*! @} */

/*! @name MSAC_W1_2_2 - Memory Slot Access Control */
/*! @{ */

#define XRDC_MSAC_W1_2_2_EAL_MASK                (0x3000000U)
#define XRDC_MSAC_W1_2_2_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MSAC_W1_2_2_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_2_2_EAL_SHIFT)) & XRDC_MSAC_W1_2_2_EAL_MASK)

#define XRDC_MSAC_W1_2_2_LK2_MASK                (0x60000000U)
#define XRDC_MSAC_W1_2_2_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MSACs can be written.
 *  0b01..Entire MSACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MSACs fields can be written.
 *  0b11..MSACs is locked (read-only) until the next reset.
 */
#define XRDC_MSAC_W1_2_2_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_2_2_LK2_SHIFT)) & XRDC_MSAC_W1_2_2_LK2_MASK)

#define XRDC_MSAC_W1_2_2_VLD_MASK                (0x80000000U)
#define XRDC_MSAC_W1_2_2_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MSACs assignment is invalid.
 *  0b1..The MSACs assignment is valid.
 */
#define XRDC_MSAC_W1_2_2_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_2_2_VLD_SHIFT)) & XRDC_MSAC_W1_2_2_VLD_MASK)
/*! @} */

/*! @name MSAC_W0_2_3 - Memory Slot Access Control */
/*! @{ */

#define XRDC_MSAC_W0_2_3_D0ACP_MASK              (0x7U)
#define XRDC_MSAC_W0_2_3_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_MSAC_W0_2_3_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_3_D0ACP_SHIFT)) & XRDC_MSAC_W0_2_3_D0ACP_MASK)

#define XRDC_MSAC_W0_2_3_D1ACP_MASK              (0x38U)
#define XRDC_MSAC_W0_2_3_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_MSAC_W0_2_3_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_3_D1ACP_SHIFT)) & XRDC_MSAC_W0_2_3_D1ACP_MASK)

#define XRDC_MSAC_W0_2_3_D2ACP_MASK              (0x1C0U)
#define XRDC_MSAC_W0_2_3_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_MSAC_W0_2_3_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_3_D2ACP_SHIFT)) & XRDC_MSAC_W0_2_3_D2ACP_MASK)

#define XRDC_MSAC_W0_2_3_D3ACP_MASK              (0xE00U)
#define XRDC_MSAC_W0_2_3_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_MSAC_W0_2_3_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_3_D3ACP_SHIFT)) & XRDC_MSAC_W0_2_3_D3ACP_MASK)

#define XRDC_MSAC_W0_2_3_D4ACP_MASK              (0x7000U)
#define XRDC_MSAC_W0_2_3_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_MSAC_W0_2_3_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_3_D4ACP_SHIFT)) & XRDC_MSAC_W0_2_3_D4ACP_MASK)

#define XRDC_MSAC_W0_2_3_D5ACP_MASK              (0x38000U)
#define XRDC_MSAC_W0_2_3_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_MSAC_W0_2_3_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_3_D5ACP_SHIFT)) & XRDC_MSAC_W0_2_3_D5ACP_MASK)

#define XRDC_MSAC_W0_2_3_D6ACP_MASK              (0x1C0000U)
#define XRDC_MSAC_W0_2_3_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_MSAC_W0_2_3_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_3_D6ACP_SHIFT)) & XRDC_MSAC_W0_2_3_D6ACP_MASK)

#define XRDC_MSAC_W0_2_3_D7ACP_MASK              (0xE00000U)
#define XRDC_MSAC_W0_2_3_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_MSAC_W0_2_3_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_3_D7ACP_SHIFT)) & XRDC_MSAC_W0_2_3_D7ACP_MASK)

#define XRDC_MSAC_W0_2_3_EALO_MASK               (0xF000000U)
#define XRDC_MSAC_W0_2_3_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_MSAC_W0_2_3_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_3_EALO_SHIFT)) & XRDC_MSAC_W0_2_3_EALO_MASK)
/*! @} */

/*! @name MSAC_W1_2_3 - Memory Slot Access Control */
/*! @{ */

#define XRDC_MSAC_W1_2_3_EAL_MASK                (0x3000000U)
#define XRDC_MSAC_W1_2_3_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MSAC_W1_2_3_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_2_3_EAL_SHIFT)) & XRDC_MSAC_W1_2_3_EAL_MASK)

#define XRDC_MSAC_W1_2_3_LK2_MASK                (0x60000000U)
#define XRDC_MSAC_W1_2_3_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MSACs can be written.
 *  0b01..Entire MSACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MSACs fields can be written.
 *  0b11..MSACs is locked (read-only) until the next reset.
 */
#define XRDC_MSAC_W1_2_3_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_2_3_LK2_SHIFT)) & XRDC_MSAC_W1_2_3_LK2_MASK)

#define XRDC_MSAC_W1_2_3_VLD_MASK                (0x80000000U)
#define XRDC_MSAC_W1_2_3_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MSACs assignment is invalid.
 *  0b1..The MSACs assignment is valid.
 */
#define XRDC_MSAC_W1_2_3_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_2_3_VLD_SHIFT)) & XRDC_MSAC_W1_2_3_VLD_MASK)
/*! @} */

/*! @name MSAC_W0_2_4 - Memory Slot Access Control */
/*! @{ */

#define XRDC_MSAC_W0_2_4_D0ACP_MASK              (0x7U)
#define XRDC_MSAC_W0_2_4_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_MSAC_W0_2_4_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_4_D0ACP_SHIFT)) & XRDC_MSAC_W0_2_4_D0ACP_MASK)

#define XRDC_MSAC_W0_2_4_D1ACP_MASK              (0x38U)
#define XRDC_MSAC_W0_2_4_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_MSAC_W0_2_4_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_4_D1ACP_SHIFT)) & XRDC_MSAC_W0_2_4_D1ACP_MASK)

#define XRDC_MSAC_W0_2_4_D2ACP_MASK              (0x1C0U)
#define XRDC_MSAC_W0_2_4_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_MSAC_W0_2_4_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_4_D2ACP_SHIFT)) & XRDC_MSAC_W0_2_4_D2ACP_MASK)

#define XRDC_MSAC_W0_2_4_D3ACP_MASK              (0xE00U)
#define XRDC_MSAC_W0_2_4_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_MSAC_W0_2_4_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_4_D3ACP_SHIFT)) & XRDC_MSAC_W0_2_4_D3ACP_MASK)

#define XRDC_MSAC_W0_2_4_D4ACP_MASK              (0x7000U)
#define XRDC_MSAC_W0_2_4_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_MSAC_W0_2_4_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_4_D4ACP_SHIFT)) & XRDC_MSAC_W0_2_4_D4ACP_MASK)

#define XRDC_MSAC_W0_2_4_D5ACP_MASK              (0x38000U)
#define XRDC_MSAC_W0_2_4_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_MSAC_W0_2_4_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_4_D5ACP_SHIFT)) & XRDC_MSAC_W0_2_4_D5ACP_MASK)

#define XRDC_MSAC_W0_2_4_D6ACP_MASK              (0x1C0000U)
#define XRDC_MSAC_W0_2_4_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_MSAC_W0_2_4_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_4_D6ACP_SHIFT)) & XRDC_MSAC_W0_2_4_D6ACP_MASK)

#define XRDC_MSAC_W0_2_4_D7ACP_MASK              (0xE00000U)
#define XRDC_MSAC_W0_2_4_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_MSAC_W0_2_4_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_4_D7ACP_SHIFT)) & XRDC_MSAC_W0_2_4_D7ACP_MASK)

#define XRDC_MSAC_W0_2_4_EALO_MASK               (0xF000000U)
#define XRDC_MSAC_W0_2_4_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_MSAC_W0_2_4_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_4_EALO_SHIFT)) & XRDC_MSAC_W0_2_4_EALO_MASK)
/*! @} */

/*! @name MSAC_W1_2_4 - Memory Slot Access Control */
/*! @{ */

#define XRDC_MSAC_W1_2_4_EAL_MASK                (0x3000000U)
#define XRDC_MSAC_W1_2_4_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MSAC_W1_2_4_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_2_4_EAL_SHIFT)) & XRDC_MSAC_W1_2_4_EAL_MASK)

#define XRDC_MSAC_W1_2_4_LK2_MASK                (0x60000000U)
#define XRDC_MSAC_W1_2_4_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MSACs can be written.
 *  0b01..Entire MSACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MSACs fields can be written.
 *  0b11..MSACs is locked (read-only) until the next reset.
 */
#define XRDC_MSAC_W1_2_4_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_2_4_LK2_SHIFT)) & XRDC_MSAC_W1_2_4_LK2_MASK)

#define XRDC_MSAC_W1_2_4_VLD_MASK                (0x80000000U)
#define XRDC_MSAC_W1_2_4_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MSACs assignment is invalid.
 *  0b1..The MSACs assignment is valid.
 */
#define XRDC_MSAC_W1_2_4_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_2_4_VLD_SHIFT)) & XRDC_MSAC_W1_2_4_VLD_MASK)
/*! @} */

/*! @name MSAC_W0_2_5 - Memory Slot Access Control */
/*! @{ */

#define XRDC_MSAC_W0_2_5_D0ACP_MASK              (0x7U)
#define XRDC_MSAC_W0_2_5_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_MSAC_W0_2_5_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_5_D0ACP_SHIFT)) & XRDC_MSAC_W0_2_5_D0ACP_MASK)

#define XRDC_MSAC_W0_2_5_D1ACP_MASK              (0x38U)
#define XRDC_MSAC_W0_2_5_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_MSAC_W0_2_5_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_5_D1ACP_SHIFT)) & XRDC_MSAC_W0_2_5_D1ACP_MASK)

#define XRDC_MSAC_W0_2_5_D2ACP_MASK              (0x1C0U)
#define XRDC_MSAC_W0_2_5_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_MSAC_W0_2_5_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_5_D2ACP_SHIFT)) & XRDC_MSAC_W0_2_5_D2ACP_MASK)

#define XRDC_MSAC_W0_2_5_D3ACP_MASK              (0xE00U)
#define XRDC_MSAC_W0_2_5_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_MSAC_W0_2_5_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_5_D3ACP_SHIFT)) & XRDC_MSAC_W0_2_5_D3ACP_MASK)

#define XRDC_MSAC_W0_2_5_D4ACP_MASK              (0x7000U)
#define XRDC_MSAC_W0_2_5_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_MSAC_W0_2_5_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_5_D4ACP_SHIFT)) & XRDC_MSAC_W0_2_5_D4ACP_MASK)

#define XRDC_MSAC_W0_2_5_D5ACP_MASK              (0x38000U)
#define XRDC_MSAC_W0_2_5_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_MSAC_W0_2_5_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_5_D5ACP_SHIFT)) & XRDC_MSAC_W0_2_5_D5ACP_MASK)

#define XRDC_MSAC_W0_2_5_D6ACP_MASK              (0x1C0000U)
#define XRDC_MSAC_W0_2_5_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_MSAC_W0_2_5_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_5_D6ACP_SHIFT)) & XRDC_MSAC_W0_2_5_D6ACP_MASK)

#define XRDC_MSAC_W0_2_5_D7ACP_MASK              (0xE00000U)
#define XRDC_MSAC_W0_2_5_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_MSAC_W0_2_5_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_5_D7ACP_SHIFT)) & XRDC_MSAC_W0_2_5_D7ACP_MASK)

#define XRDC_MSAC_W0_2_5_EALO_MASK               (0xF000000U)
#define XRDC_MSAC_W0_2_5_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_MSAC_W0_2_5_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_5_EALO_SHIFT)) & XRDC_MSAC_W0_2_5_EALO_MASK)
/*! @} */

/*! @name MSAC_W1_2_5 - Memory Slot Access Control */
/*! @{ */

#define XRDC_MSAC_W1_2_5_EAL_MASK                (0x3000000U)
#define XRDC_MSAC_W1_2_5_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MSAC_W1_2_5_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_2_5_EAL_SHIFT)) & XRDC_MSAC_W1_2_5_EAL_MASK)

#define XRDC_MSAC_W1_2_5_LK2_MASK                (0x60000000U)
#define XRDC_MSAC_W1_2_5_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MSACs can be written.
 *  0b01..Entire MSACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MSACs fields can be written.
 *  0b11..MSACs is locked (read-only) until the next reset.
 */
#define XRDC_MSAC_W1_2_5_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_2_5_LK2_SHIFT)) & XRDC_MSAC_W1_2_5_LK2_MASK)

#define XRDC_MSAC_W1_2_5_VLD_MASK                (0x80000000U)
#define XRDC_MSAC_W1_2_5_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MSACs assignment is invalid.
 *  0b1..The MSACs assignment is valid.
 */
#define XRDC_MSAC_W1_2_5_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_2_5_VLD_SHIFT)) & XRDC_MSAC_W1_2_5_VLD_MASK)
/*! @} */

/*! @name MSAC_W0_2_6 - Memory Slot Access Control */
/*! @{ */

#define XRDC_MSAC_W0_2_6_D0ACP_MASK              (0x7U)
#define XRDC_MSAC_W0_2_6_D0ACP_SHIFT             (0U)
/*! D0ACP - Domain 0 access control policy */
#define XRDC_MSAC_W0_2_6_D0ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_6_D0ACP_SHIFT)) & XRDC_MSAC_W0_2_6_D0ACP_MASK)

#define XRDC_MSAC_W0_2_6_D1ACP_MASK              (0x38U)
#define XRDC_MSAC_W0_2_6_D1ACP_SHIFT             (3U)
/*! D1ACP - Domain 1 access control policy */
#define XRDC_MSAC_W0_2_6_D1ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_6_D1ACP_SHIFT)) & XRDC_MSAC_W0_2_6_D1ACP_MASK)

#define XRDC_MSAC_W0_2_6_D2ACP_MASK              (0x1C0U)
#define XRDC_MSAC_W0_2_6_D2ACP_SHIFT             (6U)
/*! D2ACP - Domain 2 access control policy */
#define XRDC_MSAC_W0_2_6_D2ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_6_D2ACP_SHIFT)) & XRDC_MSAC_W0_2_6_D2ACP_MASK)

#define XRDC_MSAC_W0_2_6_D3ACP_MASK              (0xE00U)
#define XRDC_MSAC_W0_2_6_D3ACP_SHIFT             (9U)
/*! D3ACP - Domain 3 access control policy */
#define XRDC_MSAC_W0_2_6_D3ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_6_D3ACP_SHIFT)) & XRDC_MSAC_W0_2_6_D3ACP_MASK)

#define XRDC_MSAC_W0_2_6_D4ACP_MASK              (0x7000U)
#define XRDC_MSAC_W0_2_6_D4ACP_SHIFT             (12U)
/*! D4ACP - Domain 4 access control policy */
#define XRDC_MSAC_W0_2_6_D4ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_6_D4ACP_SHIFT)) & XRDC_MSAC_W0_2_6_D4ACP_MASK)

#define XRDC_MSAC_W0_2_6_D5ACP_MASK              (0x38000U)
#define XRDC_MSAC_W0_2_6_D5ACP_SHIFT             (15U)
/*! D5ACP - Domain 5 access control policy */
#define XRDC_MSAC_W0_2_6_D5ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_6_D5ACP_SHIFT)) & XRDC_MSAC_W0_2_6_D5ACP_MASK)

#define XRDC_MSAC_W0_2_6_D6ACP_MASK              (0x1C0000U)
#define XRDC_MSAC_W0_2_6_D6ACP_SHIFT             (18U)
/*! D6ACP - Domain 6 access control policy */
#define XRDC_MSAC_W0_2_6_D6ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_6_D6ACP_SHIFT)) & XRDC_MSAC_W0_2_6_D6ACP_MASK)

#define XRDC_MSAC_W0_2_6_D7ACP_MASK              (0xE00000U)
#define XRDC_MSAC_W0_2_6_D7ACP_SHIFT             (21U)
/*! D7ACP - Domain 7 access control policy */
#define XRDC_MSAC_W0_2_6_D7ACP(x)                (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_6_D7ACP_SHIFT)) & XRDC_MSAC_W0_2_6_D7ACP_MASK)

#define XRDC_MSAC_W0_2_6_EALO_MASK               (0xF000000U)
#define XRDC_MSAC_W0_2_6_EALO_SHIFT              (24U)
/*! EALO - Excessive Access Lock Owner */
#define XRDC_MSAC_W0_2_6_EALO(x)                 (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W0_2_6_EALO_SHIFT)) & XRDC_MSAC_W0_2_6_EALO_MASK)
/*! @} */

/*! @name MSAC_W1_2_6 - Memory Slot Access Control */
/*! @{ */

#define XRDC_MSAC_W1_2_6_EAL_MASK                (0x3000000U)
#define XRDC_MSAC_W1_2_6_EAL_SHIFT               (24U)
/*! EAL - Exclusive Access Lock
 *  0b00..Lock disabled
 *  0b01..Lock disabled until next reset
 *  0b10..Lock enabled, lock state = available
 *  0b11..Lock enabled, lock state = not available
 */
#define XRDC_MSAC_W1_2_6_EAL(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_2_6_EAL_SHIFT)) & XRDC_MSAC_W1_2_6_EAL_MASK)

#define XRDC_MSAC_W1_2_6_LK2_MASK                (0x60000000U)
#define XRDC_MSAC_W1_2_6_LK2_SHIFT               (29U)
/*! LK2 - Lock
 *  0b00..Entire MSACs can be written.
 *  0b01..Entire MSACs can be written.
 *  0b10..Domain x can only update the DxACP field and the LK2 field; no other MSACs fields can be written.
 *  0b11..MSACs is locked (read-only) until the next reset.
 */
#define XRDC_MSAC_W1_2_6_LK2(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_2_6_LK2_SHIFT)) & XRDC_MSAC_W1_2_6_LK2_MASK)

#define XRDC_MSAC_W1_2_6_VLD_MASK                (0x80000000U)
#define XRDC_MSAC_W1_2_6_VLD_SHIFT               (31U)
/*! VLD - Valid
 *  0b0..The MSACs assignment is invalid.
 *  0b1..The MSACs assignment is valid.
 */
#define XRDC_MSAC_W1_2_6_VLD(x)                  (((uint32_t)(((uint32_t)(x)) << XRDC_MSAC_W1_2_6_VLD_SHIFT)) & XRDC_MSAC_W1_2_6_VLD_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group XRDC_Register_Masks */


/*!
 * @}
 */ /* end of group XRDC_Peripheral_Access_Layer */


/*
** End of section using anonymous unions
*/

#if defined(__ARMCC_VERSION)
  #if (__ARMCC_VERSION >= 6010050)
    #pragma clang diagnostic pop
  #else
    #pragma pop
  #endif
#elif defined(__GNUC__)
  /* leave anonymous unions enabled */
#elif defined(__IAR_SYSTEMS_ICC__)
  #pragma language=default
#elif defined(__XTENSA__)
  /* leave anonymous unions enabled */
#else
  #error Not supported compiler type
#endif

/*!
 * @}
 */ /* end of group Peripheral_access_layer */


#endif  /* XRDC_H_ */

