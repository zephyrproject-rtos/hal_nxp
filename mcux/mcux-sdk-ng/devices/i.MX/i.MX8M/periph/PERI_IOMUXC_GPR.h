/*
** ###################################################################
**     Processors:          MIMX8MD6CVAHZ_ca53
**                          MIMX8MD6CVAHZ_cm4
**                          MIMX8MD6DVAJZ_ca53
**                          MIMX8MD6DVAJZ_cm4
**                          MIMX8MD7CVAHZ_ca53
**                          MIMX8MD7CVAHZ_cm4
**                          MIMX8MD7DVAJZ_ca53
**                          MIMX8MD7DVAJZ_cm4
**                          MIMX8MQ5CVAHZ_ca53
**                          MIMX8MQ5CVAHZ_cm4
**                          MIMX8MQ5DVAJZ_ca53
**                          MIMX8MQ5DVAJZ_cm4
**                          MIMX8MQ6CVAHZ_ca53
**                          MIMX8MQ6CVAHZ_cm4
**                          MIMX8MQ6DVAJZ_ca53
**                          MIMX8MQ6DVAJZ_cm4
**                          MIMX8MQ7CVAHZ_ca53
**                          MIMX8MQ7CVAHZ_cm4
**                          MIMX8MQ7DVAJZ_ca53
**                          MIMX8MQ7DVAJZ_cm4
**
**     Version:             rev. 4.0, 2018-01-26
**     Build:               b240708
**
**     Abstract:
**         CMSIS Peripheral Access Layer for IOMUXC_GPR
**
**     Copyright 1997-2016 Freescale Semiconductor, Inc.
**     Copyright 2016-2024 NXP
**     SPDX-License-Identifier: BSD-3-Clause
**
**     http:                 www.nxp.com
**     mail:                 support@nxp.com
**
**     Revisions:
**     - rev. 1.0 (2017-01-10)
**         Initial version.
**     - rev. 2.0 (2017-04-27)
**         Rev.B Header EAR1
**     - rev. 3.0 (2017-07-19)
**         Rev.C Header EAR2
**     - rev. 4.0 (2018-01-26)
**         Rev.D Header RFP
**
** ###################################################################
*/

/*!
 * @file IOMUXC_GPR.h
 * @version 4.0
 * @date 2018-01-26
 * @brief CMSIS Peripheral Access Layer for IOMUXC_GPR
 *
 * CMSIS Peripheral Access Layer for IOMUXC_GPR
 */

#if !defined(IOMUXC_GPR_H_)
#define IOMUXC_GPR_H_                            /**< Symbol preventing repeated inclusion */

#if (defined(CPU_MIMX8MD6CVAHZ_ca53) || defined(CPU_MIMX8MD6DVAJZ_ca53))
#include "MIMX8MD6_ca53_COMMON.h"
#elif (defined(CPU_MIMX8MD6CVAHZ_cm4) || defined(CPU_MIMX8MD6DVAJZ_cm4))
#include "MIMX8MD6_cm4_COMMON.h"
#elif (defined(CPU_MIMX8MD7CVAHZ_ca53) || defined(CPU_MIMX8MD7DVAJZ_ca53))
#include "MIMX8MD7_ca53_COMMON.h"
#elif (defined(CPU_MIMX8MD7CVAHZ_cm4) || defined(CPU_MIMX8MD7DVAJZ_cm4))
#include "MIMX8MD7_cm4_COMMON.h"
#elif (defined(CPU_MIMX8MQ5CVAHZ_ca53) || defined(CPU_MIMX8MQ5DVAJZ_ca53))
#include "MIMX8MQ5_ca53_COMMON.h"
#elif (defined(CPU_MIMX8MQ5CVAHZ_cm4) || defined(CPU_MIMX8MQ5DVAJZ_cm4))
#include "MIMX8MQ5_cm4_COMMON.h"
#elif (defined(CPU_MIMX8MQ6CVAHZ_ca53) || defined(CPU_MIMX8MQ6DVAJZ_ca53))
#include "MIMX8MQ6_ca53_COMMON.h"
#elif (defined(CPU_MIMX8MQ6CVAHZ_cm4) || defined(CPU_MIMX8MQ6DVAJZ_cm4))
#include "MIMX8MQ6_cm4_COMMON.h"
#elif (defined(CPU_MIMX8MQ7CVAHZ_ca53) || defined(CPU_MIMX8MQ7DVAJZ_ca53))
#include "MIMX8MQ7_ca53_COMMON.h"
#elif (defined(CPU_MIMX8MQ7CVAHZ_cm4) || defined(CPU_MIMX8MQ7DVAJZ_cm4))
#include "MIMX8MQ7_cm4_COMMON.h"
#else
  #error "No valid CPU defined!"
#endif

/* ----------------------------------------------------------------------------
   -- Device Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup Peripheral_access_layer Device Peripheral Access Layer
 * @{
 */


/*
** Start of section using anonymous unions
*/

#if defined(__ARMCC_VERSION)
  #if (__ARMCC_VERSION >= 6010050)
    #pragma clang diagnostic push
  #else
    #pragma push
    #pragma anon_unions
  #endif
#elif defined(__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined(__IAR_SYSTEMS_ICC__)
  #pragma language=extended
#else
  #error Not supported compiler type
#endif

/* ----------------------------------------------------------------------------
   -- IOMUXC_GPR Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_GPR_Peripheral_Access_Layer IOMUXC_GPR Peripheral Access Layer
 * @{
 */

/** IOMUXC_GPR - Size of Registers Arrays */
#define IOMUXC_GPR_GPR_COUNT                      48u

/** IOMUXC_GPR - Register Layout Typedef */
typedef struct {
  __IO uint32_t GPR[IOMUXC_GPR_GPR_COUNT];         /**< GPR0 General Purpose Register..GPR47 General Purpose Register, array offset: 0x0, array step: 0x4 */
} IOMUXC_GPR_Type;

/* ----------------------------------------------------------------------------
   -- IOMUXC_GPR Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_GPR_Register_Masks IOMUXC_GPR Register Masks
 * @{
 */

/*! @name GPR - GPR0 General Purpose Register..GPR47 General Purpose Register */
/*! @{ */

#define IOMUXC_GPR_GPR_ARCACHE_USDHC_MASK        (0x1U)
#define IOMUXC_GPR_GPR_ARCACHE_USDHC_SHIFT       (0U)
/*! ARCACHE_USDHC
 *  0b0..Drive USDHC AXI Master ARCACHE[1] to 0
 *  0b1..Drive USDHC AXI Master ARCACHE[1] to 1
 */
#define IOMUXC_GPR_GPR_ARCACHE_USDHC(x)          (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_ARCACHE_USDHC_SHIFT)) & IOMUXC_GPR_GPR_ARCACHE_USDHC_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_D0_INT_LB_BYTE_CNT_MASK (0x3FFU)
#define IOMUXC_GPR_GPR_CSI2_1_D0_INT_LB_BYTE_CNT_SHIFT (0U)
#define IOMUXC_GPR_GPR_CSI2_1_D0_INT_LB_BYTE_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_D0_INT_LB_BYTE_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_D0_INT_LB_BYTE_CNT_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_D1_INT_LB_BYTE_CNT_MASK (0x3FFU)
#define IOMUXC_GPR_GPR_CSI2_1_D1_INT_LB_BYTE_CNT_SHIFT (0U)
#define IOMUXC_GPR_GPR_CSI2_1_D1_INT_LB_BYTE_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_D1_INT_LB_BYTE_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_D1_INT_LB_BYTE_CNT_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_D2_INT_LB_BYTE_CNT_MASK (0x3FFU)
#define IOMUXC_GPR_GPR_CSI2_1_D2_INT_LB_BYTE_CNT_SHIFT (0U)
#define IOMUXC_GPR_GPR_CSI2_1_D2_INT_LB_BYTE_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_D2_INT_LB_BYTE_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_D2_INT_LB_BYTE_CNT_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_D3_INT_LB_BYTE_CNT_MASK (0x3FFU)
#define IOMUXC_GPR_GPR_CSI2_1_D3_INT_LB_BYTE_CNT_SHIFT (0U)
#define IOMUXC_GPR_GPR_CSI2_1_D3_INT_LB_BYTE_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_D3_INT_LB_BYTE_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_D3_INT_LB_BYTE_CNT_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_ECC_TWO_BIT_ERROR_MASK (0x1U)
#define IOMUXC_GPR_GPR_CSI2_1_ECC_TWO_BIT_ERROR_SHIFT (0U)
#define IOMUXC_GPR_GPR_CSI2_1_ECC_TWO_BIT_ERROR(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_ECC_TWO_BIT_ERROR_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_ECC_TWO_BIT_ERROR_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_RX_RCAL_MASK       (0x3U)
#define IOMUXC_GPR_GPR_CSI2_1_RX_RCAL_SHIFT      (0U)
#define IOMUXC_GPR_GPR_CSI2_1_RX_RCAL(x)         (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_RX_RCAL_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_RX_RCAL_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_TEST_PATTERN_MASK  (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR_CSI2_1_TEST_PATTERN_SHIFT (0U)
#define IOMUXC_GPR_GPR_CSI2_1_TEST_PATTERN(x)    (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_TEST_PATTERN_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_TEST_PATTERN_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_D0_INT_LB_BYTE_CNT_MASK (0x3FFU)
#define IOMUXC_GPR_GPR_CSI2_2_D0_INT_LB_BYTE_CNT_SHIFT (0U)
#define IOMUXC_GPR_GPR_CSI2_2_D0_INT_LB_BYTE_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_D0_INT_LB_BYTE_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_D0_INT_LB_BYTE_CNT_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_D1_INT_LB_BYTE_CNT_MASK (0x3FFU)
#define IOMUXC_GPR_GPR_CSI2_2_D1_INT_LB_BYTE_CNT_SHIFT (0U)
#define IOMUXC_GPR_GPR_CSI2_2_D1_INT_LB_BYTE_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_D1_INT_LB_BYTE_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_D1_INT_LB_BYTE_CNT_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_D2_INT_LB_BYTE_CNT_MASK (0x3FFU)
#define IOMUXC_GPR_GPR_CSI2_2_D2_INT_LB_BYTE_CNT_SHIFT (0U)
#define IOMUXC_GPR_GPR_CSI2_2_D2_INT_LB_BYTE_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_D2_INT_LB_BYTE_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_D2_INT_LB_BYTE_CNT_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_D3_INT_LB_BYTE_CNT_MASK (0x3FFU)
#define IOMUXC_GPR_GPR_CSI2_2_D3_INT_LB_BYTE_CNT_SHIFT (0U)
#define IOMUXC_GPR_GPR_CSI2_2_D3_INT_LB_BYTE_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_D3_INT_LB_BYTE_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_D3_INT_LB_BYTE_CNT_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_ECC_TWO_BIT_ERROR_MASK (0x1U)
#define IOMUXC_GPR_GPR_CSI2_2_ECC_TWO_BIT_ERROR_SHIFT (0U)
#define IOMUXC_GPR_GPR_CSI2_2_ECC_TWO_BIT_ERROR(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_ECC_TWO_BIT_ERROR_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_ECC_TWO_BIT_ERROR_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_RX_RCAL_MASK       (0x3U)
#define IOMUXC_GPR_GPR_CSI2_2_RX_RCAL_SHIFT      (0U)
#define IOMUXC_GPR_GPR_CSI2_2_RX_RCAL(x)         (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_RX_RCAL_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_RX_RCAL_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_TEST_PATTERN_MASK  (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR_CSI2_2_TEST_PATTERN_SHIFT (0U)
#define IOMUXC_GPR_GPR_CSI2_2_TEST_PATTERN(x)    (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_TEST_PATTERN_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_TEST_PATTERN_MASK)

#define IOMUXC_GPR_GPR_DSI_D0_INT_LB_BYTE_CNT_MASK (0x3FFU)
#define IOMUXC_GPR_GPR_DSI_D0_INT_LB_BYTE_CNT_SHIFT (0U)
#define IOMUXC_GPR_GPR_DSI_D0_INT_LB_BYTE_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_D0_INT_LB_BYTE_CNT_SHIFT)) & IOMUXC_GPR_GPR_DSI_D0_INT_LB_BYTE_CNT_MASK)

#define IOMUXC_GPR_GPR_DSI_D1_INT_LB_BYTE_CNT_MASK (0x3FFU)
#define IOMUXC_GPR_GPR_DSI_D1_INT_LB_BYTE_CNT_SHIFT (0U)
#define IOMUXC_GPR_GPR_DSI_D1_INT_LB_BYTE_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_D1_INT_LB_BYTE_CNT_SHIFT)) & IOMUXC_GPR_GPR_DSI_D1_INT_LB_BYTE_CNT_MASK)

#define IOMUXC_GPR_GPR_DSI_D2_INT_LB_BYTE_CNT_MASK (0x3FFU)
#define IOMUXC_GPR_GPR_DSI_D2_INT_LB_BYTE_CNT_SHIFT (0U)
#define IOMUXC_GPR_GPR_DSI_D2_INT_LB_BYTE_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_D2_INT_LB_BYTE_CNT_SHIFT)) & IOMUXC_GPR_GPR_DSI_D2_INT_LB_BYTE_CNT_MASK)

#define IOMUXC_GPR_GPR_DSI_D3_INT_LB_BYTE_CNT_MASK (0x3FFU)
#define IOMUXC_GPR_GPR_DSI_D3_INT_LB_BYTE_CNT_SHIFT (0U)
#define IOMUXC_GPR_GPR_DSI_D3_INT_LB_BYTE_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_D3_INT_LB_BYTE_CNT_SHIFT)) & IOMUXC_GPR_GPR_DSI_D3_INT_LB_BYTE_CNT_MASK)

#define IOMUXC_GPR_GPR_DSI_RX_RCAL_MASK          (0x3U)
#define IOMUXC_GPR_GPR_DSI_RX_RCAL_SHIFT         (0U)
#define IOMUXC_GPR_GPR_DSI_RX_RCAL(x)            (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_RX_RCAL_SHIFT)) & IOMUXC_GPR_GPR_DSI_RX_RCAL_MASK)

#define IOMUXC_GPR_GPR_DSI_TEST_PATTERN_MASK     (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR_DSI_TEST_PATTERN_SHIFT    (0U)
#define IOMUXC_GPR_GPR_DSI_TEST_PATTERN(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_TEST_PATTERN_SHIFT)) & IOMUXC_GPR_GPR_DSI_TEST_PATTERN_MASK)

#define IOMUXC_GPR_GPR_DSI_TWO_BIT_ERR_MASK      (0x1U)
#define IOMUXC_GPR_GPR_DSI_TWO_BIT_ERR_SHIFT     (0U)
#define IOMUXC_GPR_GPR_DSI_TWO_BIT_ERR(x)        (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_TWO_BIT_ERR_SHIFT)) & IOMUXC_GPR_GPR_DSI_TWO_BIT_ERR_MASK)

#define IOMUXC_GPR_GPR_DSI_UI_STATUS0_RO_MASK    (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR_DSI_UI_STATUS0_RO_SHIFT   (0U)
#define IOMUXC_GPR_GPR_DSI_UI_STATUS0_RO(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_UI_STATUS0_RO_SHIFT)) & IOMUXC_GPR_GPR_DSI_UI_STATUS0_RO_MASK)

#define IOMUXC_GPR_GPR_DSI_UI_STATUS1_RO_MASK    (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR_DSI_UI_STATUS1_RO_SHIFT   (0U)
#define IOMUXC_GPR_GPR_DSI_UI_STATUS1_RO(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_UI_STATUS1_RO_SHIFT)) & IOMUXC_GPR_GPR_DSI_UI_STATUS1_RO_MASK)

#define IOMUXC_GPR_GPR_DSI_UI_STATUS2_RO_MASK    (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR_DSI_UI_STATUS2_RO_SHIFT   (0U)
#define IOMUXC_GPR_GPR_DSI_UI_STATUS2_RO(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_UI_STATUS2_RO_SHIFT)) & IOMUXC_GPR_GPR_DSI_UI_STATUS2_RO_MASK)

#define IOMUXC_GPR_GPR_DSI_UI_STATUS3_RO_MASK    (0x3FFFFFFFU)
#define IOMUXC_GPR_GPR_DSI_UI_STATUS3_RO_SHIFT   (0U)
#define IOMUXC_GPR_GPR_DSI_UI_STATUS3_RO(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_UI_STATUS3_RO_SHIFT)) & IOMUXC_GPR_GPR_DSI_UI_STATUS3_RO_MASK)

#define IOMUXC_GPR_GPR_GPR_SAI1_EXT_MCLK_EN_MASK (0x1U)
#define IOMUXC_GPR_GPR_GPR_SAI1_EXT_MCLK_EN_SHIFT (0U)
#define IOMUXC_GPR_GPR_GPR_SAI1_EXT_MCLK_EN(x)   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_GPR_SAI1_EXT_MCLK_EN_SHIFT)) & IOMUXC_GPR_GPR_GPR_SAI1_EXT_MCLK_EN_MASK)

#define IOMUXC_GPR_GPR_HDMI_HPD_PD_MASK          (0x1U)
#define IOMUXC_GPR_GPR_HDMI_HPD_PD_SHIFT         (0U)
#define IOMUXC_GPR_GPR_HDMI_HPD_PD(x)            (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_HDMI_HPD_PD_SHIFT)) & IOMUXC_GPR_GPR_HDMI_HPD_PD_MASK)

#define IOMUXC_GPR_GPR_OCRAM_TZ_EN_MASK          (0x1U)
#define IOMUXC_GPR_GPR_OCRAM_TZ_EN_SHIFT         (0U)
/*! OCRAM_TZ_EN
 *  0b0..The TrustZone feature is disabled. Entire OCRAM space is available for all access types (secure/non-secure/user/supervisor).
 *  0b1..The TrustZone feature is enabled. Access to address in the range specified by [ENDADDR:STARTADDR] follows
 *       the execution mode access policy described in CSU chapter.
 */
#define IOMUXC_GPR_GPR_OCRAM_TZ_EN(x)            (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_OCRAM_TZ_EN_SHIFT)) & IOMUXC_GPR_GPR_OCRAM_TZ_EN_MASK)

#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_SWING_LOW_MASK (0x7FU)
#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_SWING_LOW_SHIFT (0U)
#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_SWING_LOW(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_PCS_TX_SWING_LOW_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_PCS_TX_SWING_LOW_MASK)

#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_SWING_LOW_MASK (0x7FU)
#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_SWING_LOW_SHIFT (0U)
#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_SWING_LOW(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_PCS_TX_SWING_LOW_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_PCS_TX_SWING_LOW_MASK)

#define IOMUXC_GPR_GPR_PCIE_DIAG_STATUS_MASK     (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR_PCIE_DIAG_STATUS_SHIFT    (0U)
#define IOMUXC_GPR_GPR_PCIE_DIAG_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE_DIAG_STATUS_SHIFT)) & IOMUXC_GPR_GPR_PCIE_DIAG_STATUS_MASK)

#define IOMUXC_GPR_GPR_RDATA_WAIT_EN_MASK        (0x1U)
#define IOMUXC_GPR_GPR_RDATA_WAIT_EN_SHIFT       (0U)
/*! RDATA_WAIT_EN
 *  0b0..read data wait state disabled
 *  0b1..read data wait state enabled
 */
#define IOMUXC_GPR_GPR_RDATA_WAIT_EN(x)          (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_RDATA_WAIT_EN_SHIFT)) & IOMUXC_GPR_GPR_RDATA_WAIT_EN_MASK)

#define IOMUXC_GPR_GPR_SDMA1_IPG_STOP_MASK       (0x1U)
#define IOMUXC_GPR_GPR_SDMA1_IPG_STOP_SHIFT      (0U)
/*! SDMA1_IPG_STOP
 *  0b0..stop request off
 *  0b1..stop request on
 */
#define IOMUXC_GPR_GPR_SDMA1_IPG_STOP(x)         (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_SDMA1_IPG_STOP_SHIFT)) & IOMUXC_GPR_GPR_SDMA1_IPG_STOP_MASK)

#define IOMUXC_GPR_GPR_TZASC_EN_MASK             (0x1U)
#define IOMUXC_GPR_GPR_TZASC_EN_SHIFT            (0U)
#define IOMUXC_GPR_GPR_TZASC_EN(x)               (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_TZASC_EN_SHIFT)) & IOMUXC_GPR_GPR_TZASC_EN_MASK)

#define IOMUXC_GPR_GPR_AWCACHE_USDHC_MASK        (0x2U)
#define IOMUXC_GPR_GPR_AWCACHE_USDHC_SHIFT       (1U)
/*! AWCACHE_USDHC
 *  0b0..Drive USDHC AXI Master AWCACHE[1] to 0
 *  0b1..Drive USDHC AXI Master AWCACHE[1] to 1
 */
#define IOMUXC_GPR_GPR_AWCACHE_USDHC(x)          (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_AWCACHE_USDHC_SHIFT)) & IOMUXC_GPR_GPR_AWCACHE_USDHC_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_ECC_ONE_BIT_ERR_POS_MASK (0x3EU)
#define IOMUXC_GPR_GPR_CSI2_1_ECC_ONE_BIT_ERR_POS_SHIFT (1U)
#define IOMUXC_GPR_GPR_CSI2_1_ECC_ONE_BIT_ERR_POS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_ECC_ONE_BIT_ERR_POS_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_ECC_ONE_BIT_ERR_POS_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_ECC_ONE_BIT_ERR_POS_MASK (0x3EU)
#define IOMUXC_GPR_GPR_CSI2_2_ECC_ONE_BIT_ERR_POS_SHIFT (1U)
#define IOMUXC_GPR_GPR_CSI2_2_ECC_ONE_BIT_ERR_POS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_ECC_ONE_BIT_ERR_POS_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_ECC_ONE_BIT_ERR_POS_MASK)

#define IOMUXC_GPR_GPR_DSI_ECC_ONE_BIT_ERR_POS_MASK (0x3EU)
#define IOMUXC_GPR_GPR_DSI_ECC_ONE_BIT_ERR_POS_SHIFT (1U)
#define IOMUXC_GPR_GPR_DSI_ECC_ONE_BIT_ERR_POS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_ECC_ONE_BIT_ERR_POS_SHIFT)) & IOMUXC_GPR_GPR_DSI_ECC_ONE_BIT_ERR_POS_MASK)

#define IOMUXC_GPR_GPR_ENET1_IPD_REQ_TIMER_SEL0_MASK (0x2U)
#define IOMUXC_GPR_GPR_ENET1_IPD_REQ_TIMER_SEL0_SHIFT (1U)
/*! ENET1_IPD_REQ_TIMER_SEL0
 *  0b0..Select ipd_req_mac0_timer2 to SDMA IRQ 45
 *  0b1..Select ipd_req_mac0_timer0 to SDMA IRQ 45
 */
#define IOMUXC_GPR_GPR_ENET1_IPD_REQ_TIMER_SEL0(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_ENET1_IPD_REQ_TIMER_SEL0_SHIFT)) & IOMUXC_GPR_GPR_ENET1_IPD_REQ_TIMER_SEL0_MASK)

#define IOMUXC_GPR_GPR_GPR_SAI2_EXT_MCLK_EN_MASK (0x2U)
#define IOMUXC_GPR_GPR_GPR_SAI2_EXT_MCLK_EN_SHIFT (1U)
#define IOMUXC_GPR_GPR_GPR_SAI2_EXT_MCLK_EN(x)   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_GPR_SAI2_EXT_MCLK_EN_SHIFT)) & IOMUXC_GPR_GPR_GPR_SAI2_EXT_MCLK_EN_MASK)

#define IOMUXC_GPR_GPR_HDMI_DDC_SDA_PD_MASK      (0x2U)
#define IOMUXC_GPR_GPR_HDMI_DDC_SDA_PD_SHIFT     (1U)
#define IOMUXC_GPR_GPR_HDMI_DDC_SDA_PD(x)        (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_HDMI_DDC_SDA_PD_SHIFT)) & IOMUXC_GPR_GPR_HDMI_DDC_SDA_PD_MASK)

#define IOMUXC_GPR_GPR_OCRAM_TZ_ADDR_MASK        (0x3EU)
#define IOMUXC_GPR_GPR_OCRAM_TZ_ADDR_SHIFT       (1U)
#define IOMUXC_GPR_GPR_OCRAM_TZ_ADDR(x)          (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_OCRAM_TZ_ADDR_SHIFT)) & IOMUXC_GPR_GPR_OCRAM_TZ_ADDR_MASK)

#define IOMUXC_GPR_GPR_RADDR_PIPE_EN_MASK        (0x2U)
#define IOMUXC_GPR_GPR_RADDR_PIPE_EN_SHIFT       (1U)
/*! RADDR_PIPE_EN
 *  0b0..read address pipeline is disabled
 *  0b1..read address pipeline is enabled
 */
#define IOMUXC_GPR_GPR_RADDR_PIPE_EN(x)          (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_RADDR_PIPE_EN_SHIFT)) & IOMUXC_GPR_GPR_RADDR_PIPE_EN_MASK)

#define IOMUXC_GPR_GPR_TZASC_ID_SWAP_BYPASS_MASK (0x2U)
#define IOMUXC_GPR_GPR_TZASC_ID_SWAP_BYPASS_SHIFT (1U)
#define IOMUXC_GPR_GPR_TZASC_ID_SWAP_BYPASS(x)   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_TZASC_ID_SWAP_BYPASS_SHIFT)) & IOMUXC_GPR_GPR_TZASC_ID_SWAP_BYPASS_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_S_PRG_RXHS_SETTLE_MASK (0xFCU)
#define IOMUXC_GPR_GPR_CSI2_1_S_PRG_RXHS_SETTLE_SHIFT (2U)
#define IOMUXC_GPR_GPR_CSI2_1_S_PRG_RXHS_SETTLE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_S_PRG_RXHS_SETTLE_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_S_PRG_RXHS_SETTLE_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_S_PRG_RXHS_SETTLE_MASK (0xFCU)
#define IOMUXC_GPR_GPR_CSI2_2_S_PRG_RXHS_SETTLE_SHIFT (2U)
#define IOMUXC_GPR_GPR_CSI2_2_S_PRG_RXHS_SETTLE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_S_PRG_RXHS_SETTLE_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_S_PRG_RXHS_SETTLE_MASK)

#define IOMUXC_GPR_GPR_DSI_RTERM_SEL_MASK        (0x4U)
#define IOMUXC_GPR_GPR_DSI_RTERM_SEL_SHIFT       (2U)
#define IOMUXC_GPR_GPR_DSI_RTERM_SEL(x)          (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_RTERM_SEL_SHIFT)) & IOMUXC_GPR_GPR_DSI_RTERM_SEL_MASK)

#define IOMUXC_GPR_GPR_ENET1_IPD_REQ_TIMER_SEL1_MASK (0x4U)
#define IOMUXC_GPR_GPR_ENET1_IPD_REQ_TIMER_SEL1_SHIFT (2U)
/*! ENET1_IPD_REQ_TIMER_SEL1
 *  0b0..Select ipd_req_mac0_timer3 to SDMA IRQ 47
 *  0b1..Select ipd_req_mac0_timer1 to SDMA IRQ 47
 */
#define IOMUXC_GPR_GPR_ENET1_IPD_REQ_TIMER_SEL1(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_ENET1_IPD_REQ_TIMER_SEL1_SHIFT)) & IOMUXC_GPR_GPR_ENET1_IPD_REQ_TIMER_SEL1_MASK)

#define IOMUXC_GPR_GPR_GPR_SAI3_EXT_MCLK_EN_MASK (0x4U)
#define IOMUXC_GPR_GPR_GPR_SAI3_EXT_MCLK_EN_SHIFT (2U)
#define IOMUXC_GPR_GPR_GPR_SAI3_EXT_MCLK_EN(x)   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_GPR_SAI3_EXT_MCLK_EN_SHIFT)) & IOMUXC_GPR_GPR_GPR_SAI3_EXT_MCLK_EN_MASK)

#define IOMUXC_GPR_GPR_HDMI_DDC_SCL_PD_MASK      (0x4U)
#define IOMUXC_GPR_GPR_HDMI_DDC_SCL_PD_SHIFT     (2U)
#define IOMUXC_GPR_GPR_HDMI_DDC_SCL_PD(x)        (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_HDMI_DDC_SCL_PD_SHIFT)) & IOMUXC_GPR_GPR_HDMI_DDC_SCL_PD_MASK)

#define IOMUXC_GPR_GPR_MIPI_MUX_SEL_MASK         (0x4U)
#define IOMUXC_GPR_GPR_MIPI_MUX_SEL_SHIFT        (2U)
#define IOMUXC_GPR_GPR_MIPI_MUX_SEL(x)           (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_MIPI_MUX_SEL_SHIFT)) & IOMUXC_GPR_GPR_MIPI_MUX_SEL_MASK)

#define IOMUXC_GPR_GPR_SEC_ERR_RESP_EN_MASK      (0x4U)
#define IOMUXC_GPR_GPR_SEC_ERR_RESP_EN_SHIFT     (2U)
/*! SEC_ERR_RESP_EN
 *  0b0..OKAY response
 *  0b1..SLVERR response
 */
#define IOMUXC_GPR_GPR_SEC_ERR_RESP_EN(x)        (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_SEC_ERR_RESP_EN_SHIFT)) & IOMUXC_GPR_GPR_SEC_ERR_RESP_EN_MASK)

#define IOMUXC_GPR_GPR_WDATA_PIPE_EN_MASK        (0x4U)
#define IOMUXC_GPR_GPR_WDATA_PIPE_EN_SHIFT       (2U)
/*! WDATA_PIPE_EN
 *  0b0..write data pipeline is disabled
 *  0b1..write data pipeline is enabled
 */
#define IOMUXC_GPR_GPR_WDATA_PIPE_EN(x)          (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_WDATA_PIPE_EN_SHIFT)) & IOMUXC_GPR_GPR_WDATA_PIPE_EN_MASK)

#define IOMUXC_GPR_GPR_DSI_RCALT_MASK            (0x18U)
#define IOMUXC_GPR_GPR_DSI_RCALT_SHIFT           (3U)
#define IOMUXC_GPR_GPR_DSI_RCALT(x)              (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_RCALT_SHIFT)) & IOMUXC_GPR_GPR_DSI_RCALT_MASK)

#define IOMUXC_GPR_GPR_ENET1_IPG_STOP_MASK       (0x8U)
#define IOMUXC_GPR_GPR_ENET1_IPG_STOP_SHIFT      (3U)
/*! ENET1_IPG_STOP
 *  0b0..stop request off
 *  0b1..stop request on
 */
#define IOMUXC_GPR_GPR_ENET1_IPG_STOP(x)         (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_ENET1_IPG_STOP_SHIFT)) & IOMUXC_GPR_GPR_ENET1_IPG_STOP_MASK)

#define IOMUXC_GPR_GPR_EXC_ERR_RESP_EN_MASK      (0x8U)
#define IOMUXC_GPR_GPR_EXC_ERR_RESP_EN_SHIFT     (3U)
/*! EXC_ERR_RESP_EN
 *  0b0..OK response on the AXI for an exclusive access error
 *  0b1..ERR response on the AXI for an exclusive access error
 */
#define IOMUXC_GPR_GPR_EXC_ERR_RESP_EN(x)        (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_EXC_ERR_RESP_EN_SHIFT)) & IOMUXC_GPR_GPR_EXC_ERR_RESP_EN_MASK)

#define IOMUXC_GPR_GPR_GPR_SAI4_EXT_MCLK_EN_MASK (0x8U)
#define IOMUXC_GPR_GPR_GPR_SAI4_EXT_MCLK_EN_SHIFT (3U)
#define IOMUXC_GPR_GPR_GPR_SAI4_EXT_MCLK_EN(x)   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_GPR_SAI4_EXT_MCLK_EN_SHIFT)) & IOMUXC_GPR_GPR_GPR_SAI4_EXT_MCLK_EN_MASK)

#define IOMUXC_GPR_GPR_HDMI_CEC_PD_MASK          (0x8U)
#define IOMUXC_GPR_GPR_HDMI_CEC_PD_SHIFT         (3U)
#define IOMUXC_GPR_GPR_HDMI_CEC_PD(x)            (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_HDMI_CEC_PD_SHIFT)) & IOMUXC_GPR_GPR_HDMI_CEC_PD_MASK)

#define IOMUXC_GPR_GPR_MIPI_MUX_INV_MASK         (0x8U)
#define IOMUXC_GPR_GPR_MIPI_MUX_INV_SHIFT        (3U)
#define IOMUXC_GPR_GPR_MIPI_MUX_INV(x)           (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_MIPI_MUX_INV_SHIFT)) & IOMUXC_GPR_GPR_MIPI_MUX_INV_MASK)

#define IOMUXC_GPR_GPR_WADDR_PIPE_EN_MASK        (0x8U)
#define IOMUXC_GPR_GPR_WADDR_PIPE_EN_SHIFT       (3U)
/*! WADDR_PIPE_EN
 *  0b0..write address pipeline is disabled
 *  0b1..write address pipeline is enabled
 */
#define IOMUXC_GPR_GPR_WADDR_PIPE_EN(x)          (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_WADDR_PIPE_EN_SHIFT)) & IOMUXC_GPR_GPR_WADDR_PIPE_EN_MASK)

#define IOMUXC_GPR_GPR_ARCACHE_PCIE1_MASK        (0x10U)
#define IOMUXC_GPR_GPR_ARCACHE_PCIE1_SHIFT       (4U)
/*! ARCACHE_PCIE1
 *  0b0..Drive PCIe AXI Master Port ARCACHE[1] to 0
 *  0b1..Drive PCIe AXI Master Port ARCACHE[1] to 1
 */
#define IOMUXC_GPR_GPR_ARCACHE_PCIE1(x)          (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_ARCACHE_PCIE1_SHIFT)) & IOMUXC_GPR_GPR_ARCACHE_PCIE1_MASK)

#define IOMUXC_GPR_GPR_GPR_SAI5_EXT_MCLK_EN_MASK (0x10U)
#define IOMUXC_GPR_GPR_GPR_SAI5_EXT_MCLK_EN_SHIFT (4U)
#define IOMUXC_GPR_GPR_GPR_SAI5_EXT_MCLK_EN(x)   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_GPR_SAI5_EXT_MCLK_EN_SHIFT)) & IOMUXC_GPR_GPR_GPR_SAI5_EXT_MCLK_EN_MASK)

#define IOMUXC_GPR_GPR_SDMA2_IPG_STOP_MASK       (0x10U)
#define IOMUXC_GPR_GPR_SDMA2_IPG_STOP_SHIFT      (4U)
/*! SDMA2_IPG_STOP
 *  0b0..stop request off
 *  0b1..stop request on
 */
#define IOMUXC_GPR_GPR_SDMA2_IPG_STOP(x)         (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_SDMA2_IPG_STOP_SHIFT)) & IOMUXC_GPR_GPR_SDMA2_IPG_STOP_MASK)

#define IOMUXC_GPR_GPR_S_RDATA_WAIT_EN_MASK      (0x10U)
#define IOMUXC_GPR_GPR_S_RDATA_WAIT_EN_SHIFT     (4U)
#define IOMUXC_GPR_GPR_S_RDATA_WAIT_EN(x)        (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_S_RDATA_WAIT_EN_SHIFT)) & IOMUXC_GPR_GPR_S_RDATA_WAIT_EN_MASK)

#define IOMUXC_GPR_GPR_AWCACHE_PCIE1_MASK        (0x20U)
#define IOMUXC_GPR_GPR_AWCACHE_PCIE1_SHIFT       (5U)
/*! AWCACHE_PCIE1
 *  0b0..Drive PCIe AXI Master Port AWCACHE[1] to 0
 *  0b1..Drive PCIe AXI Master Port AWCACHE[1] to 1
 */
#define IOMUXC_GPR_GPR_AWCACHE_PCIE1(x)          (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_AWCACHE_PCIE1_SHIFT)) & IOMUXC_GPR_GPR_AWCACHE_PCIE1_MASK)

#define IOMUXC_GPR_GPR_DSI_NOCAL_MASK            (0x20U)
#define IOMUXC_GPR_GPR_DSI_NOCAL_SHIFT           (5U)
#define IOMUXC_GPR_GPR_DSI_NOCAL(x)              (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_NOCAL_SHIFT)) & IOMUXC_GPR_GPR_DSI_NOCAL_MASK)

#define IOMUXC_GPR_GPR_GPR_SAI6_EXT_MCLK_EN_MASK (0x20U)
#define IOMUXC_GPR_GPR_GPR_SAI6_EXT_MCLK_EN_SHIFT (5U)
#define IOMUXC_GPR_GPR_GPR_SAI6_EXT_MCLK_EN(x)   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_GPR_SAI6_EXT_MCLK_EN_SHIFT)) & IOMUXC_GPR_GPR_GPR_SAI6_EXT_MCLK_EN_MASK)

#define IOMUXC_GPR_GPR_S_RADDR_PIPE_EN_MASK      (0x20U)
#define IOMUXC_GPR_GPR_S_RADDR_PIPE_EN_SHIFT     (5U)
#define IOMUXC_GPR_GPR_S_RADDR_PIPE_EN(x)        (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_S_RADDR_PIPE_EN_SHIFT)) & IOMUXC_GPR_GPR_S_RADDR_PIPE_EN_MASK)

#define IOMUXC_GPR_GPR_ARCACHE_LCDIF_MASK        (0x40U)
#define IOMUXC_GPR_GPR_ARCACHE_LCDIF_SHIFT       (6U)
/*! ARCACHE_LCDIF
 *  0b0..Drive LCDIF AXI Master Port ARCACHE[1] to 0
 *  0b1..Drive LCDIF AXI Master Port ARCACHE[1] to 1
 */
#define IOMUXC_GPR_GPR_ARCACHE_LCDIF(x)          (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_ARCACHE_LCDIF_SHIFT)) & IOMUXC_GPR_GPR_ARCACHE_LCDIF_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_ECC_ONE_BIT_ERROR_MASK (0x40U)
#define IOMUXC_GPR_GPR_CSI2_1_ECC_ONE_BIT_ERROR_SHIFT (6U)
#define IOMUXC_GPR_GPR_CSI2_1_ECC_ONE_BIT_ERROR(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_ECC_ONE_BIT_ERROR_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_ECC_ONE_BIT_ERROR_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_ECC_ONE_BIT_ERROR_MASK (0x40U)
#define IOMUXC_GPR_GPR_CSI2_2_ECC_ONE_BIT_ERROR_SHIFT (6U)
#define IOMUXC_GPR_GPR_CSI2_2_ECC_ONE_BIT_ERROR(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_ECC_ONE_BIT_ERROR_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_ECC_ONE_BIT_ERROR_MASK)

#define IOMUXC_GPR_GPR_DSI_ECC_ONE_BIT_ERR_MASK  (0x40U)
#define IOMUXC_GPR_GPR_DSI_ECC_ONE_BIT_ERR_SHIFT (6U)
#define IOMUXC_GPR_GPR_DSI_ECC_ONE_BIT_ERR(x)    (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_ECC_ONE_BIT_ERR_SHIFT)) & IOMUXC_GPR_GPR_DSI_ECC_ONE_BIT_ERR_MASK)

#define IOMUXC_GPR_GPR_DSI_HSEL_MASK             (0x40U)
#define IOMUXC_GPR_GPR_DSI_HSEL_SHIFT            (6U)
#define IOMUXC_GPR_GPR_DSI_HSEL(x)               (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_HSEL_SHIFT)) & IOMUXC_GPR_GPR_DSI_HSEL_MASK)

#define IOMUXC_GPR_GPR_S_WDATA_PIPE_EN_MASK      (0x40U)
#define IOMUXC_GPR_GPR_S_WDATA_PIPE_EN_SHIFT     (6U)
#define IOMUXC_GPR_GPR_S_WDATA_PIPE_EN(x)        (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_S_WDATA_PIPE_EN_SHIFT)) & IOMUXC_GPR_GPR_S_WDATA_PIPE_EN_MASK)

#define IOMUXC_GPR_GPR_WDOG1_MASK_MASK           (0x40U)
#define IOMUXC_GPR_GPR_WDOG1_MASK_SHIFT          (6U)
/*! WDOG1_MASK
 *  0b0..WDOG1 Timeout behaves normally
 *  0b1..WDOG1 Timeout is masked
 */
#define IOMUXC_GPR_GPR_WDOG1_MASK(x)             (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_WDOG1_MASK_SHIFT)) & IOMUXC_GPR_GPR_WDOG1_MASK_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_ECC_ERR_POS_MASK   (0x380U)
#define IOMUXC_GPR_GPR_CSI2_1_ECC_ERR_POS_SHIFT  (7U)
#define IOMUXC_GPR_GPR_CSI2_1_ECC_ERR_POS(x)     (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_ECC_ERR_POS_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_ECC_ERR_POS_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_ECC_ERR_POS_MASK   (0x380U)
#define IOMUXC_GPR_GPR_CSI2_2_ECC_ERR_POS_SHIFT  (7U)
#define IOMUXC_GPR_GPR_CSI2_2_ECC_ERR_POS(x)     (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_ECC_ERR_POS_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_ECC_ERR_POS_MASK)

#define IOMUXC_GPR_GPR_DSI_ECC_ERR_POS_MASK      (0x380U)
#define IOMUXC_GPR_GPR_DSI_ECC_ERR_POS_SHIFT     (7U)
#define IOMUXC_GPR_GPR_DSI_ECC_ERR_POS(x)        (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_ECC_ERR_POS_SHIFT)) & IOMUXC_GPR_GPR_DSI_ECC_ERR_POS_MASK)

#define IOMUXC_GPR_GPR_DSI_TX_ULPS_ENABLE_MASK   (0xF80U)
#define IOMUXC_GPR_GPR_DSI_TX_ULPS_ENABLE_SHIFT  (7U)
#define IOMUXC_GPR_GPR_DSI_TX_ULPS_ENABLE(x)     (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_TX_ULPS_ENABLE_SHIFT)) & IOMUXC_GPR_GPR_DSI_TX_ULPS_ENABLE_MASK)

#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_SWING_FULL_MASK (0x3F80U)
#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_SWING_FULL_SHIFT (7U)
#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_SWING_FULL(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_PCS_TX_SWING_FULL_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_PCS_TX_SWING_FULL_MASK)

#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_SWING_FULL_MASK (0x3F80U)
#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_SWING_FULL_SHIFT (7U)
#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_SWING_FULL(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_PCS_TX_SWING_FULL_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_PCS_TX_SWING_FULL_MASK)

#define IOMUXC_GPR_GPR_S_WADDR_PIPE_EN_MASK      (0x80U)
#define IOMUXC_GPR_GPR_S_WADDR_PIPE_EN_SHIFT     (7U)
#define IOMUXC_GPR_GPR_S_WADDR_PIPE_EN(x)        (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_S_WADDR_PIPE_EN_SHIFT)) & IOMUXC_GPR_GPR_S_WADDR_PIPE_EN_MASK)

#define IOMUXC_GPR_GPR_WDOG2_MASK_MASK           (0x80U)
#define IOMUXC_GPR_GPR_WDOG2_MASK_SHIFT          (7U)
/*! WDOG2_MASK
 *  0b0..WDOG2 Timeout behaves normally
 *  0b1..WDOG2 Timeout is masked
 */
#define IOMUXC_GPR_GPR_WDOG2_MASK(x)             (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_WDOG2_MASK_SHIFT)) & IOMUXC_GPR_GPR_WDOG2_MASK_MASK)

#define IOMUXC_GPR_GPR_ARCACHE_PCIE2_EN_MASK     (0x100U)
#define IOMUXC_GPR_GPR_ARCACHE_PCIE2_EN_SHIFT    (8U)
/*! ARCACHE_PCIE2_EN
 *  0b0..PCIE Primary AXI Master Port ARCACHE[1] driven by PCIE
 *  0b1..PCIE Primary AXI Master Port ARCACHE[1] driven to constant value specified by the ARCACHE_PCIE2 bit
 */
#define IOMUXC_GPR_GPR_ARCACHE_PCIE2_EN(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_ARCACHE_PCIE2_EN_SHIFT)) & IOMUXC_GPR_GPR_ARCACHE_PCIE2_EN_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_CONT_CLK_MODE_MASK (0x100U)
#define IOMUXC_GPR_GPR_CSI2_1_CONT_CLK_MODE_SHIFT (8U)
#define IOMUXC_GPR_GPR_CSI2_1_CONT_CLK_MODE(x)   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_CONT_CLK_MODE_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_CONT_CLK_MODE_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_CONT_CLK_MODE_MASK (0x100U)
#define IOMUXC_GPR_GPR_CSI2_2_CONT_CLK_MODE_SHIFT (8U)
#define IOMUXC_GPR_GPR_CSI2_2_CONT_CLK_MODE(x)   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_CONT_CLK_MODE_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_CONT_CLK_MODE_MASK)

#define IOMUXC_GPR_GPR_PCIE1_APP_CLK_PM_EN_MASK  (0x100U)
#define IOMUXC_GPR_GPR_PCIE1_APP_CLK_PM_EN_SHIFT (8U)
#define IOMUXC_GPR_GPR_PCIE1_APP_CLK_PM_EN(x)    (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_APP_CLK_PM_EN_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_APP_CLK_PM_EN_MASK)

#define IOMUXC_GPR_GPR_PCIE2_APP_CLK_PM_EN_MASK  (0x100U)
#define IOMUXC_GPR_GPR_PCIE2_APP_CLK_PM_EN_SHIFT (8U)
#define IOMUXC_GPR_GPR_PCIE2_APP_CLK_PM_EN(x)    (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_APP_CLK_PM_EN_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_APP_CLK_PM_EN_MASK)

#define IOMUXC_GPR_GPR_PCIE2_CTRL_DEVICE_TYPE_MASK (0xF00U)
#define IOMUXC_GPR_GPR_PCIE2_CTRL_DEVICE_TYPE_SHIFT (8U)
/*! PCIE2_CTRL_DEVICE_TYPE
 *  0b0000..PCI Express endpoint
 *  0b0001..Legacy PCI Express endpoint
 *  0b0100..Root port of PCI Express root complex
 */
#define IOMUXC_GPR_GPR_PCIE2_CTRL_DEVICE_TYPE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_CTRL_DEVICE_TYPE_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_CTRL_DEVICE_TYPE_MASK)

#define IOMUXC_GPR_GPR_AWCACHE_PCIE2_EN_MASK     (0x200U)
#define IOMUXC_GPR_GPR_AWCACHE_PCIE2_EN_SHIFT    (9U)
/*! AWCACHE_PCIE2_EN
 *  0b0..PCIE Primary AXI Master Port AWCACHE[1] driven by PCIE
 *  0b1..PXP Primary AXI Master Port AWCACHE[1] driven to constant value specified by the AWCACHE_PCIE2 bit
 */
#define IOMUXC_GPR_GPR_AWCACHE_PCIE2_EN(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_AWCACHE_PCIE2_EN_SHIFT)) & IOMUXC_GPR_GPR_AWCACHE_PCIE2_EN_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_AUTO_PD_EN_MASK    (0x200U)
#define IOMUXC_GPR_GPR_CSI2_1_AUTO_PD_EN_SHIFT   (9U)
#define IOMUXC_GPR_GPR_CSI2_1_AUTO_PD_EN(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_AUTO_PD_EN_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_AUTO_PD_EN_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_AUTO_PD_EN_MASK    (0x200U)
#define IOMUXC_GPR_GPR_CSI2_2_AUTO_PD_EN_SHIFT   (9U)
#define IOMUXC_GPR_GPR_CSI2_2_AUTO_PD_EN(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_AUTO_PD_EN_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_AUTO_PD_EN_MASK)

#define IOMUXC_GPR_GPR_PCIE1_REF_USE_PAD_MASK    (0x200U)
#define IOMUXC_GPR_GPR_PCIE1_REF_USE_PAD_SHIFT   (9U)
#define IOMUXC_GPR_GPR_PCIE1_REF_USE_PAD(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_REF_USE_PAD_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_REF_USE_PAD_MASK)

#define IOMUXC_GPR_GPR_PCIE2_REF_USE_PAD_MASK    (0x200U)
#define IOMUXC_GPR_GPR_PCIE2_REF_USE_PAD_SHIFT   (9U)
#define IOMUXC_GPR_GPR_PCIE2_REF_USE_PAD(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_REF_USE_PAD_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_REF_USE_PAD_MASK)

#define IOMUXC_GPR_GPR_ARCACHE_PCIE1_EN_MASK     (0x400U)
#define IOMUXC_GPR_GPR_ARCACHE_PCIE1_EN_SHIFT    (10U)
/*! ARCACHE_PCIE1_EN
 *  0b0..PCIe AXI Master Port ARCACHE[1] driven by PCIe
 *  0b1..PCIe AXI Master Port ARCACHE[1] driven to constant value specified by the ARCACHE_PXP1 bit
 */
#define IOMUXC_GPR_GPR_ARCACHE_PCIE1_EN(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_ARCACHE_PCIE1_EN_SHIFT)) & IOMUXC_GPR_GPR_ARCACHE_PCIE1_EN_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_D0_INT_LB_ERR_CNT_MASK (0xFFC00U)
#define IOMUXC_GPR_GPR_CSI2_1_D0_INT_LB_ERR_CNT_SHIFT (10U)
#define IOMUXC_GPR_GPR_CSI2_1_D0_INT_LB_ERR_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_D0_INT_LB_ERR_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_D0_INT_LB_ERR_CNT_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_D1_INT_LB_ERR_CNT_MASK (0xFFC00U)
#define IOMUXC_GPR_GPR_CSI2_1_D1_INT_LB_ERR_CNT_SHIFT (10U)
#define IOMUXC_GPR_GPR_CSI2_1_D1_INT_LB_ERR_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_D1_INT_LB_ERR_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_D1_INT_LB_ERR_CNT_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_D2_INT_LB_ERR_CNT_MASK (0xFFC00U)
#define IOMUXC_GPR_GPR_CSI2_1_D2_INT_LB_ERR_CNT_SHIFT (10U)
#define IOMUXC_GPR_GPR_CSI2_1_D2_INT_LB_ERR_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_D2_INT_LB_ERR_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_D2_INT_LB_ERR_CNT_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_D3_INT_LB_ERR_CNT_MASK (0xFFC00U)
#define IOMUXC_GPR_GPR_CSI2_1_D3_INT_LB_ERR_CNT_SHIFT (10U)
#define IOMUXC_GPR_GPR_CSI2_1_D3_INT_LB_ERR_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_D3_INT_LB_ERR_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_D3_INT_LB_ERR_CNT_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_ECC_ERR_MASK       (0x400U)
#define IOMUXC_GPR_GPR_CSI2_1_ECC_ERR_SHIFT      (10U)
#define IOMUXC_GPR_GPR_CSI2_1_ECC_ERR(x)         (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_ECC_ERR_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_ECC_ERR_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_HSEL_MASK          (0x400U)
#define IOMUXC_GPR_GPR_CSI2_1_HSEL_SHIFT         (10U)
#define IOMUXC_GPR_GPR_CSI2_1_HSEL(x)            (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_HSEL_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_HSEL_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_D0_INT_LB_ERR_CNT_MASK (0xFFC00U)
#define IOMUXC_GPR_GPR_CSI2_2_D0_INT_LB_ERR_CNT_SHIFT (10U)
#define IOMUXC_GPR_GPR_CSI2_2_D0_INT_LB_ERR_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_D0_INT_LB_ERR_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_D0_INT_LB_ERR_CNT_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_D1_INT_LB_ERR_CNT_MASK (0xFFC00U)
#define IOMUXC_GPR_GPR_CSI2_2_D1_INT_LB_ERR_CNT_SHIFT (10U)
#define IOMUXC_GPR_GPR_CSI2_2_D1_INT_LB_ERR_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_D1_INT_LB_ERR_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_D1_INT_LB_ERR_CNT_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_D2_INT_LB_ERR_CNT_MASK (0xFFC00U)
#define IOMUXC_GPR_GPR_CSI2_2_D2_INT_LB_ERR_CNT_SHIFT (10U)
#define IOMUXC_GPR_GPR_CSI2_2_D2_INT_LB_ERR_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_D2_INT_LB_ERR_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_D2_INT_LB_ERR_CNT_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_D3_INT_LB_ERR_CNT_MASK (0xFFC00U)
#define IOMUXC_GPR_GPR_CSI2_2_D3_INT_LB_ERR_CNT_SHIFT (10U)
#define IOMUXC_GPR_GPR_CSI2_2_D3_INT_LB_ERR_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_D3_INT_LB_ERR_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_D3_INT_LB_ERR_CNT_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_ECC_ERR_MASK       (0x400U)
#define IOMUXC_GPR_GPR_CSI2_2_ECC_ERR_SHIFT      (10U)
#define IOMUXC_GPR_GPR_CSI2_2_ECC_ERR(x)         (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_ECC_ERR_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_ECC_ERR_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_HSEL_MASK          (0x400U)
#define IOMUXC_GPR_GPR_CSI2_2_HSEL_SHIFT         (10U)
#define IOMUXC_GPR_GPR_CSI2_2_HSEL(x)            (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_HSEL_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_HSEL_MASK)

#define IOMUXC_GPR_GPR_DSI_D0_INT_LB_ERR_CNT_MASK (0xFFC00U)
#define IOMUXC_GPR_GPR_DSI_D0_INT_LB_ERR_CNT_SHIFT (10U)
#define IOMUXC_GPR_GPR_DSI_D0_INT_LB_ERR_CNT(x)  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_D0_INT_LB_ERR_CNT_SHIFT)) & IOMUXC_GPR_GPR_DSI_D0_INT_LB_ERR_CNT_MASK)

#define IOMUXC_GPR_GPR_DSI_D1_INT_LB_ERR_CNT_MASK (0xFFC00U)
#define IOMUXC_GPR_GPR_DSI_D1_INT_LB_ERR_CNT_SHIFT (10U)
#define IOMUXC_GPR_GPR_DSI_D1_INT_LB_ERR_CNT(x)  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_D1_INT_LB_ERR_CNT_SHIFT)) & IOMUXC_GPR_GPR_DSI_D1_INT_LB_ERR_CNT_MASK)

#define IOMUXC_GPR_GPR_DSI_D2_INT_LB_ERR_CNT_MASK (0xFFC00U)
#define IOMUXC_GPR_GPR_DSI_D2_INT_LB_ERR_CNT_SHIFT (10U)
#define IOMUXC_GPR_GPR_DSI_D2_INT_LB_ERR_CNT(x)  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_D2_INT_LB_ERR_CNT_SHIFT)) & IOMUXC_GPR_GPR_DSI_D2_INT_LB_ERR_CNT_MASK)

#define IOMUXC_GPR_GPR_DSI_D3_INT_LB_ERR_CNT_MASK (0xFFC00U)
#define IOMUXC_GPR_GPR_DSI_D3_INT_LB_ERR_CNT_SHIFT (10U)
#define IOMUXC_GPR_GPR_DSI_D3_INT_LB_ERR_CNT(x)  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_D3_INT_LB_ERR_CNT_SHIFT)) & IOMUXC_GPR_GPR_DSI_D3_INT_LB_ERR_CNT_MASK)

#define IOMUXC_GPR_GPR_DSI_ECC_ERR_MASK          (0x400U)
#define IOMUXC_GPR_GPR_DSI_ECC_ERR_SHIFT         (10U)
#define IOMUXC_GPR_GPR_DSI_ECC_ERR(x)            (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_ECC_ERR_SHIFT)) & IOMUXC_GPR_GPR_DSI_ECC_ERR_MASK)

#define IOMUXC_GPR_GPR_OCRAM_S_TZ_EN_MASK        (0x400U)
#define IOMUXC_GPR_GPR_OCRAM_S_TZ_EN_SHIFT       (10U)
/*! OCRAM_S_TZ_EN
 *  0b0..The TrustZone feature is disabled. Entire State Retention OCRAM space is available for all access types (secure/non-secure/user/supervisor).
 *  0b1..The TrustZone feature is enabled. Access to address in the range specified by [ENDADDR:STARTADDR] follows
 *       the execution mode access policy described in CSU chapter.
 */
#define IOMUXC_GPR_GPR_OCRAM_S_TZ_EN(x)          (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_OCRAM_S_TZ_EN_SHIFT)) & IOMUXC_GPR_GPR_OCRAM_S_TZ_EN_MASK)

#define IOMUXC_GPR_GPR_PCIE1_CLKREQ_B_OVERRIDE_EN_MASK (0x400U)
#define IOMUXC_GPR_GPR_PCIE1_CLKREQ_B_OVERRIDE_EN_SHIFT (10U)
#define IOMUXC_GPR_GPR_PCIE1_CLKREQ_B_OVERRIDE_EN(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_CLKREQ_B_OVERRIDE_EN_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_CLKREQ_B_OVERRIDE_EN_MASK)

#define IOMUXC_GPR_GPR_PCIE2_CLKREQ_B_OVERRIDE_EN_MASK (0x400U)
#define IOMUXC_GPR_GPR_PCIE2_CLKREQ_B_OVERRIDE_EN_SHIFT (10U)
#define IOMUXC_GPR_GPR_PCIE2_CLKREQ_B_OVERRIDE_EN(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_CLKREQ_B_OVERRIDE_EN_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_CLKREQ_B_OVERRIDE_EN_MASK)

#define IOMUXC_GPR_GPR_AWCACHE_PCIE1_EN_MASK     (0x800U)
#define IOMUXC_GPR_GPR_AWCACHE_PCIE1_EN_SHIFT    (11U)
/*! AWCACHE_PCIE1_EN
 *  0b0..PCIe AXI Master Port AWCACHE[1] driven by PCIe
 *  0b1..PCIe AXI Master Port AWCACHE[1] driven to constant value specified by the AWCACHE_PCIE1 bit
 */
#define IOMUXC_GPR_GPR_AWCACHE_PCIE1_EN(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_AWCACHE_PCIE1_EN_SHIFT)) & IOMUXC_GPR_GPR_AWCACHE_PCIE1_EN_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_PD_RX_MASK         (0x800U)
#define IOMUXC_GPR_GPR_CSI2_1_PD_RX_SHIFT        (11U)
#define IOMUXC_GPR_GPR_CSI2_1_PD_RX(x)           (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_PD_RX_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_PD_RX_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_ULPS_MARK_ACTIVE_MASK (0xF800U)
#define IOMUXC_GPR_GPR_CSI2_1_ULPS_MARK_ACTIVE_SHIFT (11U)
#define IOMUXC_GPR_GPR_CSI2_1_ULPS_MARK_ACTIVE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_ULPS_MARK_ACTIVE_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_ULPS_MARK_ACTIVE_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_PD_RX_MASK         (0x800U)
#define IOMUXC_GPR_GPR_CSI2_2_PD_RX_SHIFT        (11U)
#define IOMUXC_GPR_GPR_CSI2_2_PD_RX(x)           (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_PD_RX_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_PD_RX_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_ULPS_MARK_ACTIVE_MASK (0xF800U)
#define IOMUXC_GPR_GPR_CSI2_2_ULPS_MARK_ACTIVE_SHIFT (11U)
#define IOMUXC_GPR_GPR_CSI2_2_ULPS_MARK_ACTIVE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_ULPS_MARK_ACTIVE_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_ULPS_MARK_ACTIVE_MASK)

#define IOMUXC_GPR_GPR_DSI_HOST_UNDERRUN_ERR_MASK (0x800U)
#define IOMUXC_GPR_GPR_DSI_HOST_UNDERRUN_ERR_SHIFT (11U)
#define IOMUXC_GPR_GPR_DSI_HOST_UNDERRUN_ERR(x)  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_HOST_UNDERRUN_ERR_SHIFT)) & IOMUXC_GPR_GPR_DSI_HOST_UNDERRUN_ERR_MASK)

#define IOMUXC_GPR_GPR_OCRAM_S_TZ_ADDR_MASK      (0x3800U)
#define IOMUXC_GPR_GPR_OCRAM_S_TZ_ADDR_SHIFT     (11U)
#define IOMUXC_GPR_GPR_OCRAM_S_TZ_ADDR(x)        (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_OCRAM_S_TZ_ADDR_SHIFT)) & IOMUXC_GPR_GPR_OCRAM_S_TZ_ADDR_MASK)

#define IOMUXC_GPR_GPR_PCIE1_CLKREQ_B_OVERRIDE_MASK (0x800U)
#define IOMUXC_GPR_GPR_PCIE1_CLKREQ_B_OVERRIDE_SHIFT (11U)
#define IOMUXC_GPR_GPR_PCIE1_CLKREQ_B_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_CLKREQ_B_OVERRIDE_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_CLKREQ_B_OVERRIDE_MASK)

#define IOMUXC_GPR_GPR_PCIE2_CLKREQ_B_OVERRIDE_MASK (0x800U)
#define IOMUXC_GPR_GPR_PCIE2_CLKREQ_B_OVERRIDE_SHIFT (11U)
#define IOMUXC_GPR_GPR_PCIE2_CLKREQ_B_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_CLKREQ_B_OVERRIDE_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_CLKREQ_B_OVERRIDE_MASK)

#define IOMUXC_GPR_GPR_ARCACHE_LCDIF_EN_MASK     (0x1000U)
#define IOMUXC_GPR_GPR_ARCACHE_LCDIF_EN_SHIFT    (12U)
/*! ARCACHE_LCDIF_EN
 *  0b0..LCDIF AXI Master Port ARCACHE[1] driven by LCDIF
 *  0b1..LCDIF AXI Master Port ARCACHE[1] driven to constant value specified by the ARCACHE_LCDIF bit
 */
#define IOMUXC_GPR_GPR_ARCACHE_LCDIF_EN(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_ARCACHE_LCDIF_EN_SHIFT)) & IOMUXC_GPR_GPR_ARCACHE_LCDIF_EN_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_VID_INTFC_ENB_MASK (0x1000U)
#define IOMUXC_GPR_GPR_CSI2_1_VID_INTFC_ENB_SHIFT (12U)
#define IOMUXC_GPR_GPR_CSI2_1_VID_INTFC_ENB(x)   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_VID_INTFC_ENB_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_VID_INTFC_ENB_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_VID_INTFC_ENB_MASK (0x1000U)
#define IOMUXC_GPR_GPR_CSI2_2_VID_INTFC_ENB_SHIFT (12U)
#define IOMUXC_GPR_GPR_CSI2_2_VID_INTFC_ENB(x)   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_VID_INTFC_ENB_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_VID_INTFC_ENB_MASK)

#define IOMUXC_GPR_GPR_DSI_TRIGGER_ACK_MASK      (0x1000U)
#define IOMUXC_GPR_GPR_DSI_TRIGGER_ACK_SHIFT     (12U)
#define IOMUXC_GPR_GPR_DSI_TRIGGER_ACK(x)        (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_TRIGGER_ACK_SHIFT)) & IOMUXC_GPR_GPR_DSI_TRIGGER_ACK_MASK)

#define IOMUXC_GPR_GPR_DSI_TRIGGER_SEND_MASK     (0x3000U)
#define IOMUXC_GPR_GPR_DSI_TRIGGER_SEND_SHIFT    (12U)
#define IOMUXC_GPR_GPR_DSI_TRIGGER_SEND(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_TRIGGER_SEND_SHIFT)) & IOMUXC_GPR_GPR_DSI_TRIGGER_SEND_MASK)

#define IOMUXC_GPR_GPR_IRQ_MASK                  (0x1000U)
#define IOMUXC_GPR_GPR_IRQ_SHIFT                 (12U)
#define IOMUXC_GPR_GPR_IRQ(x)                    (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_IRQ_SHIFT)) & IOMUXC_GPR_GPR_IRQ_MASK)

#define IOMUXC_GPR_GPR_PCIE1_CTRL_DEVICE_TYPE_MASK (0xF000U)
#define IOMUXC_GPR_GPR_PCIE1_CTRL_DEVICE_TYPE_SHIFT (12U)
/*! PCIE1_CTRL_DEVICE_TYPE
 *  0b0000..PCI Express endpoint
 *  0b0001..Legacy PCI Express endpoint
 *  0b0100..Root port of PCI Express root complex
 */
#define IOMUXC_GPR_GPR_PCIE1_CTRL_DEVICE_TYPE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_CTRL_DEVICE_TYPE_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_CTRL_DEVICE_TYPE_MASK)

#define IOMUXC_GPR_GPR_PCIE1_VREG_BYPASS_MASK    (0x1000U)
#define IOMUXC_GPR_GPR_PCIE1_VREG_BYPASS_SHIFT   (12U)
#define IOMUXC_GPR_GPR_PCIE1_VREG_BYPASS(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_VREG_BYPASS_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_VREG_BYPASS_MASK)

#define IOMUXC_GPR_GPR_PCIE2_VREG_BYPASS_MASK    (0x1000U)
#define IOMUXC_GPR_GPR_PCIE2_VREG_BYPASS_SHIFT   (12U)
#define IOMUXC_GPR_GPR_PCIE2_VREG_BYPASS(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_VREG_BYPASS_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_VREG_BYPASS_MASK)

#define IOMUXC_GPR_GPR_ARCACHE_PCIE2_MASK        (0x2000U)
#define IOMUXC_GPR_GPR_ARCACHE_PCIE2_SHIFT       (13U)
/*! ARCACHE_PCIE2
 *  0b0..Drive PCIe AXI Master Port ARCACHE[1] to 0
 *  0b1..Drive PCIe AXI Master Port ARCACHE[1] to 1
 */
#define IOMUXC_GPR_GPR_ARCACHE_PCIE2(x)          (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_ARCACHE_PCIE2_SHIFT)) & IOMUXC_GPR_GPR_ARCACHE_PCIE2_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_RX_ENABLE_MASK     (0x2000U)
#define IOMUXC_GPR_GPR_CSI2_1_RX_ENABLE_SHIFT    (13U)
#define IOMUXC_GPR_GPR_CSI2_1_RX_ENABLE(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_RX_ENABLE_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_RX_ENABLE_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_RX_ENABLE_MASK     (0x2000U)
#define IOMUXC_GPR_GPR_CSI2_2_RX_ENABLE_SHIFT    (13U)
#define IOMUXC_GPR_GPR_CSI2_2_RX_ENABLE(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_RX_ENABLE_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_RX_ENABLE_MASK)

#define IOMUXC_GPR_GPR_DSI_LP_RX_TIMEOUT_MASK    (0x2000U)
#define IOMUXC_GPR_GPR_DSI_LP_RX_TIMEOUT_SHIFT   (13U)
#define IOMUXC_GPR_GPR_DSI_LP_RX_TIMEOUT(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_LP_RX_TIMEOUT_SHIFT)) & IOMUXC_GPR_GPR_DSI_LP_RX_TIMEOUT_MASK)

#define IOMUXC_GPR_GPR_ENET1_TX_CLK_SEL_MASK     (0x2000U)
#define IOMUXC_GPR_GPR_ENET1_TX_CLK_SEL_SHIFT    (13U)
/*! ENET1_TX_CLK_SEL
 *  0b0..Gets ENET1 TX reference clk. This clock is also output to pins via the IOMUX. ENET_REF_CLK1 function.
 *  0b1..Gets ENET1 TX reference clk from the ENET1_TX_CLK pin. In this use case, an external OSC provides the
 *       clock for both the external PHY and the internal controller
 */
#define IOMUXC_GPR_GPR_ENET1_TX_CLK_SEL(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_ENET1_TX_CLK_SEL_SHIFT)) & IOMUXC_GPR_GPR_ENET1_TX_CLK_SEL_MASK)

#define IOMUXC_GPR_GPR_PCIE1_PHY_TX_VBOOST_LVL_MASK (0xE000U)
#define IOMUXC_GPR_GPR_PCIE1_PHY_TX_VBOOST_LVL_SHIFT (13U)
#define IOMUXC_GPR_GPR_PCIE1_PHY_TX_VBOOST_LVL(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_PHY_TX_VBOOST_LVL_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_PHY_TX_VBOOST_LVL_MASK)

#define IOMUXC_GPR_GPR_PCIE2_PHY_TX_VBOOST_LVL_MASK (0xE000U)
#define IOMUXC_GPR_GPR_PCIE2_PHY_TX_VBOOST_LVL_SHIFT (13U)
#define IOMUXC_GPR_GPR_PCIE2_PHY_TX_VBOOST_LVL(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_PHY_TX_VBOOST_LVL_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_PHY_TX_VBOOST_LVL_MASK)

#define IOMUXC_GPR_GPR_AWCACHE_PCIE2_MASK        (0x4000U)
#define IOMUXC_GPR_GPR_AWCACHE_PCIE2_SHIFT       (14U)
/*! AWCACHE_PCIE2
 *  0b0..Drive PCIe AXI Master Port AWCACHE[1] to 0
 *  0b1..Drive PCIe AXI Master Port AWCACHE[1] to 1
 */
#define IOMUXC_GPR_GPR_AWCACHE_PCIE2(x)          (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_AWCACHE_PCIE2_SHIFT)) & IOMUXC_GPR_GPR_AWCACHE_PCIE2_MASK)

#define IOMUXC_GPR_GPR_DSI_HS_TX_TIMEOUT_MASK    (0x4000U)
#define IOMUXC_GPR_GPR_DSI_HS_TX_TIMEOUT_SHIFT   (14U)
#define IOMUXC_GPR_GPR_DSI_HS_TX_TIMEOUT(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_HS_TX_TIMEOUT_SHIFT)) & IOMUXC_GPR_GPR_DSI_HS_TX_TIMEOUT_MASK)

#define IOMUXC_GPR_GPR_DSI_TRIGGER_REQ_MASK      (0x4000U)
#define IOMUXC_GPR_GPR_DSI_TRIGGER_REQ_SHIFT     (14U)
#define IOMUXC_GPR_GPR_DSI_TRIGGER_REQ(x)        (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_TRIGGER_REQ_SHIFT)) & IOMUXC_GPR_GPR_DSI_TRIGGER_REQ_MASK)

#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN2_6DB_MASK (0xFC000U)
#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN2_6DB_SHIFT (14U)
#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN2_6DB(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN2_6DB_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN2_6DB_MASK)

#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN2_6DB_MASK (0xFC000U)
#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN2_6DB_SHIFT (14U)
#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN2_6DB(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN2_6DB_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN2_6DB_MASK)

#define IOMUXC_GPR_GPR_DDSI_DPHY_TURNAROUND_MASK (0x8000U)
#define IOMUXC_GPR_GPR_DDSI_DPHY_TURNAROUND_SHIFT (15U)
#define IOMUXC_GPR_GPR_DDSI_DPHY_TURNAROUND(x)   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DDSI_DPHY_TURNAROUND_SHIFT)) & IOMUXC_GPR_GPR_DDSI_DPHY_TURNAROUND_MASK)

#define IOMUXC_GPR_GPR_DSI_HOST_BTA_TIMEOUT_MASK (0x8000U)
#define IOMUXC_GPR_GPR_DSI_HOST_BTA_TIMEOUT_SHIFT (15U)
#define IOMUXC_GPR_GPR_DSI_HOST_BTA_TIMEOUT(x)   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_HOST_BTA_TIMEOUT_SHIFT)) & IOMUXC_GPR_GPR_DSI_HOST_BTA_TIMEOUT_MASK)

#define IOMUXC_GPR_GPR_GPR_ANAMIX_IPT_MODE_MASK  (0x8000U)
#define IOMUXC_GPR_GPR_GPR_ANAMIX_IPT_MODE_SHIFT (15U)
#define IOMUXC_GPR_GPR_GPR_ANAMIX_IPT_MODE(x)    (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_GPR_ANAMIX_IPT_MODE_SHIFT)) & IOMUXC_GPR_GPR_GPR_ANAMIX_IPT_MODE_MASK)

#define IOMUXC_GPR_GPR_CPU_STANDBYWFI_MASK       (0xF0000U)
#define IOMUXC_GPR_GPR_CPU_STANDBYWFI_SHIFT      (16U)
#define IOMUXC_GPR_GPR_CPU_STANDBYWFI(x)         (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CPU_STANDBYWFI_SHIFT)) & IOMUXC_GPR_GPR_CPU_STANDBYWFI_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_RX_DPHY_RDY_MASK   (0x10000U)
#define IOMUXC_GPR_GPR_CSI2_1_RX_DPHY_RDY_SHIFT  (16U)
#define IOMUXC_GPR_GPR_CSI2_1_RX_DPHY_RDY(x)     (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_RX_DPHY_RDY_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_RX_DPHY_RDY_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_RX_DPHY_RDY_MASK   (0x10000U)
#define IOMUXC_GPR_GPR_CSI2_2_RX_DPHY_RDY_SHIFT  (16U)
#define IOMUXC_GPR_GPR_CSI2_2_RX_DPHY_RDY(x)     (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_RX_DPHY_RDY_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_RX_DPHY_RDY_MASK)

#define IOMUXC_GPR_GPR_DSI_DPHY_DIRECTION_MASK   (0x10000U)
#define IOMUXC_GPR_GPR_DSI_DPHY_DIRECTION_SHIFT  (16U)
#define IOMUXC_GPR_GPR_DSI_DPHY_DIRECTION(x)     (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_DPHY_DIRECTION_SHIFT)) & IOMUXC_GPR_GPR_DSI_DPHY_DIRECTION_MASK)

#define IOMUXC_GPR_GPR_OCRAM_TZ_EN_LOCK_MASK     (0x10000U)
#define IOMUXC_GPR_GPR_OCRAM_TZ_EN_LOCK_SHIFT    (16U)
#define IOMUXC_GPR_GPR_OCRAM_TZ_EN_LOCK(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_OCRAM_TZ_EN_LOCK_SHIFT)) & IOMUXC_GPR_GPR_OCRAM_TZ_EN_LOCK_MASK)

#define IOMUXC_GPR_GPR_PCIE1_PHY_TX0_TERM_OFFSET_MASK (0x1F0000U)
#define IOMUXC_GPR_GPR_PCIE1_PHY_TX0_TERM_OFFSET_SHIFT (16U)
#define IOMUXC_GPR_GPR_PCIE1_PHY_TX0_TERM_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_PHY_TX0_TERM_OFFSET_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_PHY_TX0_TERM_OFFSET_MASK)

#define IOMUXC_GPR_GPR_PCIE2_PHY_TX0_TERM_OFFSET_MASK (0x1F0000U)
#define IOMUXC_GPR_GPR_PCIE2_PHY_TX0_TERM_OFFSET_SHIFT (16U)
#define IOMUXC_GPR_GPR_PCIE2_PHY_TX0_TERM_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_PHY_TX0_TERM_OFFSET_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_PHY_TX0_TERM_OFFSET_MASK)

#define IOMUXC_GPR_GPR_RDATA_WAIT_EN_PDG_MASK    (0x10000U)
#define IOMUXC_GPR_GPR_RDATA_WAIT_EN_PDG_SHIFT   (16U)
/*! RDATA_WAIT_EN_PDG
 *  0b0..read data wait state control configuration valid
 *  0b1..read data wait state control bit changed
 */
#define IOMUXC_GPR_GPR_RDATA_WAIT_EN_PDG(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_RDATA_WAIT_EN_PDG_SHIFT)) & IOMUXC_GPR_GPR_RDATA_WAIT_EN_PDG_MASK)

#define IOMUXC_GPR_GPR_SDMA1_IPG_STOP_ACK_MASK   (0x10000U)
#define IOMUXC_GPR_GPR_SDMA1_IPG_STOP_ACK_SHIFT  (16U)
/*! SDMA1_IPG_STOP_ACK
 *  0b0..stop acknowledge is not asserted
 *  0b1..stop acknowledge is asserted, peripheral is in STOP mode
 */
#define IOMUXC_GPR_GPR_SDMA1_IPG_STOP_ACK(x)     (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_SDMA1_IPG_STOP_ACK_SHIFT)) & IOMUXC_GPR_GPR_SDMA1_IPG_STOP_ACK_MASK)

#define IOMUXC_GPR_GPR_TZASC_EN_LOCK_MASK        (0x10000U)
#define IOMUXC_GPR_GPR_TZASC_EN_LOCK_SHIFT       (16U)
#define IOMUXC_GPR_GPR_TZASC_EN_LOCK(x)          (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_TZASC_EN_LOCK_SHIFT)) & IOMUXC_GPR_GPR_TZASC_EN_LOCK_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_CRC_ERR_MASK       (0x20000U)
#define IOMUXC_GPR_GPR_CSI2_1_CRC_ERR_SHIFT      (17U)
#define IOMUXC_GPR_GPR_CSI2_1_CRC_ERR(x)         (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_CRC_ERR_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_CRC_ERR_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_CRC_ERR_MASK       (0x20000U)
#define IOMUXC_GPR_GPR_CSI2_2_CRC_ERR_SHIFT      (17U)
#define IOMUXC_GPR_GPR_CSI2_2_CRC_ERR(x)         (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_CRC_ERR_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_CRC_ERR_MASK)

#define IOMUXC_GPR_GPR_DSI_CRC_ERR_MASK          (0x20000U)
#define IOMUXC_GPR_GPR_DSI_CRC_ERR_SHIFT         (17U)
#define IOMUXC_GPR_GPR_DSI_CRC_ERR(x)            (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_CRC_ERR_SHIFT)) & IOMUXC_GPR_GPR_DSI_CRC_ERR_MASK)

#define IOMUXC_GPR_GPR_OCRAM_TZ_ADDR_LOCK_MASK   (0x3E0000U)
#define IOMUXC_GPR_GPR_OCRAM_TZ_ADDR_LOCK_SHIFT  (17U)
#define IOMUXC_GPR_GPR_OCRAM_TZ_ADDR_LOCK(x)     (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_OCRAM_TZ_ADDR_LOCK_SHIFT)) & IOMUXC_GPR_GPR_OCRAM_TZ_ADDR_LOCK_MASK)

#define IOMUXC_GPR_GPR_PCIE1_CTRL_DIAG_STATUS_BUS_SELECT_MASK (0x1E0000U)
#define IOMUXC_GPR_GPR_PCIE1_CTRL_DIAG_STATUS_BUS_SELECT_SHIFT (17U)
#define IOMUXC_GPR_GPR_PCIE1_CTRL_DIAG_STATUS_BUS_SELECT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_CTRL_DIAG_STATUS_BUS_SELECT_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_CTRL_DIAG_STATUS_BUS_SELECT_MASK)

#define IOMUXC_GPR_GPR_RADDR_PIPE_EN_PDG_MASK    (0x20000U)
#define IOMUXC_GPR_GPR_RADDR_PIPE_EN_PDG_SHIFT   (17U)
/*! RADDR_PIPE_EN_PDG
 *  0b0..read address pipeline enable configuration valid
 *  0b1..read address pipeline enable bit changed
 */
#define IOMUXC_GPR_GPR_RADDR_PIPE_EN_PDG(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_RADDR_PIPE_EN_PDG_SHIFT)) & IOMUXC_GPR_GPR_RADDR_PIPE_EN_PDG_MASK)

#define IOMUXC_GPR_GPR_TZASC_ID_SWAP_BYPASS_LOCK_MASK (0x20000U)
#define IOMUXC_GPR_GPR_TZASC_ID_SWAP_BYPASS_LOCK_SHIFT (17U)
#define IOMUXC_GPR_GPR_TZASC_ID_SWAP_BYPASS_LOCK(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_TZASC_ID_SWAP_BYPASS_LOCK_SHIFT)) & IOMUXC_GPR_GPR_TZASC_ID_SWAP_BYPASS_LOCK_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_ULPS_ACTIVE_MASK   (0x7C0000U)
#define IOMUXC_GPR_GPR_CSI2_1_ULPS_ACTIVE_SHIFT  (18U)
#define IOMUXC_GPR_GPR_CSI2_1_ULPS_ACTIVE(x)     (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_ULPS_ACTIVE_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_ULPS_ACTIVE_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_ULPS_ACTIVE_MASK   (0x7C0000U)
#define IOMUXC_GPR_GPR_CSI2_2_ULPS_ACTIVE_SHIFT  (18U)
#define IOMUXC_GPR_GPR_CSI2_2_ULPS_ACTIVE(x)     (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_ULPS_ACTIVE_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_ULPS_ACTIVE_MASK)

#define IOMUXC_GPR_GPR_DSI_CALOUT_MASK           (0xC0000U)
#define IOMUXC_GPR_GPR_DSI_CALOUT_SHIFT          (18U)
#define IOMUXC_GPR_GPR_DSI_CALOUT(x)             (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_CALOUT_SHIFT)) & IOMUXC_GPR_GPR_DSI_CALOUT_MASK)

#define IOMUXC_GPR_GPR_SEC_ERR_RESP_EN_LOCK_MASK (0x40000U)
#define IOMUXC_GPR_GPR_SEC_ERR_RESP_EN_LOCK_SHIFT (18U)
#define IOMUXC_GPR_GPR_SEC_ERR_RESP_EN_LOCK(x)   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_SEC_ERR_RESP_EN_LOCK_SHIFT)) & IOMUXC_GPR_GPR_SEC_ERR_RESP_EN_LOCK_MASK)

#define IOMUXC_GPR_GPR_WDATA_PIPE_EN_PDG_MASK    (0x40000U)
#define IOMUXC_GPR_GPR_WDATA_PIPE_EN_PDG_SHIFT   (18U)
/*! WDATA_PIPE_EN_PDG
 *  0b0..write data pipeline enable configuration valid
 *  0b1..write data pipeline enable bit changed
 */
#define IOMUXC_GPR_GPR_WDATA_PIPE_EN_PDG(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_WDATA_PIPE_EN_PDG_SHIFT)) & IOMUXC_GPR_GPR_WDATA_PIPE_EN_PDG_MASK)

#define IOMUXC_GPR_GPR_ENET1_IPG_STOP_ACK_MASK   (0x80000U)
#define IOMUXC_GPR_GPR_ENET1_IPG_STOP_ACK_SHIFT  (19U)
/*! ENET1_IPG_STOP_ACK
 *  0b0..stop acknowledge is not asserted
 *  0b1..stop acknowledge is asserted, peripheral is in STOP mode
 */
#define IOMUXC_GPR_GPR_ENET1_IPG_STOP_ACK(x)     (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_ENET1_IPG_STOP_ACK_SHIFT)) & IOMUXC_GPR_GPR_ENET1_IPG_STOP_ACK_MASK)

#define IOMUXC_GPR_GPR_EXC_ERR_RESP_EN_LOCK_MASK (0x80000U)
#define IOMUXC_GPR_GPR_EXC_ERR_RESP_EN_LOCK_SHIFT (19U)
#define IOMUXC_GPR_GPR_EXC_ERR_RESP_EN_LOCK(x)   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_EXC_ERR_RESP_EN_LOCK_SHIFT)) & IOMUXC_GPR_GPR_EXC_ERR_RESP_EN_LOCK_MASK)

#define IOMUXC_GPR_GPR_WADDR_PIPE_EN_PNDG_MASK   (0x80000U)
#define IOMUXC_GPR_GPR_WADDR_PIPE_EN_PNDG_SHIFT  (19U)
/*! WADDR_PIPE_EN_PNDG
 *  0b0..write address pipeline enable configuration valid
 *  0b1..write address pipeline enable bit changed
 */
#define IOMUXC_GPR_GPR_WADDR_PIPE_EN_PNDG(x)     (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_WADDR_PIPE_EN_PNDG_SHIFT)) & IOMUXC_GPR_GPR_WADDR_PIPE_EN_PNDG_MASK)

#define IOMUXC_GPR_GPR_CPU_STANDBYWFE_MASK       (0xF00000U)
#define IOMUXC_GPR_GPR_CPU_STANDBYWFE_SHIFT      (20U)
#define IOMUXC_GPR_GPR_CPU_STANDBYWFE(x)         (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CPU_STANDBYWFE_SHIFT)) & IOMUXC_GPR_GPR_CPU_STANDBYWFE_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_D0_LB_ACTIVE_MASK  (0x100000U)
#define IOMUXC_GPR_GPR_CSI2_1_D0_LB_ACTIVE_SHIFT (20U)
#define IOMUXC_GPR_GPR_CSI2_1_D0_LB_ACTIVE(x)    (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_D0_LB_ACTIVE_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_D0_LB_ACTIVE_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_D1_LB_ACTIVE_MASK  (0x100000U)
#define IOMUXC_GPR_GPR_CSI2_1_D1_LB_ACTIVE_SHIFT (20U)
#define IOMUXC_GPR_GPR_CSI2_1_D1_LB_ACTIVE(x)    (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_D1_LB_ACTIVE_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_D1_LB_ACTIVE_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_D2_LB_ACTIVE_MASK  (0x100000U)
#define IOMUXC_GPR_GPR_CSI2_1_D2_LB_ACTIVE_SHIFT (20U)
#define IOMUXC_GPR_GPR_CSI2_1_D2_LB_ACTIVE(x)    (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_D2_LB_ACTIVE_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_D2_LB_ACTIVE_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_D3_LB_ACTIVE_MASK  (0x100000U)
#define IOMUXC_GPR_GPR_CSI2_1_D3_LB_ACTIVE_SHIFT (20U)
#define IOMUXC_GPR_GPR_CSI2_1_D3_LB_ACTIVE(x)    (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_D3_LB_ACTIVE_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_D3_LB_ACTIVE_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_D0_LB_ACTIVE_MASK  (0x100000U)
#define IOMUXC_GPR_GPR_CSI2_2_D0_LB_ACTIVE_SHIFT (20U)
#define IOMUXC_GPR_GPR_CSI2_2_D0_LB_ACTIVE(x)    (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_D0_LB_ACTIVE_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_D0_LB_ACTIVE_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_D1_LB_ACTIVE_MASK  (0x100000U)
#define IOMUXC_GPR_GPR_CSI2_2_D1_LB_ACTIVE_SHIFT (20U)
#define IOMUXC_GPR_GPR_CSI2_2_D1_LB_ACTIVE(x)    (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_D1_LB_ACTIVE_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_D1_LB_ACTIVE_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_D2_LB_ACTIVE_MASK  (0x100000U)
#define IOMUXC_GPR_GPR_CSI2_2_D2_LB_ACTIVE_SHIFT (20U)
#define IOMUXC_GPR_GPR_CSI2_2_D2_LB_ACTIVE(x)    (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_D2_LB_ACTIVE_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_D2_LB_ACTIVE_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_D3_LB_ACTIVE_MASK  (0x100000U)
#define IOMUXC_GPR_GPR_CSI2_2_D3_LB_ACTIVE_SHIFT (20U)
#define IOMUXC_GPR_GPR_CSI2_2_D3_LB_ACTIVE(x)    (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_D3_LB_ACTIVE_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_D3_LB_ACTIVE_MASK)

#define IOMUXC_GPR_GPR_DSI_CALCOMPL_MASK         (0x100000U)
#define IOMUXC_GPR_GPR_DSI_CALCOMPL_SHIFT        (20U)
#define IOMUXC_GPR_GPR_DSI_CALCOMPL(x)           (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_CALCOMPL_SHIFT)) & IOMUXC_GPR_GPR_DSI_CALCOMPL_MASK)

#define IOMUXC_GPR_GPR_DSI_D0_LB_ACTIVE_MASK     (0x100000U)
#define IOMUXC_GPR_GPR_DSI_D0_LB_ACTIVE_SHIFT    (20U)
#define IOMUXC_GPR_GPR_DSI_D0_LB_ACTIVE(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_D0_LB_ACTIVE_SHIFT)) & IOMUXC_GPR_GPR_DSI_D0_LB_ACTIVE_MASK)

#define IOMUXC_GPR_GPR_DSI_D1_LB_ACTIVE_MASK     (0x100000U)
#define IOMUXC_GPR_GPR_DSI_D1_LB_ACTIVE_SHIFT    (20U)
#define IOMUXC_GPR_GPR_DSI_D1_LB_ACTIVE(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_D1_LB_ACTIVE_SHIFT)) & IOMUXC_GPR_GPR_DSI_D1_LB_ACTIVE_MASK)

#define IOMUXC_GPR_GPR_DSI_D2_LB_ACTIVE_MASK     (0x100000U)
#define IOMUXC_GPR_GPR_DSI_D2_LB_ACTIVE_SHIFT    (20U)
#define IOMUXC_GPR_GPR_DSI_D2_LB_ACTIVE(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_D2_LB_ACTIVE_SHIFT)) & IOMUXC_GPR_GPR_DSI_D2_LB_ACTIVE_MASK)

#define IOMUXC_GPR_GPR_DSI_D3_LB_ACTIVE_MASK     (0x100000U)
#define IOMUXC_GPR_GPR_DSI_D3_LB_ACTIVE_SHIFT    (20U)
#define IOMUXC_GPR_GPR_DSI_D3_LB_ACTIVE(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_D3_LB_ACTIVE_SHIFT)) & IOMUXC_GPR_GPR_DSI_D3_LB_ACTIVE_MASK)

#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN2_3P5DB_MASK (0x3F00000U)
#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN2_3P5DB_SHIFT (20U)
#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN2_3P5DB(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN2_3P5DB_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN2_3P5DB_MASK)

#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN2_3P5DB_MASK (0x3F00000U)
#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN2_3P5DB_SHIFT (20U)
#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN2_3P5DB(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN2_3P5DB_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN2_3P5DB_MASK)

#define IOMUXC_GPR_GPR_SDMA2_IPG_STOP_ACK_MASK   (0x100000U)
#define IOMUXC_GPR_GPR_SDMA2_IPG_STOP_ACK_SHIFT  (20U)
/*! SDMA2_IPG_STOP_ACK
 *  0b0..stop acknowledge is not asserted
 *  0b1..stop acknowledge is asserted, peripheral is in STOP mode
 */
#define IOMUXC_GPR_GPR_SDMA2_IPG_STOP_ACK(x)     (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_SDMA2_IPG_STOP_ACK_SHIFT)) & IOMUXC_GPR_GPR_SDMA2_IPG_STOP_ACK_MASK)

#define IOMUXC_GPR_GPR_S_RDATA_WAIT_EN_PNDG_MASK (0x100000U)
#define IOMUXC_GPR_GPR_S_RDATA_WAIT_EN_PNDG_SHIFT (20U)
/*! S_RDATA_WAIT_EN_PNDG
 *  0b0..read data wait state control configuration valid
 *  0b1..read data wait state control bit changed
 */
#define IOMUXC_GPR_GPR_S_RDATA_WAIT_EN_PNDG(x)   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_S_RDATA_WAIT_EN_PNDG_SHIFT)) & IOMUXC_GPR_GPR_S_RDATA_WAIT_EN_PNDG_MASK)

#define IOMUXC_GPR_GPR_WDOG3_MASK_MASK           (0x100000U)
#define IOMUXC_GPR_GPR_WDOG3_MASK_SHIFT          (20U)
/*! WDOG3_MASK
 *  0b0..WDOG3 Timeout behaves normally
 *  0b1..WDOG3 Timeout is masked
 */
#define IOMUXC_GPR_GPR_WDOG3_MASK(x)             (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_WDOG3_MASK_SHIFT)) & IOMUXC_GPR_GPR_WDOG3_MASK_MASK)

#define IOMUXC_GPR_GPR_DSI_ULPS_ACTIVE_MASK      (0x3E00000U)
#define IOMUXC_GPR_GPR_DSI_ULPS_ACTIVE_SHIFT     (21U)
#define IOMUXC_GPR_GPR_DSI_ULPS_ACTIVE(x)        (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_ULPS_ACTIVE_SHIFT)) & IOMUXC_GPR_GPR_DSI_ULPS_ACTIVE_MASK)

#define IOMUXC_GPR_GPR_PCIE1_CTRL_DIAG_CTRL_BUS_MASK (0x600000U)
#define IOMUXC_GPR_GPR_PCIE1_CTRL_DIAG_CTRL_BUS_SHIFT (21U)
#define IOMUXC_GPR_GPR_PCIE1_CTRL_DIAG_CTRL_BUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_CTRL_DIAG_CTRL_BUS_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_CTRL_DIAG_CTRL_BUS_MASK)

#define IOMUXC_GPR_GPR_PCIE1_PHY_RX0_EQ_MASK     (0xE00000U)
#define IOMUXC_GPR_GPR_PCIE1_PHY_RX0_EQ_SHIFT    (21U)
#define IOMUXC_GPR_GPR_PCIE1_PHY_RX0_EQ(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_PHY_RX0_EQ_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_PHY_RX0_EQ_MASK)

#define IOMUXC_GPR_GPR_PCIE2_PHY_RX0_EQ_MASK     (0xE00000U)
#define IOMUXC_GPR_GPR_PCIE2_PHY_RX0_EQ_SHIFT    (21U)
#define IOMUXC_GPR_GPR_PCIE2_PHY_RX0_EQ(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_PHY_RX0_EQ_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_PHY_RX0_EQ_MASK)

#define IOMUXC_GPR_GPR_SAI1_IPG_STOP_ACK_MASK    (0x200000U)
#define IOMUXC_GPR_GPR_SAI1_IPG_STOP_ACK_SHIFT   (21U)
/*! SAI1_IPG_STOP_ACK
 *  0b0..stop acknowledge is not asserted
 *  0b1..stop acknowledge is asserted, peripheral is in STOP mode
 */
#define IOMUXC_GPR_GPR_SAI1_IPG_STOP_ACK(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_SAI1_IPG_STOP_ACK_SHIFT)) & IOMUXC_GPR_GPR_SAI1_IPG_STOP_ACK_MASK)

#define IOMUXC_GPR_GPR_S_RADDR_PIPE_EN_PNDG_MASK (0x200000U)
#define IOMUXC_GPR_GPR_S_RADDR_PIPE_EN_PNDG_SHIFT (21U)
/*! S_RADDR_PIPE_EN_PNDG
 *  0b0..read address pipeline enable configuration valid
 *  0b1..read address pipeline enable bit changed
 */
#define IOMUXC_GPR_GPR_S_RADDR_PIPE_EN_PNDG(x)   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_S_RADDR_PIPE_EN_PNDG_SHIFT)) & IOMUXC_GPR_GPR_S_RADDR_PIPE_EN_PNDG_MASK)

#define IOMUXC_GPR_GPR_SAI2_IPG_STOP_ACK_MASK    (0x400000U)
#define IOMUXC_GPR_GPR_SAI2_IPG_STOP_ACK_SHIFT   (22U)
/*! SAI2_IPG_STOP_ACK
 *  0b0..stop acknowledge is not asserted
 *  0b1..stop acknowledge is asserted, peripheral is in STOP mode
 */
#define IOMUXC_GPR_GPR_SAI2_IPG_STOP_ACK(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_SAI2_IPG_STOP_ACK_SHIFT)) & IOMUXC_GPR_GPR_SAI2_IPG_STOP_ACK_MASK)

#define IOMUXC_GPR_GPR_S_WDATA_PIPE_EN_PNDG_MASK (0x400000U)
#define IOMUXC_GPR_GPR_S_WDATA_PIPE_EN_PNDG_SHIFT (22U)
/*! S_WDATA_PIPE_EN_PNDG
 *  0b0..write data pipeline enable configuration valid
 *  0b1..write data pipeline enable bit changed
 */
#define IOMUXC_GPR_GPR_S_WDATA_PIPE_EN_PNDG(x)   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_S_WDATA_PIPE_EN_PNDG_SHIFT)) & IOMUXC_GPR_GPR_S_WDATA_PIPE_EN_PNDG_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_ERR_FIFO_WR_OVFL_MASK (0x800000U)
#define IOMUXC_GPR_GPR_CSI2_1_ERR_FIFO_WR_OVFL_SHIFT (23U)
#define IOMUXC_GPR_GPR_CSI2_1_ERR_FIFO_WR_OVFL(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_ERR_FIFO_WR_OVFL_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_ERR_FIFO_WR_OVFL_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_ERR_FIFO_WR_OVFL_MASK (0x800000U)
#define IOMUXC_GPR_GPR_CSI2_2_ERR_FIFO_WR_OVFL_SHIFT (23U)
#define IOMUXC_GPR_GPR_CSI2_2_ERR_FIFO_WR_OVFL(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_ERR_FIFO_WR_OVFL_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_ERR_FIFO_WR_OVFL_MASK)

#define IOMUXC_GPR_GPR_SAI3_IPG_STOP_ACK_MASK    (0x800000U)
#define IOMUXC_GPR_GPR_SAI3_IPG_STOP_ACK_SHIFT   (23U)
/*! SAI3_IPG_STOP_ACK
 *  0b0..stop acknowledge is not asserted
 *  0b1..stop acknowledge is asserted, peripheral is in STOP mode
 */
#define IOMUXC_GPR_GPR_SAI3_IPG_STOP_ACK(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_SAI3_IPG_STOP_ACK_SHIFT)) & IOMUXC_GPR_GPR_SAI3_IPG_STOP_ACK_MASK)

#define IOMUXC_GPR_GPR_S_WADDR_PIPE_EN_PNDG_MASK (0x800000U)
#define IOMUXC_GPR_GPR_S_WADDR_PIPE_EN_PNDG_SHIFT (23U)
/*! S_WADDR_PIPE_EN_PNDG
 *  0b0..write address pipeline enable configuration valid
 *  0b1..write address pipeline enable bit changed
 */
#define IOMUXC_GPR_GPR_S_WADDR_PIPE_EN_PNDG(x)   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_S_WADDR_PIPE_EN_PNDG_SHIFT)) & IOMUXC_GPR_GPR_S_WADDR_PIPE_EN_PNDG_MASK)

#define IOMUXC_GPR_GPR_TZASC1_SECURE_BOOT_LOCK_MASK (0x800000U)
#define IOMUXC_GPR_GPR_TZASC1_SECURE_BOOT_LOCK_SHIFT (23U)
/*! TZASC1_SECURE_BOOT_LOCK
 *  0b0..Secure boot lock is disabled
 *  0b1..Secure boot lock is enabled
 */
#define IOMUXC_GPR_GPR_TZASC1_SECURE_BOOT_LOCK(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_TZASC1_SECURE_BOOT_LOCK_SHIFT)) & IOMUXC_GPR_GPR_TZASC1_SECURE_BOOT_LOCK_MASK)

#define IOMUXC_GPR_GPR_CSI2_1_ERR_SEND_LEVEL_MASK (0x1000000U)
#define IOMUXC_GPR_GPR_CSI2_1_ERR_SEND_LEVEL_SHIFT (24U)
#define IOMUXC_GPR_GPR_CSI2_1_ERR_SEND_LEVEL(x)  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_ERR_SEND_LEVEL_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_ERR_SEND_LEVEL_MASK)

#define IOMUXC_GPR_GPR_CSI2_2_ERR_SEND_LEVEL_MASK (0x1000000U)
#define IOMUXC_GPR_GPR_CSI2_2_ERR_SEND_LEVEL_SHIFT (24U)
#define IOMUXC_GPR_GPR_CSI2_2_ERR_SEND_LEVEL(x)  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_ERR_SEND_LEVEL_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_ERR_SEND_LEVEL_MASK)

#define IOMUXC_GPR_GPR_PCIE1_PHY_LOS_LEVEL_MASK  (0x1F000000U)
#define IOMUXC_GPR_GPR_PCIE1_PHY_LOS_LEVEL_SHIFT (24U)
#define IOMUXC_GPR_GPR_PCIE1_PHY_LOS_LEVEL(x)    (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_PHY_LOS_LEVEL_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_PHY_LOS_LEVEL_MASK)

#define IOMUXC_GPR_GPR_PCIE2_PHY_LOS_LEVEL_MASK  (0x1F000000U)
#define IOMUXC_GPR_GPR_PCIE2_PHY_LOS_LEVEL_SHIFT (24U)
#define IOMUXC_GPR_GPR_PCIE2_PHY_LOS_LEVEL(x)    (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_PHY_LOS_LEVEL_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_PHY_LOS_LEVEL_MASK)

#define IOMUXC_GPR_GPR_SAI4_IPG_STOP_ACK_MASK    (0x1000000U)
#define IOMUXC_GPR_GPR_SAI4_IPG_STOP_ACK_SHIFT   (24U)
/*! SAI4_IPG_STOP_ACK
 *  0b0..stop acknowledge is not asserted
 *  0b1..stop acknowledge is asserted, peripheral is in STOP mode
 */
#define IOMUXC_GPR_GPR_SAI4_IPG_STOP_ACK(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_SAI4_IPG_STOP_ACK_SHIFT)) & IOMUXC_GPR_GPR_SAI4_IPG_STOP_ACK_MASK)

#define IOMUXC_GPR_GPR_PCIE2_CTRL_DIAG_STATUS_BUS_SELECT_MASK (0x1E000000U)
#define IOMUXC_GPR_GPR_PCIE2_CTRL_DIAG_STATUS_BUS_SELECT_SHIFT (25U)
#define IOMUXC_GPR_GPR_PCIE2_CTRL_DIAG_STATUS_BUS_SELECT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_CTRL_DIAG_STATUS_BUS_SELECT_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_CTRL_DIAG_STATUS_BUS_SELECT_MASK)

#define IOMUXC_GPR_GPR_SAI5_IPG_STOP_ACK_MASK    (0x2000000U)
#define IOMUXC_GPR_GPR_SAI5_IPG_STOP_ACK_SHIFT   (25U)
/*! SAI5_IPG_STOP_ACK
 *  0b0..stop acknowledge is not asserted
 *  0b1..stop acknowledge is asserted, peripheral is in STOP mode
 */
#define IOMUXC_GPR_GPR_SAI5_IPG_STOP_ACK(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_SAI5_IPG_STOP_ACK_SHIFT)) & IOMUXC_GPR_GPR_SAI5_IPG_STOP_ACK_MASK)

#define IOMUXC_GPR_GPR_OCRAM_S_TZ_EN_LOCK_MASK   (0x4000000U)
#define IOMUXC_GPR_GPR_OCRAM_S_TZ_EN_LOCK_SHIFT  (26U)
#define IOMUXC_GPR_GPR_OCRAM_S_TZ_EN_LOCK(x)     (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_OCRAM_S_TZ_EN_LOCK_SHIFT)) & IOMUXC_GPR_GPR_OCRAM_S_TZ_EN_LOCK_MASK)

#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN1_MASK (0xFC000000U)
#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN1_SHIFT (26U)
#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN1(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN1_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN1_MASK)

#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN1_MASK (0xFC000000U)
#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN1_SHIFT (26U)
#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN1(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN1_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN1_MASK)

#define IOMUXC_GPR_GPR_SAI6_IPG_STOP_ACK_MASK    (0x4000000U)
#define IOMUXC_GPR_GPR_SAI6_IPG_STOP_ACK_SHIFT   (26U)
/*! SAI6_IPG_STOP_ACK
 *  0b0..stop acknowledge is not asserted
 *  0b1..stop acknowledge is asserted, peripheral is in STOP mode
 */
#define IOMUXC_GPR_GPR_SAI6_IPG_STOP_ACK(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_SAI6_IPG_STOP_ACK_SHIFT)) & IOMUXC_GPR_GPR_SAI6_IPG_STOP_ACK_MASK)

#define IOMUXC_GPR_GPR_OCRAM_S_TZ_ADDR_LOCK_MASK (0x38000000U)
#define IOMUXC_GPR_GPR_OCRAM_S_TZ_ADDR_LOCK_SHIFT (27U)
#define IOMUXC_GPR_GPR_OCRAM_S_TZ_ADDR_LOCK(x)   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_OCRAM_S_TZ_ADDR_LOCK_SHIFT)) & IOMUXC_GPR_GPR_OCRAM_S_TZ_ADDR_LOCK_MASK)

#define IOMUXC_GPR_GPR_DBG_ACK_MASK              (0xF0000000U)
#define IOMUXC_GPR_GPR_DBG_ACK_SHIFT             (28U)
#define IOMUXC_GPR_GPR_DBG_ACK(x)                (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DBG_ACK_SHIFT)) & IOMUXC_GPR_GPR_DBG_ACK_MASK)

#define IOMUXC_GPR_GPR_PCIE1_PHY_LOS_BIAS_MASK   (0xE0000000U)
#define IOMUXC_GPR_GPR_PCIE1_PHY_LOS_BIAS_SHIFT  (29U)
#define IOMUXC_GPR_GPR_PCIE1_PHY_LOS_BIAS(x)     (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_PHY_LOS_BIAS_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_PHY_LOS_BIAS_MASK)

#define IOMUXC_GPR_GPR_PCIE2_CTRL_DIAG_CTRL_BUS_MASK (0x60000000U)
#define IOMUXC_GPR_GPR_PCIE2_CTRL_DIAG_CTRL_BUS_SHIFT (29U)
#define IOMUXC_GPR_GPR_PCIE2_CTRL_DIAG_CTRL_BUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_CTRL_DIAG_CTRL_BUS_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_CTRL_DIAG_CTRL_BUS_MASK)

#define IOMUXC_GPR_GPR_PCIE2_PHY_LOS_BIAS_MASK   (0xE0000000U)
#define IOMUXC_GPR_GPR_PCIE2_PHY_LOS_BIAS_SHIFT  (29U)
#define IOMUXC_GPR_GPR_PCIE2_PHY_LOS_BIAS(x)     (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_PHY_LOS_BIAS_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_PHY_LOS_BIAS_MASK)

#define IOMUXC_GPR_GPR_PCIE_DIAG_BUS_SEL_MASK    (0x80000000U)
#define IOMUXC_GPR_GPR_PCIE_DIAG_BUS_SEL_SHIFT   (31U)
#define IOMUXC_GPR_GPR_PCIE_DIAG_BUS_SEL(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE_DIAG_BUS_SEL_SHIFT)) & IOMUXC_GPR_GPR_PCIE_DIAG_BUS_SEL_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group IOMUXC_GPR_Register_Masks */


/*!
 * @}
 */ /* end of group IOMUXC_GPR_Peripheral_Access_Layer */


/*
** End of section using anonymous unions
*/

#if defined(__ARMCC_VERSION)
  #if (__ARMCC_VERSION >= 6010050)
    #pragma clang diagnostic pop
  #else
    #pragma pop
  #endif
#elif defined(__GNUC__)
  /* leave anonymous unions enabled */
#elif defined(__IAR_SYSTEMS_ICC__)
  #pragma language=default
#else
  #error Not supported compiler type
#endif

/*!
 * @}
 */ /* end of group Peripheral_access_layer */


#endif  /* IOMUXC_GPR_H_ */

