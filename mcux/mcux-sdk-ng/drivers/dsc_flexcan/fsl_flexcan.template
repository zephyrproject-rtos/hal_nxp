  /* Disable module to config protocol-Engine clock source  */
  ${PERIPHERAL}$->MCR |= CAN_MCR_MDIS_MASK;
  /* Wait FlexCAN enter low-power mode. */
  while (0U == (${PERIPHERAL}$->MCR & CAN_MCR_LPMACK_MASK))
  {}
#ifdef ${VPREFIX}$_CTRL1_INIT
  /* Protocol-Engine clock source selection */
  if (0U != (${VPREFIX}$_CTRL1_INIT & CAN_CTRL1_CLKSRC_MASK))
  {
    ${PERIPHERAL}$->CTRL1 |= CAN_CTRL1_CLKSRC_MASK;
  }
  else
  {
    ${PERIPHERAL}$->CTRL1 &= ~CAN_CTRL1_CLKSRC_MASK;
  }
#endif /* ${VPREFIX}$_CTRL1_INIT */
  /* Enable module for configuration */
  ${PERIPHERAL}$->MCR &= ~(CAN_MCR_MDIS_MASK | CAN_MCR_DOZE_MASK);
  /* Wait FlexCAN exit from low-power mode. */
  while (0U != (${PERIPHERAL}$->MCR & CAN_MCR_LPMACK_MASK))
  {}
  /* Assert Soft Reset Signal (Freeze mode will enabled by default). */
  ${PERIPHERAL}$->MCR |= CAN_MCR_SOFTRST_MASK;
  /* Wait until FlexCAN reset completes. */
  while (0U != (${PERIPHERAL}$->MCR & CAN_MCR_SOFTRST_MASK))
  {}
#ifdef ${VPREFIX}$_CTRL1_INIT
  /* Config CTRL1 register. */
  ${PERIPHERAL}$->CTRL1 = ${VPREFIX}$_CTRL1_INIT;
#endif /* ${VPREFIX}$_CTRL1_INIT */
#ifdef ${VPREFIX}$_TIMER_INIT
  ${PERIPHERAL}$->TIMER = ${VPREFIX}$_TIMER_INIT;
#else
  ${PERIPHERAL}$->TIMER = 0x0U;
#endif /* ${VPREFIX}$_TIMER_INIT */
#ifdef ${VPREFIX}$_CTRL2_INIT
  ${PERIPHERAL}$->CTRL2 = ${VPREFIX}$_CTRL2_INIT;
#else
  ${PERIPHERAL}$->CTRL2 = 0xA00000U;
#endif /* ${VPREFIX}$_CTRL2_INIT */
#ifdef ${VPREFIX}$_CBT_INIT
  ${PERIPHERAL}$->CBT = ${VPREFIX}$_CBT_INIT;
#else
  ${PERIPHERAL}$->CBT = 0x0U;
#endif /* ${VPREFIX}$_CBT_INIT */
#ifdef ${VPREFIX}$_FDCTRL_INIT
  ${PERIPHERAL}$->FDCTRL = ${VPREFIX}$_FDCTRL_INIT;
#else
  ${PERIPHERAL}$->FDCTRL = 0x80000100U;
#endif /* ${VPREFIX}$_FDCTRL_INIT */
#ifdef ${VPREFIX}$_FDCBT_INIT
  ${PERIPHERAL}$->FDCBT = ${VPREFIX}$_FDCBT_INIT;
#else
  ${PERIPHERAL}$->FDCBT = 0x0U;
#endif /* ${VPREFIX}$_FDCBT_INIT */
#ifdef ${VPREFIX}$_RXMGMASK_INIT
  ${PERIPHERAL}$->RXMGMASK = ${VPREFIX}$_RXMGMASK_INIT;
#else
  ${PERIPHERAL}$->RXMGMASK = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXMGMASK_INIT */
#ifdef ${VPREFIX}$_RX14MASK_INIT
  ${PERIPHERAL}$->RX14MASK = ${VPREFIX}$_RX14MASK_INIT;
#else
  ${PERIPHERAL}$->RX14MASK = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RX14MASK_INIT */
#ifdef ${VPREFIX}$_RX15MASK_INIT
  ${PERIPHERAL}$->RX15MASK = ${VPREFIX}$_RX15MASK_INIT;
#else
  ${PERIPHERAL}$->RX15MASK = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RX15MASK_INIT */
#ifdef ${VPREFIX}$_RXFGMASK_INIT
  ${PERIPHERAL}$->RXFGMASK = ${VPREFIX}$_RXFGMASK_INIT;
#else
  ${PERIPHERAL}$->RXFGMASK = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXFGMASK_INIT */
#ifdef ${VPREFIX}$_RXIMR0_INIT
  ${PERIPHERAL}$->RXIMR[0] = ${VPREFIX}$_RXIMR0_INIT;
#else
  ${PERIPHERAL}$->RXIMR[0] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR0_INIT */
#ifdef ${VPREFIX}$_RXIMR1_INIT
  ${PERIPHERAL}$->RXIMR[1] = ${VPREFIX}$_RXIMR1_INIT;
#else
  ${PERIPHERAL}$->RXIMR[1] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR1_INIT */
#ifdef ${VPREFIX}$_RXIMR2_INIT
  ${PERIPHERAL}$->RXIMR[2] = ${VPREFIX}$_RXIMR2_INIT;
#else
  ${PERIPHERAL}$->RXIMR[2] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR2_INIT */
#ifdef ${VPREFIX}$_RXIMR3_INIT
  ${PERIPHERAL}$->RXIMR[3] = ${VPREFIX}$_RXIMR3_INIT;
#else
  ${PERIPHERAL}$->RXIMR[3] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR3_INIT */
#ifdef ${VPREFIX}$_RXIMR4_INIT
  ${PERIPHERAL}$->RXIMR[4] = ${VPREFIX}$_RXIMR4_INIT;
#else
  ${PERIPHERAL}$->RXIMR[4] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR4_INIT */
#ifdef ${VPREFIX}$_RXIMR5_INIT
  ${PERIPHERAL}$->RXIMR[5] = ${VPREFIX}$_RXIMR5_INIT;
#else
  ${PERIPHERAL}$->RXIMR[5] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR5_INIT */
#ifdef ${VPREFIX}$_RXIMR6_INIT
  ${PERIPHERAL}$->RXIMR[6] = ${VPREFIX}$_RXIMR6_INIT;
#else
  ${PERIPHERAL}$->RXIMR[6] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR6_INIT */
#ifdef ${VPREFIX}$_RXIMR7_INIT
  ${PERIPHERAL}$->RXIMR[7] = ${VPREFIX}$_RXIMR7_INIT;
#else
  ${PERIPHERAL}$->RXIMR[7] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR7_INIT */
#ifdef ${VPREFIX}$_RXIMR8_INIT
  ${PERIPHERAL}$->RXIMR[8] = ${VPREFIX}$_RXIMR8_INIT;
#else
  ${PERIPHERAL}$->RXIMR[8] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR8_INIT */
#ifdef ${VPREFIX}$_RXIMR9_INIT
  ${PERIPHERAL}$->RXIMR[9] = ${VPREFIX}$_RXIMR9_INIT;
#else
  ${PERIPHERAL}$->RXIMR[9] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR9_INIT */
#ifdef ${VPREFIX}$_RXIMR10_INIT
  ${PERIPHERAL}$->RXIMR[10] = ${VPREFIX}$_RXIMR10_INIT;
#else
  ${PERIPHERAL}$->RXIMR[10] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR10_INIT */
#ifdef ${VPREFIX}$_RXIMR11_INIT
  ${PERIPHERAL}$->RXIMR[11] = ${VPREFIX}$_RXIMR11_INIT;
#else
  ${PERIPHERAL}$->RXIMR[11] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR11_INIT */
#ifdef ${VPREFIX}$_RXIMR12_INIT
  ${PERIPHERAL}$->RXIMR[12] = ${VPREFIX}$_RXIMR12_INIT;
#else
  ${PERIPHERAL}$->RXIMR[12] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR12_INIT */
#ifdef ${VPREFIX}$_RXIMR13_INIT
  ${PERIPHERAL}$->RXIMR[13] = ${VPREFIX}$_RXIMR13_INIT;
#else
  ${PERIPHERAL}$->RXIMR[13] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR13_INIT */
#ifdef ${VPREFIX}$_RXIMR14_INIT
  ${PERIPHERAL}$->RXIMR[14] = ${VPREFIX}$_RXIMR14_INIT;
#else
  ${PERIPHERAL}$->RXIMR[14] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR14_INIT */
#ifdef ${VPREFIX}$_RXIMR15_INIT
  ${PERIPHERAL}$->RXIMR[15] = ${VPREFIX}$_RXIMR15_INIT;
#else
  ${PERIPHERAL}$->RXIMR[15] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR15_INIT */
#ifdef ${VPREFIX}$_RXIMR16_INIT
  ${PERIPHERAL}$->RXIMR[16] = ${VPREFIX}$_RXIMR16_INIT;
#else
  ${PERIPHERAL}$->RXIMR[16] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR16_INIT */
#ifdef ${VPREFIX}$_RXIMR17_INIT
  ${PERIPHERAL}$->RXIMR[17] = ${VPREFIX}$_RXIMR17_INIT;
#else
  ${PERIPHERAL}$->RXIMR[17] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR17_INIT */
#ifdef ${VPREFIX}$_RXIMR18_INIT
  ${PERIPHERAL}$->RXIMR[18] = ${VPREFIX}$_RXIMR18_INIT;
#else
  ${PERIPHERAL}$->RXIMR[18] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR18_INIT */
#ifdef ${VPREFIX}$_RXIMR19_INIT
  ${PERIPHERAL}$->RXIMR[19] = ${VPREFIX}$_RXIMR19_INIT;
#else
  ${PERIPHERAL}$->RXIMR[19] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR19_INIT */
#ifdef ${VPREFIX}$_RXIMR20_INIT
  ${PERIPHERAL}$->RXIMR[20] = ${VPREFIX}$_RXIMR20_INIT;
#else
  ${PERIPHERAL}$->RXIMR[20] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR20_INIT */
#ifdef ${VPREFIX}$_RXIMR21_INIT
  ${PERIPHERAL}$->RXIMR[21] = ${VPREFIX}$_RXIMR21_INIT;
#else
  ${PERIPHERAL}$->RXIMR[21] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR21_INIT */
#ifdef ${VPREFIX}$_RXIMR22_INIT
  ${PERIPHERAL}$->RXIMR[22] = ${VPREFIX}$_RXIMR22_INIT;
#else
  ${PERIPHERAL}$->RXIMR[22] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR22_INIT */
#ifdef ${VPREFIX}$_RXIMR23_INIT
  ${PERIPHERAL}$->RXIMR[23] = ${VPREFIX}$_RXIMR23_INIT;
#else
  ${PERIPHERAL}$->RXIMR[23] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR23_INIT */
#ifdef ${VPREFIX}$_RXIMR24_INIT
  ${PERIPHERAL}$->RXIMR[24] = ${VPREFIX}$_RXIMR24_INIT;
#else
  ${PERIPHERAL}$->RXIMR[24] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR24_INIT */
#ifdef ${VPREFIX}$_RXIMR25_INIT
  ${PERIPHERAL}$->RXIMR[25] = ${VPREFIX}$_RXIMR25_INIT;
#else
  ${PERIPHERAL}$->RXIMR[25] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR25_INIT */
#ifdef ${VPREFIX}$_RXIMR26_INIT
  ${PERIPHERAL}$->RXIMR[26] = ${VPREFIX}$_RXIMR26_INIT;
#else
  ${PERIPHERAL}$->RXIMR[26] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR26_INIT */
#ifdef ${VPREFIX}$_RXIMR27_INIT
  ${PERIPHERAL}$->RXIMR[27] = ${VPREFIX}$_RXIMR27_INIT;
#else
  ${PERIPHERAL}$->RXIMR[27] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR27_INIT */
#ifdef ${VPREFIX}$_RXIMR28_INIT
  ${PERIPHERAL}$->RXIMR[28] = ${VPREFIX}$_RXIMR28_INIT;
#else
  ${PERIPHERAL}$->RXIMR[28] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR28_INIT */
#ifdef ${VPREFIX}$_RXIMR29_INIT
  ${PERIPHERAL}$->RXIMR[29] = ${VPREFIX}$_RXIMR29_INIT;
#else
  ${PERIPHERAL}$->RXIMR[29] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR29_INIT */
#ifdef ${VPREFIX}$_RXIMR30_INIT
  ${PERIPHERAL}$->RXIMR[30] = ${VPREFIX}$_RXIMR30_INIT;
#else
  ${PERIPHERAL}$->RXIMR[30] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR30_INIT */
#ifdef ${VPREFIX}$_RXIMR31_INIT
  ${PERIPHERAL}$->RXIMR[31] = ${VPREFIX}$_RXIMR31_INIT;
#else
  ${PERIPHERAL}$->RXIMR[31] = 0x3FFFFFFFU;
#endif /* ${VPREFIX}$_RXIMR31_INIT */
  /* Clean all Message Buffer CS fields. */
  ${PERIPHERAL}$->MB[0].CS = 0x0U;
  ${PERIPHERAL}$->MB[1].CS = 0x0U;
  ${PERIPHERAL}$->MB[2].CS = 0x0U;
  ${PERIPHERAL}$->MB[3].CS = 0x0U;
  ${PERIPHERAL}$->MB[4].CS = 0x0U;
  ${PERIPHERAL}$->MB[5].CS = 0x0U;
  ${PERIPHERAL}$->MB[6].CS = 0x0U;
  ${PERIPHERAL}$->MB[7].CS = 0x0U;
  ${PERIPHERAL}$->MB[8].CS = 0x0U;
  ${PERIPHERAL}$->MB[9].CS = 0x0U;
  ${PERIPHERAL}$->MB[10].CS = 0x0U;
  ${PERIPHERAL}$->MB[11].CS = 0x0U;
  ${PERIPHERAL}$->MB[12].CS = 0x0U;
  ${PERIPHERAL}$->MB[13].CS = 0x0U;
  ${PERIPHERAL}$->MB[14].CS = 0x0U;
  ${PERIPHERAL}$->MB[15].CS = 0x0U;
  ${PERIPHERAL}$->MB[16].CS = 0x0U;
  ${PERIPHERAL}$->MB[17].CS = 0x0U;
  ${PERIPHERAL}$->MB[18].CS = 0x0U;
  ${PERIPHERAL}$->MB[19].CS = 0x0U;
  ${PERIPHERAL}$->MB[20].CS = 0x0U;
  ${PERIPHERAL}$->MB[21].CS = 0x0U;
  ${PERIPHERAL}$->MB[22].CS = 0x0U;
  ${PERIPHERAL}$->MB[23].CS = 0x0U;
  ${PERIPHERAL}$->MB[24].CS = 0x0U;
  ${PERIPHERAL}$->MB[25].CS = 0x0U;
  ${PERIPHERAL}$->MB[26].CS = 0x0U;
  ${PERIPHERAL}$->MB[27].CS = 0x0U;
  ${PERIPHERAL}$->MB[28].CS = 0x0U;
  ${PERIPHERAL}$->MB[29].CS = 0x0U;
  ${PERIPHERAL}$->MB[30].CS = 0x0U;
  ${PERIPHERAL}$->MB[31].CS = 0x0U;
#ifdef ${VPREFIX}$_MCR_INIT
  ${PERIPHERAL}$->MCR = ${VPREFIX}$_MCR_INIT;
  if((${VPREFIX}$_MCR_INIT & CAN_MCR_MDIS_MASK) != 0U)
  {
    /* Wait FlexCAN enter low-power mode. */
    while (0U == (${PERIPHERAL}$->MCR & CAN_MCR_LPMACK_MASK))
    {}
  }
  if((${VPREFIX}$_MCR_INIT & CAN_MCR_FRZ_MASK) == 0U)
  {
    /* Wait until the Module exit freeze mode. */
    while (0U != (${PERIPHERAL}$->MCR & CAN_MCR_FRZACK_MASK))
    {}
  }
#else
  ${PERIPHERAL}$->MCR = 0xD890000FU;
#endif /* ${VPREFIX}$_MCR_INIT */